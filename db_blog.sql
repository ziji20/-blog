/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50558
Source Host           : localhost:3306
Source Database       : db_blog

Target Server Type    : MYSQL
Target Server Version : 50558
File Encoding         : 65001

Date: 2018-08-15 22:51:06
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for t_blog
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL,
  `summary` varchar(400) DEFAULT NULL,
  `releaseDate` datetime DEFAULT NULL,
  `clickHit` int(11) DEFAULT NULL,
  `replyHit` int(11) DEFAULT NULL,
  `content` text,
  `typeId` int(11) DEFAULT NULL,
  `keyWord` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `typeId` (`typeId`),
  CONSTRAINT `t_blog_ibfk_1` FOREIGN KEY (`typeId`) REFERENCES `t_blogtype` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=172 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_blog
-- ----------------------------
INSERT INTO `t_blog` VALUES ('154', '微信小程序配置WSS协议', '微信小程序配置WSS协议', '2018-04-12 11:17:44', '0', '0', '<p>配置的是nginx转发，前提是你已经安装了nginx的软件并已经正常打开网页，安装好SSL协议，能打开https网页</p> \n<p>下面是配置：</p> \n<p>需要的话可以根据需求修改</p> \n<p>server {<br> listen 80;<br> server_name c21r.z1r053.com;<br> return 301 https://$host$request_uri;<br>}</p> \n<p>upstream websocket {<br> server c21r.z1r053.com:2666;<br> }<br>server {<br> listen 443;<br> server_name cgdr.zmr053.com;<br> ssl on;<br> root /home/wwwroot/cren/public;<br> index index.html index.php;<br> <br> location ~* ^.+\\.(jpg|jpeg|gif|png|bmp|js|css)$ {<br> access_log off; <br> root /home/wwwroot/cren/public;<br> expires 30d; <br> break; <br> } <br> <br> location ~ \\.php$ {<br> root /home/wwwroot/cren/public; #指定php的根目录<br> fastcgi_pass 127.0.0.1:9000;#php-fpm的默认端口是9000<br> fastcgi_index index.php;<br> fastcgi_param SCRIPT_FILENAME /home/wwwroot/cren/public$fastcgi_script_name;<br> include fastcgi_params;<br> } <br> ssl_certificate cert3/214550577690872.pem;<br> ssl_certificate_key cert3/214550577690872.key;<br> ssl_session_timeout 5m;<br> ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br> ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br> ssl_prefer_server_ciphers on;</p> \n<p>location / {<br> root /home/wwwroot/cren/public;<br> index index.html index.php;<br> try_files $uri $uri/ /index.php?$query_string;<br> proxy_pass http://c21r.z1r053.com:2666;<br> proxy_http_version 1.1;<br> proxy_set_header Upgrade $http_upgrade;<br> proxy_set_header Connection \"Upgrade\";<br> proxy_set_header X-Real-IP $remote_addr;<br> <br> }<br> access_log /var/log/nginx/c21r.z1r053.com.log;<br>} </p> \n<p>配置之后发现wss协议能打开了，但是https协议又出现问题，所以这里有几个坑需要注意下一：</p> \n<p>1.&nbsp;proxy_pass http://c21r.z1r053.com:2666; 最开始这里忘记加端口号了，所以wss协议还是不通，加上端口号就好了</p> \n<p>2.配置代理之后图片文件和css，js文件打不开，所以又配置了下面的内容解决了：</p> \n<p>location ~* ^.+\\.(jpg|jpeg|gif|png|bmp|js|css)$ {<br>access_log off;&nbsp;<br>root /home/wwwroot/cren/public;<br>expires 30d;&nbsp;<br>break;&nbsp;<br>}&nbsp;</p> \n<p>3.配置之后加入http转https：</p> \n<p>server {<br>listen 80;<br>server_name c21r.z1r053.com;<br>return 301 https://$host$request_uri;<br>}</p> \n<p>4.location加入重写后js文件才能正常打开：</p> \n<p>try_files $uri $uri/ /index.php?$query_string;</p> \n<p>&nbsp;</p>', '14', null);
INSERT INTO `t_blog` VALUES ('155', 'WebApi 基于token的多平台身份认证架构设计', 'WebApi 基于token的多平台身份认证架构设计', '2018-04-12 11:17:55', '0', '0', '<div id=\"id1\" class=\"section\"> \n <h1>1&nbsp;&nbsp;&nbsp;概述</h1> \n <p>在存在账号体系的信息系统中，对身份的鉴定是非常重要的事情。</p> \n <p>随着移动互联网时代到来，客户端的类型越来越多， 逐渐出现了&nbsp;一个服务器，N个客户端的格局&nbsp;。</p> \n <p><img src=\"http:/static/userImages/2018/04/12/7cd35df0-dc70-448b-aa7c-a3cfe64979bc.png\" alt=\"\"></p> \n <p>不同的客户端产生了不同的用户使用场景，这些场景：</p> \n <ol class=\"arabic simple\"> \n  <li>有不同的环境安全威胁</li> \n  <li>不同的会话生存周期</li> \n  <li>不同的用户权限控制体系</li> \n  <li>不同级别的接口调用方式</li> \n </ol> \n <p>综上所述，它们的身份认证方式也存在一定的区别。</p> \n <p>本文将使用一定的篇幅对这些场景进行一些分析和梳理工作。</p> \n</div> \n<div id=\"id2\" class=\"section\"> \n <h1><a name=\"t1\"></a>2&nbsp;&nbsp;&nbsp;使用场景</h1> \n <p>下面是一些在IT服务常见的一些使用场景:</p> \n <ol class=\"arabic simple\"> \n  <li>用户在web浏览器端登录系统,使用系统服务</li> \n  <li>用户在手机端（Android/iOS）登录系统,使用系统服务</li> \n  <li>用户使用开放接口登录系统,调用系统服务</li> \n  <li>用户在PC处理登录状态时通过手机扫码授权手机登录（使用得比较少）</li> \n  <li>用户在手机处理登录状态进通过手机扫码授权PC进行登录（比较常见）</li> \n </ol> \n <p>通过对场景的细分,得到如下不同的认证token类别:</p> \n <ol class=\"arabic\"> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     原始账号密码类别\n    </dt>\n    <dd> \n     <ul class=\"first last simple\"> \n      <li>用户名和密码</li> \n      <li>API应用ID/KEY</li> \n     </ul> \n    </dd>\n   </dl></li> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     会话ID类别\n    </dt>\n    <dd> \n     <ul class=\"first last simple\"> \n      <li>浏览器端token</li> \n      <li>移动端token</li> \n      <li>API应用token</li> \n     </ul> \n    </dd>\n   </dl></li> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     接口调用类别\n    </dt>\n    <dd> \n     <ul class=\"first last simple\"> \n      <li>接口访问token</li> \n     </ul> \n    </dd>\n   </dl></li> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     身份授权类别\n    </dt>\n    <dd> \n     <ul class=\"first last simple\"> \n      <li>PC和移动端相互授权的token</li> \n     </ul> \n    </dd>\n   </dl></li> \n </ol>\n</div> \n<div id=\"id3\" class=\"section\"> \n <h1><a name=\"t2\"></a>3&nbsp;&nbsp;&nbsp;token的类别</h1> \n <p>不同场景的token进行如下几个维度的对比:</p> \n <p>天然属性&nbsp;对比:</p> \n <ol class=\"arabic\"> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     使用成本\n    </dt>\n    <dd> \n     <p class=\"first\">本认证方式在使用的时候,造成的不便性。比如:</p> \n     <ul class=\"last simple\"> \n      <li>账号密码需要用户打开页面然后逐个键入</li> \n      <li>二维码需要用户掏出手机进行扫码操作</li> \n     </ul> \n    </dd>\n   </dl></li> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     变化成本\n    </dt>\n    <dd> \n     <p class=\"first\">本认证方式,token发生变化时,用户需要做出的相应更改的成本:</p> \n     <ul class=\"last simple\"> \n      <li>用户名和密码发生变化时,用户需要额外记忆和重新键入新密码</li> \n      <li>API应用ID/KEY发生变化时,第三方应用需要重新在代码中修改并部署</li> \n      <li>授权二维码发生变化时,需要用户重新打开手机应用进行扫码</li> \n     </ul> \n    </dd>\n   </dl></li> \n  <li> <p class=\"first\">环境风险</p> \n   <blockquote> \n    <ul class=\"simple\"> \n     <li>被偷窥的风险</li> \n     <li>被抓包的风险</li> \n     <li>被伪造的风险</li> \n    </ul> \n   </blockquote> </li> \n </ol> \n <p>可调控属性&nbsp;对比:</p> \n <ol class=\"arabic\"> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     使用频率\n    </dt>\n    <dd> \n     <ul class=\"first last simple\"> \n      <li>在网路中传送的频率</li> \n     </ul> \n    </dd>\n   </dl></li> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     有效时间\n    </dt>\n    <dd> \n     <ul class=\"first last simple\"> \n      <li>此token从创建到终结的生存时间</li> \n     </ul> \n    </dd>\n   </dl></li> \n </ol> \n <p>最终的目标:安全和影响。</p> \n <p>安全和隐私性主要体现在:</p> \n <ul class=\"simple\"> \n  <li>token 不容易被窃取和盗用（通过对传送频率控制）</li> \n  <li>token 即使被窃取,产生的影响也是可控的（通过对有效时间控制）</li> \n </ul> \n <p>关于隐私及隐私破坏后的后果,有如下的基本结论:</p> \n <ol class=\"arabic simple\"> \n  <li>曝光频率高的容易被截获</li> \n  <li>生存周期长的在被截获后产生的影响更严重和深远</li> \n </ol> \n <p>遵守如下原则:</p> \n <ol class=\"arabic simple\"> \n  <li>变化成本高的token不要轻易变化</li> \n  <li>不轻易变化的token要减少曝光频率（网络传输次数）</li> \n  <li>曝光频率高的token的生存周期要尽量短</li> \n </ol> \n <p>将各类token的固有特点及可控属性进行调控后,&nbsp;对每个指标进行量化评分（1~5分），我们可以得到如下的对比表：</p> \n <img src=\"http:/static/userImages/2018/04/12/903106d7-c8b1-460b-82af-d43bec10cbd0.png\" alt=\"\">\n <br> \n <p>备注:</p> \n <ul class=\"simple\"> \n  <li>user_name/passwd&nbsp;和&nbsp;app_id/app_key&nbsp;是等价的效果</li> \n </ul> \n</div> \n<div id=\"id4\" class=\"section\"> \n <h1><a name=\"t3\"></a>4&nbsp;&nbsp;&nbsp;token的层级关系</h1> \n <p>参考上一节的对比表，可以很容易对这些不同用途的token进行分层，主要可以分为4层：</p> \n <ol class=\"arabic\"> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     密码层\n    </dt>\n    <dd> \n     <p class=\"first last\">最传统的用户和系统之间约定的数字身份认证方式</p> \n    </dd>\n   </dl></li> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     会话层\n    </dt>\n    <dd> \n     <p class=\"first last\">用户登录后的会话生命周期的会话认证</p> \n    </dd>\n   </dl></li> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     调用层\n    </dt>\n    <dd> \n     <p class=\"first last\">用户在会话期间对应用程序接口的调用认证</p> \n    </dd>\n   </dl></li> \n  <li>\n   <dl class=\"first docutils\">\n    <dt>\n     应用层\n    </dt>\n    <dd> \n     <p class=\"first last\">用户获取了接口访问调用权限后的一些场景或者身份认证应用</p> \n    </dd>\n   </dl></li> \n </ol>\n</div> \n<div class=\"section\">\n token的分层图如下：\n</div> \n<div class=\"section\">\n <img src=\"http:/static/userImages/2018/04/12/17fb43cd-39d4-4364-a2e7-a9fa647fd5c7.png\" alt=\"\">\n <br> \n <p>在一个多客户端的信息系统里面,这些token的产生及应用的内在联系如下:</p> \n <ol class=\"arabic simple\"> \n  <li>用户输入用户名和用户口令进行一次性认证</li> \n  <li>在&nbsp;不同&nbsp;的终端里面生成拥有&nbsp;不同&nbsp;生命周期的会话token</li> \n  <li>客户端会话token从服务端交换生命周期短但曝光&nbsp;频繁&nbsp;的接口访问token</li> \n  <li>会话token可以生成和刷新延长&nbsp;access_token&nbsp;的生存时间</li> \n  <li>access_token可以生成生存周期最短的用于授权的二维码的token</li> \n </ol> \n <p>使用如上的架构有如下的好处：</p> \n <ol class=\"arabic simple\"> \n  <li>良好的统一性。可以解决不同平台上认证token的生存周期的&nbsp;归一化&nbsp;问题</li> \n  <li>良好的解耦性。核心接口调用服务器的认证 access_token 可以完成独立的实现和部署</li> \n  <li>良好的层次性。不同平台的可以有完全不同的用户权限控制系统，这个控制可以在&nbsp;会话层&nbsp;中各平台解决掉</li> \n </ol> \n <div id=\"id5\" class=\"section\"> \n  <h2><a name=\"t4\"></a>4.1&nbsp;&nbsp;&nbsp;账号密码</h2> \n  <p>广义的&nbsp;账号/密码&nbsp;有如下的呈现方式:</p> \n  <ol class=\"arabic simple\"> \n   <li>传统的注册用户名和密码</li> \n   <li>应用程序的app_id/app_key</li> \n  </ol> \n  <p>它们的特点如下：</p> \n  <ol class=\"arabic\"> \n   <li>\n    <dl class=\"first docutils\">\n     <dt>\n      会有特别的意义\n     </dt>\n     <dd> \n      <p class=\"first last\">比如：用户自己为了方便记忆，会设置有一定含义的账号和密码。</p> \n     </dd>\n    </dl></li> \n   <li>\n    <dl class=\"first docutils\">\n     <dt>\n      不常修改\n     </dt>\n     <dd> \n      <p class=\"first last\">账号密码对用户有特别含义，一般没有特殊情况不会愿意修改。 而app_id/app_key则会写在应用程序中，修改会意味着重新发布上线的成本</p> \n     </dd>\n    </dl></li> \n   <li>\n    <dl class=\"first docutils\">\n     <dt>\n      一旦泄露影响深远\n     </dt>\n     <dd> \n      <p class=\"first last\">正因为不常修改，只要泄露了基本相当于用户的网络身份被泄露，而且只要没被察觉这种身份盗用就会一直存在</p> \n     </dd>\n    </dl></li> \n  </ol> \n  <p>所以在认证系统中应该尽量减少传输的机会，避免泄露。</p> \n </div> \n <div id=\"id6\" class=\"section\"> \n  <h2><a name=\"t5\"></a>4.2&nbsp;&nbsp;&nbsp;客户端会话token</h2> \n  <p>功能：充当着session的角色，不同的客户端有不同的生命周期。</p> \n  <p>使用步骤：</p> \n  <ol class=\"arabic simple\"> \n   <li>用户使用账号密码，换取会话token</li> \n  </ol> \n  <p>不同的平台的token有不同的特点。</p> \n  <p>Web平台生存周期短</p> \n  <p>主要原因：</p> \n  <ol class=\"arabic\"> \n   <li>\n    <dl class=\"first docutils\">\n     <dt>\n      环境安全性\n     </dt>\n     <dd> \n      <p class=\"first last\">由于web登录环境一般很可能是公共环境，被他人盗取的风险值较大</p> \n     </dd>\n    </dl></li> \n   <li>\n    <dl class=\"first docutils\">\n     <dt>\n      输入便捷性\n     </dt>\n     <dd> \n      <p class=\"first last\">在PC上使用键盘输入会比较便捷</p> \n     </dd>\n    </dl></li> \n  </ol> \n  <p>移动端生存周期长</p> \n  <p>主要原因：</p> \n  <ol class=\"arabic\"> \n   <li>\n    <dl class=\"first docutils\">\n     <dt>\n      环境安全性\n     </dt>\n     <dd> \n      <p class=\"first last\">移动端平台是个人用户极其私密的平台，它人接触的机会不大</p> \n     </dd>\n    </dl></li> \n   <li>\n    <dl class=\"first docutils\">\n     <dt>\n      输入便捷性\n     </dt>\n     <dd> \n      <p class=\"first last\">在移动端上使用手指在小屏幕上触摸输入体验差，输入成本高</p> \n     </dd>\n    </dl></li> \n  </ol>\n </div> \n <div id=\"access-token\" class=\"section\"> \n  <h2><a name=\"t6\"></a>4.3&nbsp;&nbsp;&nbsp;access_token</h2> \n  <p>功能：服务端应用程序api接口访问和调用的凭证。</p> \n  <p>使用步骤：</p> \n  <ol class=\"arabic simple\"> \n   <li>使用具有较长生命周期的会话token来换取此接口访问token。</li> \n  </ol> \n  <p>其曝光频率直接和接口调用频率有关，属于高频使用的凭证。 为了照顾到隐私性，尽量减少其生命周期，即使被截取了，也不至于产生严重的后果。</p> \n  <p>注意：在客户端token之下还加上一个access_token， 主要是为了让具有不同生命周期的客户端token最后在调用api的时候， 能够具有统一的认证方式。</p> \n </div> \n <div id=\"pam-token\" class=\"section\"> \n  <h2><a name=\"t7\"></a>4.4&nbsp;&nbsp;&nbsp;pam_token</h2> \n  <p>功能：由已经登录和认证的PC端生成的二维码的原始串号（Pc Auth Mobile）。</p> \n  <p>主要步骤如下：</p> \n  <ol class=\"arabic simple\"> \n   <li>PC上用户已经完成认证，登录了系统</li> \n   <li>PC端生成一组和此用户相关联的pam_token</li> \n   <li>PC端将此pam_token的使用链接生成二维码</li> \n   <li>移动端扫码后，请求服务器，并和用户信息关联</li> \n   <li>移动端获取refresh_token(长时效的会话)</li> \n   <li>根据 refresh_token 获取 access_token</li> \n   <li>完成正常的接口调用工作</li> \n  </ol> \n  <p>备注:</p> \n  <ul class=\"simple\"> \n   <li>生存周期为2分钟,2分钟后过期删除</li> \n   <li>没有被使用时,每1分钟变一次</li> \n   <li>被使用后,立刻删除掉</li> \n   <li>此种认证模式一般不会被使用到</li> \n  </ul> \n </div> \n <div id=\"map-token\" class=\"section\"> \n  <h2><a name=\"t8\"></a>4.5&nbsp;&nbsp;&nbsp;map_token</h2> \n  <p>功能：由已经登录的移动app来扫码认证PC端系统，并完成PC端系统的登录（Mobile Auth Pc）。</p> \n  <p>主要步骤：</p> \n  <ol class=\"arabic simple\"> \n   <li>移动端完成用户身份的认证登录app</li> \n   <li>未登录的PC生成匿名的&nbsp;map_token</li> \n   <li>移动端扫码后在db中生成&nbsp;map_token&nbsp;和用户关联（完成签名）</li> \n   <li>db同时针对此用户生成&nbsp;web_token</li> \n   <li>PC端一直以&nbsp;map_token&nbsp;为参数查找此命名用户的&nbsp;web_token</li> \n   <li>PC端根据&nbsp;web_token&nbsp;去获取&nbsp;access_token</li> \n   <li>后续正常的调用接口调用工作</li> \n  </ol> \n  <p>备注:</p> \n  <ul class=\"simple\"> \n   <li>生存周期为2分钟,2分钟后过期删除</li> \n   <li>没有被使用时,每1分钟变一次</li> \n   <li>被使用后,立刻删除掉</li> \n  </ul> \n </div> \n</div> \n<div id=\"id7\" class=\"section\"> \n <h1><a name=\"t9\"></a>5&nbsp;&nbsp;&nbsp;小结与展望</h1> \n <p>本文所设计的基于token的身份认证系统，主要解决了如下的问题：</p> \n <ol class=\"arabic simple\"> \n  <li>token的分类问题</li> \n  <li>token的隐私性参数设置问题</li> \n  <li>token的使用场景问题</li> \n  <li>不同生命周期的token分层转化关系</li> \n </ol> \n <p>本文中提到的设计方法，在&nbsp;应用层&nbsp;中可以适用于且不限于如下场景中：</p> \n <ol class=\"arabic simple\">\n  <ol class=\"arabic simple\"> \n   <li>\n    <ol class=\"arabic simple\"> \n     <li>用户登录</li> \n     <li>有时效的优惠券发放</li> \n     <li>有时效的邀请码发放</li> \n     <li>有时效的二维码授权</li> \n     <li>具有时效&nbsp;手机/邮件&nbsp;验证码</li> \n     <li>多个不同平台调用同一套API接口</li> \n     <li>多个平台使用同一个身份认证中心</li> \n    </ol></li> \n  </ol>\n </ol> \n <p style=\"text-align: left\">文章并非个人原创，只是觉得还不错就收藏分享一下。支持原创：https://blog.csdn.net/u010265681/article/details/76651766</p> \n</div>', '14', null);
INSERT INTO `t_blog` VALUES ('156', 'java Hibernate 处理 oracle xmltype类型', 'java Hibernate 处理 oracle xmltype类型', '2018-04-12 11:17:57', '0', '0', '<p>网上关于如何处理oracle xmltype类型的博客很多，我现在分享的是针对具体业务来的，我在oracle数据库entity表中detail插入了一条xmltype类型的数据</p> \n<p>xml的详细内容如下：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">Family</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">Person</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">name</span><span style=\"color: #0000ff;\">&gt;</span>Jack<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">name</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">phone</span><span style=\"color: #0000ff;\">&gt;</span>123<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">phone</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">address</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">company</span><span style=\"color: #0000ff;\">&gt;</span>常州<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">company</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">home</span><span style=\"color: #0000ff;\">&gt;</span>常州<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">home</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">address</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">Person</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">Person</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">name</span><span style=\"color: #0000ff;\">&gt;</span>Tom<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">name</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">phone</span><span style=\"color: #0000ff;\">&gt;</span>456<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">phone</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">address</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">company</span><span style=\"color: #0000ff;\">&gt;</span>无锡<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">company</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">home</span><span style=\"color: #0000ff;\">&gt;</span>无锡<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">home</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">address</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">Person</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">  &lt;</span><span style=\"color: #800000;\">Person</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">name</span><span style=\"color: #0000ff;\">&gt;</span>Andy<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">name</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">phone</span><span style=\"color: #0000ff;\">&gt;</span>789<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">phone</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">address</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">company</span><span style=\"color: #0000ff;\">&gt;</span>苏州<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">company</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">home</span><span style=\"color: #0000ff;\">&gt;</span>苏州<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">home</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">address</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">Person</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">Family</span><span style=\"color: #0000ff;\">&gt;</span></pre> \n</div> \n<p>现在要实现的业务是在前端表格中显示相应数据</p> \n<p><img src=\"http:/static/userImages/2018/04/12/9a947fde-6e29-4eef-aeb6-177dca701fb7.png\" alt=\"\"></p> \n<p>我想到了3种解决途径，后来花费了一天功夫，才解决了这个业务需求。</p> \n<p>方案一、采用oracle通过Hibernate在java中映射的实体才操作</p> \n<p>oracle xmltype类型继承clob大数据类型，通过Hibernate操作在java中映射的实体类型为string类型，再通过dao层去存取该实体。</p> \n<p>这个时候就遇到问题了，将xml编辑为string类型后entity.setDetail(xml)；sava(entity)；数据中数据被更新了，没有问题，但是entity,getDetail()的时候获得的数据为null但是数据库却是有数据的。</p> \n<p>在花费了一段时间之后，发现需要自己编写一个类去替换string，最后取出的类型是docoment类型，将document类型做处理就好了，以下附上相关的一些资料：</p> \n<p><a href=\"https://blog.csdn.net/an129/article/details/51526029\" target=\"_blank\">1、使用Hibernate4处理Oracle XmlType字段类型</a></p> \n<p><a href=\"https://blog.csdn.net/lina791211/article/details/12124117\" target=\"_blank\">2、解决:Weblogic容器、SSH框架下Hibernate映射Oracle XMLType方法与Jar包冲突</a></p> \n<p><a href=\"https://blog.csdn.net/a4986/article/details/70217127\" target=\"_blank\">3、java中Document类使用方法</a></p> \n<p>方案二、采用Hibernate连接写sql获取xmltype的值</p> \n<div class=\"cnblogs_code\"> \n <pre>String sql = \"select en.detail as de from entity en where en.id = \'123\'\"<span style=\"color: #000000;\">;\r\nList</span>&lt;Map&lt;String,Object&gt;&gt; list = jdbcTemplate.queryForList(sql);</pre> \n</div> \n<p>结果发现报错，javax.persistence.PersistenceException: org.hibernate.MappingException: No Dialect mapping for JDBC type: 2009</p> \n<p>查资料没发现有效的解决方案，舍弃</p> \n<p>方案三、使用oracle自带的处理xmltype的函数进行数据读取</p> \n<p class=\"YaHei\"><a href=\"http://www.jb51.net/article/84876.htm\" target=\"_blank\">Oracle 中XML处理函数介绍</a>，附上函数资料，但是发现这样子取数据必须知道数据条数而且取很麻烦</p> \n<p class=\"YaHei\">在查询资料以后发现，对与获取相同标签下的数据的时候可以使用xmltable函数，附上sql语句：</p> \n<div class=\"cnblogs_code\"> \n <pre>select en.id, x.*<span style=\"color: #000000;\">\r\nfrom entity en,xmltable(</span>\'/Family/Person\' passing en.detail columns name path \'name\'<span style=\"color: #000000;\">,\r\nphone path </span>\'phone\'<span style=\"color: #000000;\">) x\r\nwhere ed.id </span>= \'123\'</pre> \n</div> \n<p>需要注意的问题是，使用这种方法的时候，如果节点下还有子节点，那么会报方案二的错误，暂时没有找到解决方案，要处理这种情况还是选择方案一吧。</p> \n<p>暂时就想到这几种解决方案。</p>', '14', null);
INSERT INTO `t_blog` VALUES ('157', 'Xshell与虚拟机不能正常连接', 'Xshell与虚拟机不能正常连接', '2018-04-12 11:17:59', '0', '0', '<div>\n 1.发现Xshell与虚拟机下的两个CentOS都不能正常连接，在这些系统下采用ifconfig查询发现eth0都没有ip地址,进而想到可能是虚拟机的设置出了问题，后来又想到自己之前曾经尝试过设置VMware的网络设置，设置后的如下图：（\n <a href=\"https://wenku.baidu.com/view/583a7620f524ccbff12184ad.html\" target=\"_blank\">设置成了NAT模式</a>（这种方式也可以实现本机系统与虚拟系统的双向访问.但网络内其他机器不能访问虚拟系统（问题原因）），我临时起意尝试使用Xshell连接图中下方的子网ip，以及在window下的多个ip地址，发现都失败了，可能印证了前面的问题原因）\n</div> \n<div>\n <img src=\"http:/static/userImages/2018/04/12/4278a7ee-72e6-4d05-9573-c8f5f7dea3ec.png\" alt=\"\">\n</div> \n<div>\n &nbsp;\n</div> \n<div> \n <div>\n  <br> \n  <div>\n   点击左下角的返还原默认设置，问题得到解决，eth0的ip正常显示，加到Xshell中得到正确连接。\n  </div> \n </div> \n</div>', '14', null);
INSERT INTO `t_blog` VALUES ('158', 'Java线程池是如何诞生的？', 'Java线程池是如何诞生的？', '2018-04-12 11:18:20', '0', '0', '<p>时间回到2003年，那时我还是一个名不见经传的程序员，但是上级却非常看好我，他们把整个并发模块，都交给了我一个人开发。</p> \n<p>这个星期，我必须要完成并发模块中非常重要的一个功能——线程池。</p> \n<div class=\"image-package\"> \n <div class=\"image-caption\">\n  <strong>&nbsp;注：文末有福利！</strong>\n </div> \n</div> \n<h1>为什么要使用线程池</h1> \n<p>作为一个合格的程序员，接到需求，首先我得问自己一句：<br> <strong>为什么要做这个需求？为什么需要线程池？</strong></p> \n<p><strong>软件中的“池”，可以理解为计划经济时代的工厂。</strong></p> \n<p>首先，作为工厂，你要管理好你生产的东西，老王从你工厂这里拿走了一把斧头，改天他不需要了，还回来，你可以把这把斧头借给老赵；</p> \n<p>其次，你又不能无限制的生产，毕竟在资源极度匮乏的时代，如果都被你拿去生产了，其他要用到资源的地方怎么办？</p> \n<p>总结成两点，“池”的作用：</p> \n<ul> \n <li><strong>复用已有资源</strong></li> \n <li><strong>控制资源总量</strong></li> \n</ul> \n<p>数据库连接池是这样，线程池也是如此。</p> \n<p>你一个任务过来了，我发现池子里有没事干并且还活着的线程，来，拿去用，我也不用费事给你创建一条线程了，要知道线程的创建和销毁可都是麻烦事；<br> 你一个任务过来了，我发现池子的线程都在忙，并且现在池子的线程已经太多了，再不限制下去就要内存溢出了，来，排队去~</p> \n<h1>线程池需要考虑哪些问题</h1> \n<p>简单的架构固然容易实现，但是却不能解决复杂的问题；<br> 而复杂的架构可以解决复杂的问题，却没那么好实现。</p> \n<p>在介绍线程池原理之前，先来大致看看我设计的线程池ThreadPoolExecutor长什么样子：</p> \n<div class=\"image-package\"> \n <div class=\"image-container\"> \n  <div class=\"image-container-fill\">\n   &nbsp;\n  </div> \n  <div class=\"image-view\" data-width=\"434\" data-height=\"359\">\n   <img src=\"//upload-images.jianshu.io/upload_images/7143349-db621b1d8f6eec7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/434\" alt=\"\" data-original-src=\"//upload-images.jianshu.io/upload_images/7143349-db621b1d8f6eec7b.png\" data-original-width=\"434\" data-original-height=\"359\" data-original-format=\"image/png\" data-original-filesize=\"18457\">\n  </div> \n </div> \n</div> \n<p>你们可以先看看这张图，想想图中的各个节点都是什么，为什么需要它们？</p> \n<p>好，现在开始聊聊实现一个线程池，都需要考虑哪些问题。</p> \n<p><strong>1、 任务队列</strong> <br> 如果每个任务过来，都直接交给线程去执行，那其实算不上解耦。</p> \n<p>更好的方法是先把任务放到队列里面，然后当线程空闲的时候，去队列里面取任务过来处理。<br> 为了取的时候可以形成阻塞，我选择了使用阻塞队列<strong>BlockingQueue</strong>，来保存这些未被处理的任务。</p> \n<p>如果你们用过RabbitMQ、Kafka之类的消息中间件，就会发现他们的原理和阻塞队列类似。</p> \n<p><strong>2、任务队列的类型</strong> <br> 阻塞队列有很多种：</p> \n<ul> \n <li> <strong>无界的阻塞队列</strong>（Unbounded queues），比如<strong>LinkedBlockingQueue</strong>，来多少任务就放多少；</li> \n <li> <strong>有界的阻塞队列</strong>（Bounded queues），比如<strong>ArrayBlockingQueue</strong>；</li> \n <li> <strong>同步移交</strong>（Direct handoffs），比如<strong>SynchronousQueue</strong>，这个队列的put方法会阻塞，直到有线程准备从队列里面take，所以本质上SynchronousQueue并不是Queue，<strong>它不存储任何东西，它只是在移交东西</strong> </li> \n</ul> \n<p>这么多种队列，都有各自的优劣，所以，把任务队列参数，放在构造函数里头，提供给使用线程池的人去设置，是最好不过的了。</p> \n<p><strong>3、线程的数量</strong> <br> 我定义了两个线程数的变量，一个是核心线程数<strong>corePoolSize</strong>，另一个是最大线程数<strong>maximumPoolSize</strong>。这两个参数的差别，可以这样来解释：</p> \n<ul> \n <li>当线程池里的线程数少于corePoolSize时，每来一个任务，我就创建一条线程去处理，不管线程池中有没有空闲的线程；</li> \n <li>当线程池里的线程数达到corePoolSize时，新来的任务，会先放到任务队列里面；</li> \n <li>当任务队列放满了（如果队列是有界队列），那么要怎么办？马上拒绝新的任务吗？似乎不妥，面对这种业务突然繁忙的情况，我是不是可以破例再创建多几条线程呢？于是就有了maximumPoolSize，如果任务队列满了，但是线程池中的线程数还少于maximumPoolSize，那我就允许线程池继续创建线程，<strong>这就像肠粉店里的桌子，一开始摆上十张，到了中午高峰期时，发现不够用了，老板娘再让小二从厨房里拿出几张桌子出来一样。</strong> </li> \n</ul> \n<p>同样的，这两个参数也应该放在构造函数，由使用者根据实际情况，来决定要使用多大容量的线程池。</p> \n<p><strong>4、Keep-alive times</strong> <br> 从厨房拿出来的桌子，在高峰期过后，就要渐渐撤回了吧？同样，当我发现线程池中线程的数量超过corePoolSize，就会去监控线程，发现某条线程很久没有工作了，就把它关掉，这里的很久是多久，那就要看你传过来的keepAliveTime是多少了。<br> 如果你想对corePoolSize线程也做这种监控，只需要调用threadPoolExecutor.allowCoreThreadTimeOut(true)就可以了。</p> \n<p>你也许好奇我是怎样判断线程有多久没有活动了，是不是以为我会启动一个监控线程，专门监控哪个线程正在偷懒？<br> 想太多，其实我只是在线程从工作队列poll任务时，加上了超时限制，如果线程在keepAliveTime的时间内poll不到任务，那我就认为这条线程没事做，可以干掉了，看看这个代码片段你就清楚了，</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #000000\">ThreadPoolExecutor getTask():\n\n    </span><span style=\"color: #0000ff\">private</span><span style=\"color: #000000\"> Runnable getTask() {\n        </span><span style=\"color: #0000ff\">boolean</span> timedOut = <span style=\"color: #0000ff\">false</span><span style=\"color: #000000\">; \n\n        </span><span style=\"color: #0000ff\">for</span><span style=\"color: #000000\"> (;;) {\n            \n            ...\n            \n            </span><span style=\"color: #0000ff\">try</span><span style=\"color: #000000\"> {\n                Runnable r </span>= timed ?<span style=\"color: #000000\">\n                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                    workQueue.take();\n                </span><span style=\"color: #0000ff\">if</span> (r != <span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n                    </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\"> r;\n                timedOut </span>= <span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">;\n            } </span><span style=\"color: #0000ff\">catch</span><span style=\"color: #000000\"> (InterruptedException retry) {\n                timedOut </span>= <span style=\"color: #0000ff\">false</span><span style=\"color: #000000\">;\n            }\n        }\n    }</span></pre> \n</div> \n<p>&nbsp;</p> \n<p><strong>5、拒绝策略</strong> <br> 如果线程池已经被shutdown了，或者线程池中使用的是有界队列，而这个队列已经满了，并且线程数已经达到最大线程数，无法再创建新的线程处理请求，这时候要怎么处理新来的任务？<br> 在和大家一起讨论之后，我们认为至少有这四种策略：</p> \n<ul> \n <li> <strong>AbortPolicy</strong>：使用这种策略的线程池，将在无法继续接受新任务时，给任务提交方抛出RejectedExecutionException，让他们决定要如何处理；</li> \n <li> <strong>CallerRunsPolicy</strong>：这个策略，顾名思义，将把任务交给调用方所在的线程去执行；</li> \n <li> <strong>DiscardPolicy</strong>：直接丢弃掉新来的任务；</li> \n <li> <strong>DiscardOldestPolicy</strong>：丢弃最旧的一条任务，其实就是丢失blockingQueue.poll()返回的那条任务，要注意，如果你使用的是PriorityBlockingQueue优先级队列作为你的任务队列，那么这个策略将会丢弃优先级最高的任务，所以一般情况下，<strong>PriorityBlockingQueue和DiscardOldestPolicy不会同时使用</strong> </li> \n</ul> \n<p>说到策略，你们或许以为我会用策略模式。<br> 这下你们猜对了，我用的就是策略模式，这个模式是如此简单，以至于我只需要定义一个策略接口，<br> RejectedExecutionHandler：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">interface</span><span style=\"color: #000000\"> RejectedExecutionHandler {\n    </span><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> rejectedExecution(Runnable r, ThreadPoolExecutor executor);\n}</span></pre> \n</div> \n<p>&nbsp;</p> \n<p>然后写对应的实现类，实现上面提到的那四种策略，比如DiscardPolicy，直接丢弃，那就是什么都不做呗，<br> DiscardPolicy：</p> \n<div class=\"cnblogs_code\"> \n <pre> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">class</span> DiscardPolicy <span style=\"color: #0000ff\">implements</span><span style=\"color: #000000\"> RejectedExecutionHandler     {\n        </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> DiscardPolicy() { }\n\n        </span><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        }\n    }</span></pre> \n</div> \n<p>&nbsp;</p> \n<p>接着在构造函数里，让你们给我传入你们想要使用的策略，最后在我的拒绝任务reject()方法里，调用你们传过来的策略就ok了，</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">final</span> <span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> reject(Runnable command) {\n        handler.rejectedExecution(command, </span><span style=\"color: #0000ff\">this</span><span style=\"color: #000000\">);\n    }</span></pre> \n</div> \n<p>&nbsp;</p> \n<p>为什么使用final？那当然是不想让你们继承啦，这个方法木有定制的必要嘛。<br> 至于这个reject方法，是在哪里调用的，你们使用idea，alt + f7就知道了，然后你们会看到我写的很多深奥的代码，那些我今天不就不详细讲解了，今天重点讲解构造函数里的几个参数的作用，也就是你们可以定制的几个参数。</p> \n<h1>给你们造好的轮子</h1> \n<p>为了方便你们使用，我已经在Executors里面写了几个线程池的<strong>工厂方法</strong>，这样，<strong>很多新手就不需要了解太多关于ThreadPoolExecutor的知识了，他们只需要直接使用我的工厂方法，就可以使用线程池</strong>：</p> \n<p><strong>1、newFixedThreadPool</strong> <br> 如果你想对线程池里的线程总数做一个限制，那么通过Executors.newFixedThreadPool(...)获取一个固定线程数的线程池，是一个很不错的选择，它将返回一个corePoolSize和maximumPoolSize相等的线程池，<br> Executors newFixedThreadPool：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span> ExecutorService newFixedThreadPool(<span style=\"color: #0000ff\">int</span><span style=\"color: #000000\"> nThreads) {\n        </span><span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">new</span><span style=\"color: #000000\"> ThreadPoolExecutor(nThreads, nThreads,\n                                      </span>0L<span style=\"color: #000000\">, TimeUnit.MILLISECONDS,\n                                      </span><span style=\"color: #0000ff\">new</span> LinkedBlockingQueue&lt;Runnable&gt;<span style=\"color: #000000\">());\n    }</span></pre> \n</div> \n<p>&nbsp;</p> \n<p><strong>2、newCachedThreadPool</strong> <br> 如果你希望有一个<strong>非常弹性</strong>的线程池，那可以使用newCachedThreadPool：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> ExecutorService newCachedThreadPool() {\n        </span><span style=\"color: #0000ff\">return</span> <span style=\"color: #0000ff\">new</span> ThreadPoolExecutor(0<span style=\"color: #000000\">, Integer.MAX_VALUE,\n                                      </span>60L<span style=\"color: #000000\">, TimeUnit.SECONDS,\n                                      </span><span style=\"color: #0000ff\">new</span> SynchronousQueue&lt;Runnable&gt;<span style=\"color: #000000\">());\n    }</span></pre> \n</div> \n<p>&nbsp;</p> \n<p>从上面的工厂方法，可以看出，CachedThreadPool是一个这样配置的ThreadPoolExecutor：</p> \n<ul> \n <li>corePoolSize：0</li> \n <li>maxPoolSize：Integer.MAX_VALUE</li> \n <li>keepAliveTime：60s</li> \n <li>workQueue: SynchronousQueue</li> \n</ul> \n<p><strong>就像不同CPU、显卡的组合的电脑有不同的用途一样（数据分析、打游戏、视频处理等），不同配置的ThreadPoolExecutor也会产生不同的威力</strong>，CachedThreadPool的这些配置产生的威力在于：</p> \n<ul> \n <li><strong>对于新的任务，如果此时线程池里没有空闲线程，线程池会毫不犹豫的创建一条新的线程去处理这个任务。</strong>因为corePoolSize是0，当前线程数肯定大于等于corePoolSize，而workQueue是SynchronousQueue，前面说了，SynchronousQueue是不存放东西的，它只移交，所以你可以认为它的队列一直是满的，最后，maxPoolSize是无穷大，再继续创建也不会达到最大线程数，所以线程池会创建一条新的线程去处理这个任务；</li> \n <li>keepAliveTime是60s，你可以认为这就是线程的失效时间。新创建的线程如果60s内都没有任务要执行（缓存没有命中），那么就会被销毁，而如果在这60s内，线程分配到任务了（缓存命中），那么就可以直接拿这条创建好的线程过去用；</li> \n <li>corePoolSize设置成0还有一个好处，那就是当有一大段时间，线程池都没有接收到新的任务时，线程池里的线程会逐渐被销毁，直到线程池中线程数量降为0，这样整个线程池也就不会占用什么资源了，这个特性，使得CachedThreadPool特别适合处理具有周期性的，并且执行时间短（short-lived）的任务，比如晚上十二点时，会有一波业务过来处理，其他时间段，业务很少甚至没有，这种情况就很适合使用CachedThreadPool</li> \n</ul> \n<p>当然，CachedThreadPool会有一个很明显的隐患，那就是线程数量不可控，当然，你已经弄懂了ThreadPoolExecutor几个重要参数，你完全可以自己定制一个有线程数量上限的CachedThreadPool，或者在创建完CachedThreadPool后，使用setMaximumPoolSize方法修改最大线程数量。</p> \n<p><strong>3、newSingleThreadExecutor</strong> <br> 触类旁通，很容易理解，这里就不贴源码和解释了。</p> \n<p><strong>4、 newScheduledThreadPool</strong> <br> 触类旁通，理解起来有些许难度，这里就不贴源码和解释了。</p> \n<h1>总结</h1> \n<p>本文围绕ThreadPoolExecutor的构造函数，重点讲解了ThreadPoolExecutor中，几个可以给外部定制的参数的意义和实现原理，希望能对你理解线程池并定制自己的线程池有所帮助。当然，线程池内部还有很多复杂的机制，比如各种状态的管理等等，不过这些都不是外部可以定制的了，后面我们再来讨论。</p> \n<hr> \n<p>&nbsp;</p> \n<p>最后推荐一个良心公众号【IT资源社】：</p> \n<p><strong>本公众号致力于免费分享全网最优秀的视频资源，学习资料，面试经验等，前端，PHP，JAVA，算法，Python，大数据等等，你想要的这都有</strong></p> \n<p>IT资源社－QQ交流群：625494093</p> \n<p>也可添加微信拉你进微信群: super1319164238</p> \n<p>微信搜索公众号：IT资源社或者扫描下方二维码直接关注，</p> \n<p><img src=\"http:/static/userImages/2018/04/12/2edcb4d7-5ab5-4747-98fd-ea83aa0bd233.jpeg\" alt=\"\" width=\"182\" height=\"176\" data-ratio=\"0.9637826961770624\" data-type=\"png\" data-w=\"497\"></p>', '14', null);
INSERT INTO `t_blog` VALUES ('159', '关于ZK框架的onScroll事件的问题', '关于ZK框架的onScroll事件的问题', '2018-04-12 11:18:21', '0', '0', '<p>由于我现在所在的公司用到的zk框架，遇到了一个需求frozen&nbsp;on&nbsp;top。&nbsp;简单来说就是滚动超过范围后，希望有一块东西停留在滚动窗口的顶部。</p> \n<h2>一.zk框架</h2> \n<ol> \n <li> <h3>查看了zk的8.x版本，发现组件的支持的事件（Event）最大的父类如下：</h3> </li> \n</ol> \n<div class=\"cnblogs_code\"> \n <pre>* &lt;p&gt;Events:&lt;br/&gt;\n *<span style=\"color: #000000\">  onClick, onDoubleClick, onRightClick, onDrop,\n </span>*  onMouseOver, onMouseOut, onOK, onCacnel, onCtrlKey and onSwipe.&lt;br/&gt;\n *\n<span style=\"color: #0000ff\">abstract</span> <span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> HtmlBasedComponent <span style=\"color: #0000ff\">extends</span><span style=\"color: #000000\"> AbstractComponent {\n...\n    </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> {\n        addClientEvent(HtmlBasedComponent.</span><span style=\"color: #0000ff\">class</span>, Events.ON_CLICK, 0<span style=\"color: #000000\">);\n        addClientEvent(HtmlBasedComponent.</span><span style=\"color: #0000ff\">class</span>, Events.ON_DOUBLE_CLICK, 0<span style=\"color: #000000\">);\n        addClientEvent(HtmlBasedComponent.</span><span style=\"color: #0000ff\">class</span>, Events.ON_RIGHT_CLICK, 0<span style=\"color: #000000\">);\n        addClientEvent(HtmlBasedComponent.</span><span style=\"color: #0000ff\">class</span>, Events.ON_OK, 0<span style=\"color: #000000\">);\n        addClientEvent(HtmlBasedComponent.</span><span style=\"color: #0000ff\">class</span>, Events.ON_CANCEL, 0<span style=\"color: #000000\">);\n        addClientEvent(HtmlBasedComponent.</span><span style=\"color: #0000ff\">class</span>, Events.ON_CTRL_KEY, 0<span style=\"color: #000000\">);\n        addClientEvent(HtmlBasedComponent.</span><span style=\"color: #0000ff\">class</span>, Events.ON_DROP, 0<span style=\"color: #000000\">);\n        addClientEvent(HtmlBasedComponent.</span><span style=\"color: #0000ff\">class</span>, Events.ON_MOUSE_OVER, 0); <span style=\"color: #008000\">//</span><span style=\"color: #008000\">not to use CE_DUPLICATE_IGNORE since there is an order issue</span>\n        addClientEvent(HtmlBasedComponent.<span style=\"color: #0000ff\">class</span>, Events.ON_MOUSE_OUT, 0<span style=\"color: #000000\">);\n        addClientEvent(HtmlBasedComponent.</span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\">, Events.ON_SWIPE, CE_DUPLICATE_IGNORE);\n        addClientEvent(HtmlBasedComponent.</span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\">, Events.ON_AFTER_SIZE, CE_DUPLICATE_IGNORE);\n    }\n...\n}</span></pre> \n</div> \n<p>发现最大的组件所支持的事件并没有我们想要的onScroll事件。然后查一下你想要滚动的目标组件，比如说div component：</p> \n<p>div没有属于自己的事件注册。所以div所支持的事件都是父类的所注册的事件。</p> \n<p>如果说我们想要在div监听到滚动事件呢？</p> \n<h2>二.创建属于自己系统的component</h2> \n<p>ZK框架的扩展性非常强。zk允许用户定义属于自己的组件，所以在这次解决问题的时候我创建了自己的组件cbxDiv。</p> \n<p>我们需要做的有以下几点：</p> \n<ol> \n <li>配置lang-addon.xml :&nbsp;这是zk的配置文件，通常我们把所需要自己的组件信息都定义到这个配置文件，这样zk就会自动识别。</li> \n</ol> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">&lt;?</span><span style=\"color: #ff00ff\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"color: #0000ff\">?&gt;</span>\n<span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">language-addon</span><span style=\"color: #0000ff\">&gt;</span>\n  <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">addon-name</span><span style=\"color: #0000ff\">&gt;</span>cul<span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">addon-name</span><span style=\"color: #0000ff\">&gt;</span>\n  <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">depends</span><span style=\"color: #0000ff\">&gt;</span>zul,ckez<span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">depends</span><span style=\"color: #0000ff\">&gt;</span>\n  <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">language-name</span><span style=\"color: #0000ff\">&gt;</span>xul/html<span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">language-name</span><span style=\"color: #0000ff\">&gt;</span><span style=\"color: #000000\">\n....\n  </span><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">component</span><span style=\"color: #0000ff\">&gt;</span>\n    <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">component-name</span><span style=\"color: #0000ff\">&gt;</span>cbxdiv<span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">component-name</span><span style=\"color: #0000ff\">&gt;</span>\n    <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">component-class</span><span style=\"color: #0000ff\">&gt;</span>com.core.cbx.ui.zk.cul.CbxDiv<span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">component-class</span><span style=\"color: #0000ff\">&gt;</span>\n    <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">widget-class</span><span style=\"color: #0000ff\">&gt;</span>cul.wgt.CbxDiv<span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">widget-class</span><span style=\"color: #0000ff\">&gt;</span>\n    <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">extends</span><span style=\"color: #0000ff\">&gt;</span>div<span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">extends</span><span style=\"color: #0000ff\">&gt;</span>\n  <span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">component</span><span style=\"color: #0000ff\">&gt;</span>\n<span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">language-addon</span><span style=\"color: #0000ff\">&gt;</span></pre> \n</div> \n<p>这里的component-class就是你组件class的具体位置，widget-class是自己定义的js文件的所在位置。extend当然就是父类。</p> \n<p style=\"margin-left: 30px\">2.配置zk.wpd：这个是配置你组件的名字，以至于zk可以找到对应关系。</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">&lt;?</span><span style=\"color: #ff00ff\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"color: #0000ff\">?&gt;</span>\n\n\n<span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">package </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"cul.wgt\"</span><span style=\"color: #ff0000\"> language</span><span style=\"color: #0000ff\">=\"xul/html\"</span><span style=\"color: #ff0000\"> depends</span><span style=\"color: #0000ff\">=\"zul.wgt\"</span><span style=\"color: #0000ff\">&gt;</span>\n    <span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">widget </span><span style=\"color: #ff0000\">name</span><span style=\"color: #0000ff\">=\"CbxDiv\"</span><span style=\"color: #0000ff\">/&gt;</span>\n<span style=\"color: #0000ff\">&lt;/</span><span style=\"color: #800000\">package</span><span style=\"color: #0000ff\">&gt;</span></pre> \n</div> \n<p style=\"margin-left: 30px\">3.创建对应的component&nbsp;class</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">class</span> CbxDiv <span style=\"color: #0000ff\">extends</span><span style=\"color: #000000\"> Div {\n\n    </span><span style=\"color: #0000ff\">static</span><span style=\"color: #000000\"> {\n        addClientEvent(CbxDiv.</span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\">, Events.ON_SCROLL, CE_IMPORTANT);\n        addClientEvent(CbxDiv.</span><span style=\"color: #0000ff\">class</span><span style=\"color: #000000\">, Events.ON_SCROLLING, CE_IMPORTANT);\n    }\n\n    </span><span style=\"color: #0000ff\">public</span><span style=\"color: #000000\"> CbxDiv() {\n        </span><span style=\"color: #0000ff\">super</span><span style=\"color: #000000\">();\n    }\n\n    </span><span style=\"color: #008000\">/*</span><span style=\"color: #008000\">\n     * (non-Javadoc)\n     * @see org.zkoss.zk.ui.AbstractComponent#service(org.zkoss.zk.ui.event.Event, org.zkoss.zk.ui.ext.Scope)\n     </span><span style=\"color: #008000\">*/</span><span style=\"color: #000000\">\n    @Override\n    </span><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> service(<span style=\"color: #0000ff\">final</span> AuRequest request, <span style=\"color: #0000ff\">final</span> <span style=\"color: #0000ff\">boolean</span><span style=\"color: #000000\"> everError) {\n        </span><span style=\"color: #0000ff\">final</span> String cmd =<span style=\"color: #000000\"> request.getCommand();\n        </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (Events.ON_SCROLL.equals(cmd)) {\n            </span><span style=\"color: #0000ff\">final</span> ScrollEvent evt =<span style=\"color: #000000\"> ScrollEventExt.getScrollEventExt(request);\n            Events.postEvent(evt);\n        } </span><span style=\"color: #0000ff\">else</span> <span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (Events.ON_SCROLLING.equals(cmd)) {\n            </span><span style=\"color: #0000ff\">final</span> ScrollEvent evt =<span style=\"color: #000000\"> ScrollEvent.getScrollEvent(request);\n            Events.postEvent(evt);\n        } </span><span style=\"color: #0000ff\">else</span><span style=\"color: #000000\"> {\n            </span><span style=\"color: #0000ff\">super</span><span style=\"color: #000000\">.service(request, everError);\n        }\n    }\n}</span></pre> \n</div> \n<pre><span>addClientEvent()这个方法是注册你自己想要的事件的。重写service是为了具体到的事件对应的处理类。并且数据的绑定。<br>注意：这个class创建的位置要跟lang-addon.xml配置的位置对应<br><br>4.创建自己的js<br></span></pre> \n<div class=\"cnblogs_code\"> \n <pre>cul.wgt.CbxDiv =<span style=\"color: #000000\"> zk.$extends(zul.wgt.Div, {\n\n    bind_: </span><span style=\"color: #0000ff\">function</span><span style=\"color: #000000\">() {\n        </span><span style=\"color: #0000ff\">this</span>.$supers(cul.wgt.CbxDiv, \'bind_\'<span style=\"color: #000000\">, arguments);\n        </span><span style=\"color: #0000ff\">this</span>.domListen_(<span style=\"color: #0000ff\">this</span>.$n(), \"onScroll\", \'doScroll_\'<span style=\"color: #000000\">);\n    },\n\n    unbind_: </span><span style=\"color: #0000ff\">function</span><span style=\"color: #000000\">() {\n        </span><span style=\"color: #0000ff\">this</span>.domUnlisten_(<span style=\"color: #0000ff\">this</span>.$n(), \"onScroll\", \'doScroll_\'<span style=\"color: #000000\">);\n        </span><span style=\"color: #0000ff\">this</span>.$supers(cul.wgt.CbxDiv, \'unbind_\'<span style=\"color: #000000\">, arguments);\n    },\n\n    doScroll_: </span><span style=\"color: #0000ff\">function</span><span style=\"color: #000000\">() {\n        </span><span style=\"color: #0000ff\">this</span>.fire(\'onScroll\',{\'x\':<span style=\"color: #0000ff\">this</span>.$n().scrollLeft,\'y\':<span style=\"color: #0000ff\">this</span>.$n().scrollTop},{toServer:<span style=\"color: #0000ff\">true</span><span style=\"color: #000000\">});\n    }\n\n});</span></pre> \n</div> \n<p>主要的方法是对我们的component绑定一个事件，然后触发这个事件的时候发送数据到后台。数据是以map的形式传送。</p> \n<p>&nbsp;</p> \n<p>到这里基本上可以进行测试了。测试步骤就是创建一个cbxDiv，然后里面塞些东西。。在我们后台就可以动态的去加这个监听</p> \n<div class=\"cnblogs_code\"> \n <pre>test1Div.addEventListener(Events.ON_SCROLL, <span style=\"color: #0000ff\">new</span> EventListener&lt;ScrollEventExt&gt;<span style=\"color: #000000\">() {\n　　@Override\n　　</span><span style=\"color: #0000ff\">public</span> <span style=\"color: #0000ff\">void</span> onEvent(<span style=\"color: #0000ff\">final</span> ScrollEventExt event) <span style=\"color: #0000ff\">throws</span><span style=\"color: #000000\"> Exception {\n　　　　system.out.print(\"scroll event have been fired!\");\n　　}\n}</span></pre> \n</div> \n<p>&nbsp;</p> \n<pre><span>&nbsp;</span></pre>', '14', null);
INSERT INTO `t_blog` VALUES ('160', 'Java基础中一些容易被忽视的语法小细节总结', 'Java基础中一些容易被忽视的语法小细节总结', '2018-04-12 11:18:32', '0', '0', '<p>一：语法细节</p> \n<p>1. Java中的命名规则：</p> \n<ul> \n <li>package：统一使用小写字母</li> \n <li>class：首字母大写，使用驼峰标识</li> \n <li>method：首字母小写，使用驼峰标识</li> \n <li>field：首字母小写，使用驼峰标识</li> \n <li>static field：统一使用大写字母，并用下划线分割单词</li> \n</ul> \n<p>2. import和import static</p> \n<ul> \n <li>import com.xxx：常规导入某个包下的类</li> \n <li>import static com.xxx：会导入某个包下的类的所有静态方法，这样之后再使用该类的静态方法时，可以直接使用方法名调用，而不必使用&nbsp;<strong>类名.方法名</strong>&nbsp;来调用静态方法</li> \n</ul> \n<p>示例：</p> \n<p><a href=\"https://images2018.cnblogs.com/blog/946400/201711/946400-20171124142059906-1412398994.png\"><img title=\"clip_image001[5]\" src=\"http:/static/userImages/2018/04/12/3f1c24b4-32ab-424f-ac26-ccc6aaf0fd9d.png\" alt=\"clip_image001[5]\" width=\"539\" height=\"250\" border=\"0\"></a></p> \n<p>3. println和print</p> \n<ul> \n <li>System.out.println：在下次打印时自动换行</li> \n <li>System.out.print：在下次打印时不自动换行</li> \n</ul> \n<p>4. Java访问权限修饰符</p> \n<p><a href=\"https://images2018.cnblogs.com/blog/946400/201711/946400-20171124142100843-1472014366.png\"><img title=\"clip_image001[7]\" src=\"http:/static/userImages/2018/04/12/127453a3-6fe7-4d80-b33e-d5c4fc33ef3e.png\" alt=\"clip_image001[7]\" width=\"501\" height=\"179\" border=\"0\"></a></p> \n<p>每个编译单元（即一个<strong>.java</strong>文件）都只能有一个public类，表示每一个编译单元都有一个单一的公共接口，用public类来展现。</p> \n<p>5. final关键字</p> \n<ul> \n <li>final 修饰的基本数据类型一旦初始化则数值恒定不变</li> \n <li>final 修饰的对象引用表示：该引用一旦被初始化指向某个对象，就无法再将它改变为指向另一个对象（注意引用指向的对象自身是可以改变的）</li> \n <li>final 修饰的类不允许被任何子类继承</li> \n <li>final 修饰的方法将会被锁定，任何子类都无法修改它</li> \n <li>声明为 final 的域可以在一开始不给定初值，但是编译器会确保该域在使用前必须初始化</li> \n <li>由 static final 修饰的域将会占据一段不能改变的存储空间</li> \n</ul> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>二：基本数据类型</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"2\"> \n <tbody> \n  <tr> \n   <td valign=\"top\" width=\"108\"> <p align=\"center\">基本类型</p> </td> \n   <td valign=\"top\" width=\"89\"> <p align=\"center\">大小</p> </td> \n   <td valign=\"top\" width=\"101\"> <p align=\"center\">初始值</p> </td> \n   <td valign=\"top\" width=\"117\"> <p align=\"center\">包装类</p> </td> \n   <td valign=\"top\" width=\"181\"> <p align=\"center\">最小值</p> </td> \n   <td valign=\"top\" width=\"155\"> <p align=\"center\">最大值</p> </td> \n  </tr> \n  <tr> \n   <td valign=\"top\" width=\"108\"> <p align=\"center\">boolean</p> </td> \n   <td valign=\"top\" width=\"89\"> <p align=\"center\">-</p> </td> \n   <td valign=\"top\" width=\"101\"> <p align=\"center\">false</p> </td> \n   <td valign=\"top\" width=\"117\"> <p align=\"center\">Boolean</p> </td> \n   <td valign=\"top\" width=\"181\"> <p align=\"center\">-</p> </td> \n   <td valign=\"top\" width=\"155\"> <p align=\"center\">-</p> </td> \n  </tr> \n  <tr> \n   <td valign=\"top\" width=\"108\"> <p align=\"center\">char</p> </td> \n   <td valign=\"top\" width=\"89\"> <p align=\"center\">16-bit</p> </td> \n   <td valign=\"top\" width=\"101\"> <p align=\"center\">\'\\u0000\'</p> </td> \n   <td valign=\"top\" width=\"117\"> <p align=\"center\">Character</p> </td> \n   <td valign=\"top\" width=\"181\"> <p align=\"center\">‘\\u0000’</p> <p align=\"center\">（0）</p> </td> \n   <td valign=\"top\" width=\"155\"> <p align=\"center\">‘\\uffff’</p> <p align=\"center\">（65535）</p> </td> \n  </tr> \n  <tr> \n   <td valign=\"top\" width=\"108\"> <p align=\"center\">byte</p> </td> \n   <td valign=\"top\" width=\"89\"> <p align=\"center\">8-bit</p> </td> \n   <td valign=\"top\" width=\"101\"> <p align=\"center\">0</p> </td> \n   <td valign=\"top\" width=\"117\"> <p align=\"center\">Byte</p> </td> \n   <td valign=\"top\" width=\"181\"> <p align=\"center\">-128</p> </td> \n   <td valign=\"top\" width=\"155\"> <p align=\"center\">127</p> </td> \n  </tr> \n  <tr> \n   <td valign=\"top\" width=\"108\"> <p align=\"center\">short</p> </td> \n   <td valign=\"top\" width=\"89\"> <p align=\"center\">16-bit</p> </td> \n   <td valign=\"top\" width=\"101\"> <p align=\"center\">0</p> </td> \n   <td valign=\"top\" width=\"117\"> <p align=\"center\">Short</p> </td> \n   <td valign=\"top\" width=\"181\"> <p align=\"center\">- 2^15</p> <p align=\"center\">（负的2的15次方）</p> </td> \n   <td valign=\"top\" width=\"155\"> <p align=\"center\">2^15 - 1</p> <p align=\"center\">&nbsp;</p> </td> \n  </tr> \n  <tr> \n   <td valign=\"top\" width=\"108\"> <p align=\"center\">int</p> </td> \n   <td valign=\"top\" width=\"89\"> <p align=\"center\">32-bit</p> </td> \n   <td valign=\"top\" width=\"101\"> <p align=\"center\">0</p> </td> \n   <td valign=\"top\" width=\"117\"> <p align=\"center\">Integer</p> </td> \n   <td valign=\"top\" width=\"181\"> <p align=\"center\">- 2^31</p> </td> \n   <td valign=\"top\" width=\"155\"> <p align=\"center\">2^31 - 1</p> </td> \n  </tr> \n  <tr> \n   <td valign=\"top\" width=\"108\"> <p align=\"center\">float</p> </td> \n   <td valign=\"top\" width=\"89\"> <p align=\"center\">32-bit</p> </td> \n   <td valign=\"top\" width=\"101\"> <p align=\"center\">0.0f</p> </td> \n   <td valign=\"top\" width=\"117\"> <p align=\"center\">Float</p> </td> \n   <td valign=\"top\" width=\"181\"> <p align=\"center\">IEEE754</p> </td> \n   <td valign=\"top\" width=\"155\"> <p align=\"center\">IEEE754</p> </td> \n  </tr> \n  <tr> \n   <td valign=\"top\" width=\"108\"> <p align=\"center\">double</p> </td> \n   <td valign=\"top\" width=\"89\"> <p align=\"center\">64-bit</p> </td> \n   <td valign=\"top\" width=\"101\"> <p align=\"center\">0.0d</p> </td> \n   <td valign=\"top\" width=\"117\"> <p align=\"center\">Double</p> </td> \n   <td valign=\"top\" width=\"181\"> <p align=\"center\">IEEE754</p> </td> \n   <td valign=\"top\" width=\"155\"> <p align=\"center\">IEEE754</p> </td> \n  </tr> \n  <tr> \n   <td valign=\"top\" width=\"108\"> <p align=\"center\">long</p> </td> \n   <td valign=\"top\" width=\"89\"> <p align=\"center\">64-bit</p> </td> \n   <td valign=\"top\" width=\"101\"> <p align=\"center\">0L</p> </td> \n   <td valign=\"top\" width=\"117\"> <p align=\"center\">Long</p> </td> \n   <td valign=\"top\" width=\"181\"> <p align=\"center\">- 2^63</p> </td> \n   <td valign=\"top\" width=\"155\"> <p align=\"center\">2^63 - 1</p> </td> \n  </tr> \n </tbody> \n</table> \n<p>&nbsp;</p> \n<p>1. 创建基本数据类型不需要 new 操作符。</p> \n<p>2. 当基本类型变量作为<strong>类的成员变量</strong>使用时，才会在初始化时被赋予初值；作为方法体中的<strong>局部变量</strong>时，则<strong>必须要被初始化</strong>才能使用。</p> \n<p>3. 对象引用的默认初始值为null。</p> \n<p>4. float / double 转换为整型时，总是对该数字执行<strong>截尾</strong>操作（四舍五入效果实现需要使用 java.lang.Math.round() 方法）。</p> \n<p>5. 用于高精度计算的类：</p> \n<ul> \n <li>BigInteger（支持任意大小的整数值）</li> \n <li>BigDecimal（支持任意精度的定点数）</li> \n</ul> \n<p>（定点数：指参与运算的数的小数点位置固定不变）</p> \n<p>能作用于 int / float 的操作同样也能作用于 BigInteger / BigDecimal，只是 BigInteger / BigDecimal 需以方法调用的方式使用，而不是以运算符的形式来使用。</p> \n<p>6. 基本类型之间比较是否相同可以直接使用“<strong>==</strong>”；</p> \n<p>&nbsp;&nbsp; 对象之间比较是否相同需要使用&nbsp;<strong>equals()</strong>&nbsp;方法；对象之间如果使用“==”操作符比较，实际比较的是两个对象的<strong>引用地址</strong>。</p> \n<p>7. 算术运算中，表达式中出现的最大数据类型决定了表达式最终结果的数据类型（比如：一个float值与一个double值相乘，结果值是double类型）；</p> \n<p>&nbsp;&nbsp; char / byte/ short 中任意一个或一个以上进行算术运算（如 ’a’+’b’ ），都会获得一个 int 型的结果；</p> \n<p>&nbsp;&nbsp; 从较大范围的类型向较小范围的类型转换时，可能引发某些信息的丢失。</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>三：Java中对象的四种引用类型</p> \n<p>1. StrongReference -- 强引用</p> \n<p><a href=\"https://images2018.cnblogs.com/blog/946400/201711/946400-20171124142101671-1134990094.png\"><img title=\"clip_image001\" src=\"http:/static/userImages/2018/04/12/8d72caef-8915-4cd3-b463-195a2f8ead53.png\" alt=\"clip_image001\" width=\"279\" height=\"38\" border=\"0\"></a></p> \n<p>强引用是最普遍的引用，垃圾回收器不会回收强引用的对象；当内存空间不足时，JVM 宁愿抛出 OutOfMemoryError 也不会回收强引用对象以释放部分内存空间；</p> \n<p>强引用对象 o 不使用时可以通过如下方式弱化引用：<a href=\"https://images2018.cnblogs.com/blog/946400/201711/946400-20171124142102515-97322339.png\"><img title=\"clip_image002\" src=\"http:/static/userImages/2018/04/12/fae5b0d8-c582-42fe-9bd0-d44fa9a23d36.png\" alt=\"clip_image002\" width=\"295\" height=\"41\" border=\"0\"></a></p> \n<p>（现在的JVM垃圾回收机制其实已经足够智能，不必特意在o无用时将其手动置为null）</p> \n<p>&nbsp;</p> \n<p>2. SoftReference -- 软引用</p> \n<p><a href=\"https://images2018.cnblogs.com/blog/946400/201711/946400-20171124142103281-56737771.png\"><img title=\"clip_image001[4]\" src=\"http:/static/userImages/2018/04/12/5e85f740-dc2f-477e-9dec-0bc063b62608.png\" alt=\"clip_image001[4]\" width=\"563\" height=\"56\" border=\"0\"></a></p> \n<p>如果一个对象只具有软引用，则：</p> \n<ul> \n <li>当内存空间<strong>足够</strong>时，垃圾回收器<strong>不会</strong>回收该对象；</li> \n <li>当内存空间<strong>不足</strong>时，垃圾回收器就<strong>会</strong>回收该对象；</li> \n</ul> \n<p>使用场景：软引用可以用来实现内存敏感的高速缓存：</p> \n<p>例如：浏览器中的后退按钮按下时，之前的网页内容是应该重新获取还是从缓存中取出呢？</p> \n<p>如果一个网页在浏览结束时就进行内容的回收，则每次按后退按钮时都要重新构建之前的页面内容；如果将浏览过的网页都存储在内存（缓存）中，会造成大量的资源浪费；这时候就可以考虑使用软引用来指向过去浏览过的网页内容。</p> \n<p>&nbsp;</p> \n<p>3. WeakReference -- 弱引用</p> \n<p><a href=\"https://images2018.cnblogs.com/blog/946400/201711/946400-20171124142104000-1594651154.png\"><img title=\"clip_image001[6]\" src=\"http:/static/userImages/2018/04/12/1695256d-d73d-428b-b571-588a216a5bcb.png\" alt=\"clip_image001[6]\" width=\"502\" height=\"21\" border=\"0\"></a></p> \n<p>弱引用与软引用区别：只具有弱引用的对象拥有更短的生命周期；当垃圾回收器扫描到只具有弱引用的对象时，无论当前内存空间是否足够，都会回收它；</p> \n<p>使用场景：一个对象只是偶尔使用，希望在使用时能随时获取，但也不想影响对该对象的垃圾收集，则可以考虑使用弱引用来指向该对象。</p> \n<p>&nbsp;</p> \n<p>4. PhantomReference -- 虚引用</p> \n<p>虚引用不会决定对象的生命周期，如果一个对象仅仅持有虚引用，那它就像没有任何引用一样，随时可能被垃圾收集器回收；</p> \n<p>虚引用必须和引用队列联合使用，主要用来跟踪对象被垃圾收集器回收的活动过程。</p> \n<p>&nbsp;</p> \n<p>5. 对比</p> \n<p>StrongReference（强引用）&nbsp;<strong>&gt;</strong>&nbsp;SoftReference（软引用）&nbsp;<strong>&gt;</strong>&nbsp;WeakReference（弱引用）&nbsp;<strong>&gt;</strong>&nbsp;PhantomReference（虚引用）</p> \n<p><a href=\"https://images2018.cnblogs.com/blog/946400/201711/946400-20171124142104843-2033124148.png\"><img title=\"clip_image001[8]\" src=\"http:/static/userImages/2018/04/12/4ef23af2-ba2e-4bef-a27d-8c6143e366da.png\" alt=\"clip_image001[8]\" width=\"454\" height=\"237\" border=\"0\"></a></p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>四：关于方法的一些细节</p> \n<p>1. 重载方法与重写方法</p> \n<p>a）重载方法（Overload）</p> \n<p>&nbsp;&nbsp;&nbsp;&nbsp; 多用于同一个类中；</p> \n<ul> \n <li>重载方法的<strong>方法名完全相同</strong>，<strong>参数列表不同</strong></li> \n <li><strong>返回值不能参与区分</strong>重载方法</li> \n</ul> \n<p>b）重写方法（Overwrite）</p> \n<p>&nbsp;&nbsp;&nbsp;&nbsp; 多用于继承父类的子类或接口实现类中；</p> \n<ul> \n <li>重写方法中，子类的方法名、参数列表、返回值、访问修饰符应该与父类中的完全一致</li> \n</ul> \n<p>2. 在没有为类提供构造器的情况下，编译器会自动为该类添加一个默认构造器；但是一旦为类指定了构造器，则编译器就不会再自动添加默认构造器了。</p> \n<p>3. 方法的<strong>方法名</strong>和<strong>参数列表</strong>组合起来作为“<strong>方法的特征签名</strong>”，唯一的标识出某个方法；</p> \n<p>4.&nbsp;<strong>static</strong>&nbsp;的域或方法不跟类的对象绑定，可以通过类名或方法名直接调用（不能在 static 方法中调用非静态方法）；</p> \n<p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>非static</strong>&nbsp;的域或方法必须通过类的对象来调用；</p> \n<p>&nbsp;&nbsp;&nbsp; static 关键字不能用于局部变量。</p> \n<p>5. 在方法体的传入参数中：<strong>基本数据类型在传递时是值传递（传递原值的拷贝值），对象在传递时是引用传递</strong>。</p> \n<p>6. 方法体内的局部变量存储在方法栈中，类的成员变量存储在堆中。</p> \n<p>7. 可变参数列表</p> \n<p>语法格式：MethodName(类型… 参数名称)</p> \n<p><span>使用示例：</span></p> \n<p><a href=\"https://images2018.cnblogs.com/blog/946400/201711/946400-20171124142105906-1101535340.png\"><img title=\"clip_image001[3]\" src=\"http:/static/userImages/2018/04/12/ef1c4b23-2ce0-4e49-8da8-45474ddd384f.png\" alt=\"clip_image001[3]\" width=\"1155\" height=\"401\" border=\"0\"></a></p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>五：控制语句</p> \n<p>1. break和continue</p> \n<ul> \n <li>break：用于<strong>强行退出当前循环</strong></li> \n <li>continue：用于<strong>停止本次迭代，然后返回起始处开始下一次迭代</strong></li> \n</ul> \n<p>2. 带标签的break和continue</p> \n<ul> \n <li>break outer：中断当前循环并跳出标签所指的循环</li> \n <li>continue outer：重新跳到标签的位置，并开始标签之后声明的循环</li> \n</ul> \n<p>用法示例：</p> \n<p><a href=\"https://images2018.cnblogs.com/blog/946400/201711/946400-20171124142106953-1872928527.png\"><img title=\"clip_image001[1]\" src=\"http:/static/userImages/2018/04/12/d56e71cb-af65-4228-a670-72a32e9b0f25.png\" alt=\"clip_image001[1]\" width=\"1095\" height=\"683\" border=\"0\"></a></p> \n<p>使用带标签的 break / continue 的原因是：为了跳出或重新开始<strong>多层嵌套循环</strong>。</p> \n<p>3. switch</p> \n<p>switch 语句可以用于实现多路选择，但是要注意&nbsp;<strong>break 穿刺问题</strong>（即如果上一个 case 里没有 break 语句，则该 case 执行完成后会顺势执行下一个 case 语句块）。</p>', '14', null);
INSERT INTO `t_blog` VALUES ('161', '真正理解拉格朗日乘子法和 KKT 条件', '真正理解拉格朗日乘子法和 KKT 条件', '2018-04-12 11:18:52', '0', '0', '<p>    这篇博文中直观上讲解了拉格朗日乘子法和 KKT 条件，对偶问题等内容。<br>     首先从无约束的优化问题讲起，一般就是要使一个表达式取到最小值：<br> <span class=\"math display\">\\[min \\quad f(x)\\]</span><br>     如果问题是 <span class=\"math inline\">\\(max \\quad f(x)\\)</span> 也可以通过取反转化为求最小值 <span class=\"math inline\">\\(min \\quad-f(x)\\)</span>，这个是一个习惯。对于这类问题在高中就学过怎么做。只要对它的每一个变量求导，然后让偏导为零，解方程组就行了。<br> </p>\n<div align=\"center\">\n <br> \n <img src=\"http:/static/userImages/2018/04/12/1cd49d88-97a1-4c0c-8ad6-12b6d84add2e.png\" width=\"35%\" alt=\"二维线性可分示例图\">\n <br> \n</div>\n<br> \n<center>\n 极值点示意图\n</center>\n<br>     所以在极值点处一定满足 \n<span class=\"math inline\">\\(\\frac {df(x)}{dx}=0\\)</span>（只是必要条件，比如 \n<span class=\"math inline\">\\(f(x)=x^3\\)</span> 在 \n<span class=\"math inline\">\\(x=0\\)</span> 处就不是极值点），然后对它进行求解，再代入验证是否真的是极值点就行了。对于有些问题可以直接通过这种方法求出解析解（如最小二乘法）。\n<br>     但是也有很多问题解不出来或者很难解，所以就需要梯度下降法、牛顿法、坐标下降法之类的数值迭代算法了（感知机 、logistic 回归中用到）。\n<br>     对于这些迭代算法就像下面这张图一样，我们希望找到其中的最小值。一个比较直观的想法是先找一个起点，然后不断向最低点靠近。就先把一个小球放到一个碗里一样。\n<br> \n<div align=\"center\">\n <br> \n <img src=\"http:/static/userImages/2018/04/12/577ef474-a991-474b-9b85-8b5716f45144.bmp\" width=\"48%\" alt=\"迭代算法\">\n <br> \n</div>\n<br> \n<center>\n 迭代算法\n</center>\n<br>     一开始要找一个起始点，然后确定走的方向和距离，最后还要知道什么时候停止。这三步中最难的应该是确定走的方向。走的慢点还可以接受，要是方向错了就找不到最小值了~。所以走的距离可以简单的设为一个比较小的值。起始点可以随机选一个 \n<span class=\"math inline\">\\((x_0,y_0)\\)</span>。关键是方向，可以选择 \n<span class=\"math inline\">\\((x_0,y_0)\\)</span> 处的梯度的反方向，这是函数在这个点下降最快的方向（原因可以看\n<a href=\"https://www.zhihu.com/question/36301367\">知乎</a>中忆臻的回答）。它是一个向量，然后它的大小就是走的距离，为了防止太大而走过头，导致不断在最小值附近震荡，需要乘上一个比较小的值（称为学习率），最终的停止条件就是梯度的大小很接近于 0（在极值点处的梯度大小就是 0）就行了。这种方法依靠梯度确定下降方向的方法叫做梯度下降法。\n<br> 对 \n<span class=\"math inline\">\\(f(x)\\)</span> 求极小值的流程就是：\n<p></p> \n<ol> \n <li>随机选定 <span class=\"math inline\">\\(x_0\\)</span></li> \n <li>得到函数在 <span class=\"math inline\">\\(x_0\\)</span> 的梯度，然后从 <span class=\"math inline\">\\(x_0\\)</span> 向前走一步。计算式是：<span class=\"math inline\">\\(x_0^{new}=x_0^{old} - \\alpha\\nabla f(x)\\)</span></li> \n <li>重复第 2 步，直到梯度接近于 0（小于一个事先设定的很小的数），或者到达指定的迭代上限。</li> \n</ol> \n<div align=\"center\"> \n <img src=\"http:/static/userImages/2018/04/12/519bb783-6093-4096-8175-8e5efeb31431.bmp\" width=\"25%\" alt=\"梯度下降法\">\n</div> \n<center>\n 梯度下降法\n</center> \n<p>    除了这种方法之外，其中第 2 步还可以这样做，固定 <span class=\"math inline\">\\(x\\)</span>, 把它作为常数。就变成只有一个变量的优化问题了，直接求导为 0 就可以得到最优点，向前走到 <span class=\"math inline\">\\((x_0, y_1)\\)</span> 处，然后固定 <span class=\"math inline\">\\(y_1\\)</span>, 对 <span class=\"math inline\">\\(x\\)</span> 进行相同的操作。这种每次只优化一个变量的方法叫做坐标下降法。<br> </p>\n<div align=\"center\">\n <br> \n <img src=\"http:/static/userImages/2018/04/12/97c0a095-1f3e-4776-b98e-6d052254b7c0.bmp\" width=\"25%\" alt=\"坐标下降法\">\n <br> \n</div>\n<br> \n<center>\n 坐标下降法\n</center>\n<br>     然后就是进一步的，我们可能要在满足一定约束条件的情况下最小化目标函数，比如有一个等式约束：\n<br> \n<span class=\"math display\">\\[\\begin{align*} min \\quad f(x)\\\\ &amp; s.t. \\quad h(x) = 0 \\end{align*}\\]</span>\n<br>     解决这个的时候问题不能先用上面的方法求出 \n<span class=\"math inline\">\\(f(x)\\)</span> 的极值点，然后留下满足方程 \n<span class=\"math inline\">\\(h(x)=0\\)</span> 的。因为这个问题的解可能根本不是 \n<span class=\"math inline\">\\(min \\quad f(x)\\)</span> 的解，它们是没有关系的。那么还是要从问题本身去找线索：\n<br> \n<div align=\"center\">\n <br> \n <img src=\"http:/static/userImages/2018/04/12/a28e5236-ddf1-4b03-80bf-65afe286f28f.png\" width=\"35%\" alt=\"带约束的极值\">\n <br> \n</div>\n<br> \n<center>\n 带约束的极值\n</center>\n<br>     如图，其中的圆圈是指目标函数 \n<span class=\"math inline\">\\(f(x，y)\\)</span> 投影在平面上的等值线，表示在同一个圆圈上，黑线是约束条件 \n<span class=\"math inline\">\\(h(x)=0\\)</span> 的函数图像。所以等值线与函数图像重合的点其实就是所有满足约束的点。那么极值点只有可能在等值线与函数图像相切的地方取到，因为如果在相交的地方取到，那么沿着 \n<span class=\"math inline\">\\(h(x)\\)</span> 的图像往前走或者往后走，一定还有其它的等值线与它相交，也就是 \n<span class=\"math inline\">\\(f(x,y)\\)</span> 的值还能变大和变小，所以交点不是极值点，只有相切的时候才有可能是极值点(不可能同时变大和变小了)。在相切的地方 \n<span class=\"math inline\">\\(h(x)\\)</span> 的梯度和 \n<span class=\"math inline\">\\(f(x,y)\\)</span> 的梯度应该是在同一条直线上的。（这一点可以这么想，在切点处两个函数的梯度都与切平面垂直，所以在一条直线上）\n<br>     所以满足条件的极值点一定满足：\n<span class=\"math inline\">\\(\\nabla f(x,y)=\\lambda \\nabla h(x,y)\\)</span> ( \n<span class=\"math inline\">\\(\\lambda = 0\\)</span> 是允许的，表示 f(x,y) 的极值点处)，然后和原来的等式方程 \n<span class=\"math inline\">\\(h(x,y)=0\\)</span> 联立，然后只要解出这个方程组，就可以得到问题的解析解了。当然也存在解不出来的情况，就需要用罚函数法之类的方法求数值解了。\n<br>     为了方便和好记，就把原来的优化问题写成 \n<span class=\"math inline\">\\(f(x,y) + \\lambda h(x,y)\\)</span> 的形式，然后分别对 \n<span class=\"math inline\">\\(\\lambda,x,y\\)</span> 求偏导，并且令偏导为 \n<span class=\"math inline\">\\(0\\)</span> 就行了，和之前得到的方程组是一样的。这种方法叫拉格朗日乘数法。\n<br>     如果有多个等式约束怎么办呢，如下图：\n<br> \n<div align=\"center\">\n <br> \n <img src=\"http:/static/userImages/2018/04/12/08aeb2ee-37c4-4963-bc79-ec16e0e23e93.png\" width=\"40%\" alt=\"多个约束的极值\">\n <br> \n</div>\n<br> \n<center>\n 多个约束的极值\n</center>\n<br>     这里的平面和球面分别代表了两个约束 \n<span class=\"math inline\">\\(h_1(x)\\)</span> 和 \n<span class=\"math inline\">\\(h_2(x)\\)</span>，那么这个问题的可行域就是它们相交的那个圆。这里蓝色箭头表示平面的梯度，黑色箭头表示球面的梯度，那么相交的圆的梯度就是它们的线性组合（只是直观上的~），所以在极值点的地方目标函数的梯度和约束的梯度的线性组合在一条直线上。所以就满足：\n<br> \n<span class=\"math display\">\\[\\nabla f(x) = \\lambda \\sum_{i=1}^{2}\\mu_{i}\\nabla h_i(x)=\\sum_{i=1}^{2}\\lambda_{i}\\nabla h_i(x)\\\\ h_1(x)=0\\\\ h_2(x)=0\\]</span>\n<br>     大于2个约束的情况也一样。为了好记，将原来的约束的问题写成 \n<span class=\"math inline\">\\(L(x,\\lambda)=f(x)+\\sum_{i-1}^{n}\\lambda_{i}\\nabla h_{i}(x)\\)</span>的形式，然后对 \n<span class=\"math inline\">\\(x\\)</span>、\n<span class=\"math inline\">\\(\\lambda\\)</span> 求偏导，然后让它们为 0。结果像上面一样直接列方程组是一样的。这个可以看做是一种简记，或者是对偶问题，这个函数叫做拉格朗日函数。\n<br>     再进一步，如果问题中既有等式约束，又有不等式约束怎么办呢？对于：\n<br> \n<span class=\"math display\">\\[\\begin{align*} min \\quad f(x)\\\\ &amp; s.t. \\quad h(x) = 0\\\\ &amp;\\quad \\quad \\quad g(x) \\leq 0 \\end{align*}\\]</span>\n<br>     当然也同样约定不等式是 \n<span class=\"math inline\">\\(\\leq\\)</span>，如果是 \n<span class=\"math inline\">\\(\\geq\\)</span> 只要取反就行了。对于这个问题先不看等式约束，对于不等式约束和目标函数的图：\n<br> \n<div align=\"center\">\n <br> \n <img src=\"http:/static/userImages/2018/04/12/c24c3263-3527-497f-9762-49fb92b12716.png\" width=\"35%\" alt=\"不等式约束\">\n <br> \n</div>\n<br> \n<center>\n 不等式约束\n</center>\n<br>     阴影部分就是可行域，也就是说可行域从原来的一条线变成了一块区域。那么能取到极值点的地方可能有两种情况：\n<p></p> \n<ol> \n <li>还是在 <span class=\"math inline\">\\(h(x)\\)</span> 和 等值线相切的地方</li> \n <li><span class=\"math inline\">\\(f(x)\\)</span> 的极值点本身就在可行域里面。</li> \n</ol> \n<p>    因为如果不是相切，那么同样的，对任意一个在可行域中的点，如果在它附近往里走或者往外走，<span class=\"math inline\">\\(f(x)\\)</span> 一般都会变大或者变小，所以绝大部分点都不会是极值点。除非这个点刚好在交界处，且和等值线相切；或者这个点在可行域内部，但是本身就是 <span class=\"math inline\">\\(f(x)\\)</span> 的极值点。如下图（维基百科上的图~）：<br> </p>\n<div align=\"center\">\n <br> \n <img src=\"http:/static/userImages/2018/04/12/676f5a13-0cbd-45e2-984b-83aa125085f4.png\" width=\"45%\" alt=\"不等式约束下的极值\">\n <br> \n</div>\n<br> \n<center>\n 不等式约束下的极值\n</center>\n<br>     对于第一种情况，不等式约束就变成等式约束了，对\n<span class=\"math inline\">\\(f(x) + \\lambda h(x) + \\mu g(x)\\)</span> 用拉格朗日乘子法：\n<br> \n<span class=\"math display\">\\[\\nabla f(x)+\\lambda \\nabla h(x)+\\mu \\nabla g(x) = 0\\\\ h(x)=0\\\\ g(x)=0\\\\ \\mu \\geq 0\\]</span>\n<br>     这里需要解释一下，为什么不是 \n<span class=\"math inline\">\\(\\mu \\neq0\\)</span> 而是 \n<span class=\"math inline\">\\(\\mu \\geq 0\\)</span>。后面的约束比前面的更强。看“不等式约束”那个图，我们已经知道了问题中的可行域是在 \n<span class=\"math inline\">\\(g(x)\\leq0\\)</span> 一侧，而 \n<span class=\"math inline\">\\(g(x)\\)</span> 的梯度是指向大于 0 的一侧，也就是不是可行域的一侧。而求的问题是极小值，所以 \n<span class=\"math inline\">\\(f(x)\\)</span> 在交点处的梯度是指向可行域的一侧，也就是说两个梯度一定是相反的。所以也就可以确定这里的系数一定是大于 0 的。而等式约束由于不知道 \n<span class=\"math inline\">\\(h(x)\\)</span> 的梯度方向，只能约束为 \n<span class=\"math inline\">\\(\\lambda \\neq 0\\)</span>，那么为什么 \n<span class=\"math inline\">\\(\\mu\\)</span> 还能等于 0 呢，因为极值点可能刚好在 \n<span class=\"math inline\">\\(g(x)\\)</span> 上。\n<br>     对于第二种情况，不等式约束就相当于没有，对 $f(x) + \\lambda h(x) $ 用拉格朗日乘子法：\n<br> \n<span class=\"math display\">\\[\\nabla f(x)+\\lambda \\nabla h(x)= 0\\\\ h(x)=0\\\\ g(x) \\leq 0\\]</span>\n<br>     最好把两种情况用同一组方程表示出来。对比一下两个问题，不同的是第一种情况中有 \n<span class=\"math inline\">\\(\\mu \\geq 0\\)</span> 且 \n<span class=\"math inline\">\\(g(x)=0\\)</span>, 第二种情况 \n<span class=\"math inline\">\\(\\mu = 0\\)</span> 且 \n<span class=\"math inline\">\\(g(x) \\leq 0\\)</span> 综合两种情况，可以写成 \n<span class=\"math inline\">\\(\\mu g(x) = 0\\)</span> 且 \n<span class=\"math inline\">\\(\\mu \\geq 0\\)</span> 且 \n<span class=\"math inline\">\\(g(x) \\leq 0\\)</span>：\n<br> \n<span class=\"math display\">\\[\\nabla f(x)+\\lambda \\nabla h(x)+\\mu \\nabla g(x) = 0\\\\ \\mu g(x) = 0\\\\ h(x)=0\\\\ g(x) \\leq 0\\]</span>\n<br>     这个就是 KKT 条件。它的含义是这个优化问题的极值点一定满足这组方程组。（不是极值点也可能会满足，但是不会存在某个极值点不满足的情况）它也是原来的优化问题取得极值的必要条件，解出来了极值点之后还是要代入验证的。但是因为约束比较多，情况比较复杂，KKT 条件并不是对于任何情况都是满足的。要满足 KKT 条件需要有一些规范性条件（Regularity conditions），就是要求约束条件的质量不能太差，常见的比如：\n<p></p> \n<ol> \n <li>LCQ：如果 <span class=\"math inline\">\\(h(x)\\)</span> 和 <span class=\"math inline\">\\(g(x)\\)</span> 都是形如 <span class=\"math inline\">\\(Ax+b\\)</span> 的仿射函数，那么极值一定满足 KKT 条件。</li> \n <li>LICQ：起作用的 <span class=\"math inline\">\\(g(x)\\)</span> 函数（即 <span class=\"math inline\">\\(g(x)\\)</span> 相当于等式约束的情况）和 <span class=\"math inline\">\\(h(x)\\)</span> 函数在极值点处的梯度要线性无关，那么极值一定满足 KKT 条件。</li> \n <li>Slater 条件：如果优化问题是个凸优化问题，且至少存在一个点满足 <span class=\"math inline\">\\(h(x) = 0\\)</span> 和 <span class=\"math inline\">\\(g(x) = 0\\)</span>，极值一定满足 KKT 条件。并且满足强对偶性质（下面会讲）。</li> \n</ol> \n<p>     这里的 Slater 条件比较重要，因为它可以推导出强对偶性质（下面会讲到，它比 KKT 条件还好）。它需要原问题是凸优化问题。所谓凸优化就是这个优化问题的优化函数是<a href=\"https://baike.baidu.com/item/%E5%87%B8%E5%87%BD%E6%95%B0\">凸函数</a>，并且可行域是<a href=\"https://baike.baidu.com/item/%E5%87%B8%E9%9B%86\">凸集</a>。可行域数凸集就要求其中的 <span class=\"math inline\">\\(h(x)\\leq0\\)</span> 的条件中 <span class=\"math inline\">\\(h(x)\\)</span> 必须也是凸函数，而 <span class=\"math inline\">\\(g(x) \\leq0\\)</span> 中的 <span class=\"math inline\">\\(g(x)\\)</span> 必须是 <span class=\"math inline\">\\(Ax+b\\)</span> 形式的，也就是仿射函数（比如二维的情况，可行域就在 <span class=\"math inline\">\\(g(x)\\)</span> 这条曲线上，那么 <span class=\"math inline\">\\(g(x)\\)</span> 必须得是直线才能满足凸集的定义）。<br>      其它条件还有很多，可以看<a href=\"https://en.wikipedia.org/wiki/Karush%E2%80%93Kuhn%E2%80%93Tucker_conditions\">维基百科</a>。<br>     如果有多组等式约束 <span class=\"math inline\">\\(g_i(x) =0 \\quad (i=1,..,n)\\)</span>, 和不等式约束 <span class=\"math inline\">\\(h_i(x) \\neq0 \\quad (i=1,..,n)\\)</span>也是一样，只要做个线性组合就行了：<br> <span class=\"math display\">\\[\\nabla f(x)+\\sum_{i=1}^{n}\\lambda_i \\nabla h_i(x)+\\sum_{i=1}^{n}\\mu_i \\nabla g_i(x) = 0\\\\ \\mu_i g(x)_i = 0\\\\ h_i(x)=0\\\\ g_i(x) \\leq 0\\\\ i = 1,2,...,n\\]</span><br>     问题到这里就大致解决了，KKT 条件虽然从理论上给出了极值的必要条件，但是一般实际解的时候直接方程也是很困难的（特别是约束很多的时候），一般也会采用罚函数法等数值方法。<br>     为了更好的解决这个优化问题，数学家还找到了它的对偶问题。找一个优化问题的对偶问题的一般因为是对偶问题比原问题更好解决，并且对偶问题的解和原问题是一样的。上面的拉格朗日函数也可以看做原问题的对偶问题。<br>     为了去掉问题中的约束，可以把它们作为惩罚项加到目标函数中 <span class=\"math inline\">\\(min_{x}f(x) + M h(x) + N g(x)\\)</span> 其中 M, N 是两个很大的正数，在数值解法中可以直接这样做，这个就是罚函数法的思路 。不过在理论推导时这样做是不严谨的，除非 M, N 为无穷大。所以就把原问题改写 <span class=\"math inline\">\\(L(x,\\mu,\\lambda) = min_{x}max_{\\mu,\\lambda}f(x) + \\lambda h(x) + \\mu g(x)\\)</span> 。这个式子可以这么理解，现在外层给定任意一个 <span class=\"math inline\">\\(x_{0}\\)</span> 值，然后内层在给定的 <span class=\"math inline\">\\(x_{0}\\)</span> 下优化那个函数，让它最小。然后外层选能够让内层得到的值最大的一个 <span class=\"math inline\">\\(x_{0}\\)</span>，得到的函数表达式就是：<br> <span class=\"math display\">\\[ L(x,\\mu,\\lambda)= \\left\\{\\begin{matrix} f(x) &amp; (x \\quad满足约束)\\\\ \\infty &amp; (x \\quad不满足约束)\\\\ \\end{matrix}\\right. \\]</span><br> 所以外层选的那个 <span class=\"math inline\">\\(x_{0}\\)</span> 一定满足约束，否则，内层的 max 的时候会让 $\\mu $ 或者 <span class=\"math inline\">\\(\\lambda\\)</span> 为无穷大。外层不会选那些能让内层得到无穷大的 <span class=\"math inline\">\\(x\\)</span> 值。这样改写就和原来的带约束形式完全一致了，但是形式不同。这样可以利用 <span class=\"math inline\">\\(max \\quad min f(x) \\leq min \\quad max(f(x))\\)</span> 这个公式（这个很好理解，<span class=\"math inline\">\\(min f(x) \\leq min\\quad max f(x)\\)</span>, 然后就有这个公式了），得到原问题的最小值的一个下界，就是:<br> <span class=\"math display\">\\[min_{x}max_{\\mu,\\lambda}f(x) + \\lambda h(x) + \\mu g(x) &gt;= max_{\\mu,\\lambda}min_{x}f(x) + \\lambda h(x) + \\mu g(x) \\]</span><br>     前面的就是原函数，后面的是它的一个下界。那么为什么要这样做呢? 是因为后面的一定是一个凸规划，比较好解决。但是这个只是一个下界，它们之间还是有一定的差距。这个差距叫对偶误差（duality gap）。对偶误差如果为 0 其实是一个非常好的性质，表示可以直接求解后面的问题得到原问题的解，这种性质叫强对偶性质，否则就只是弱对偶。<br>     强对偶性质非常好，但是要求也很苛刻，比 KKT 条件要苛刻。如果问题满足强对偶一定也满足 KKT 条件，反之不一定。对于这类优化问题，KKT 条件、强对偶、规范性条件之间的关系是：<br> </p>\n<div align=\"center\">\n <br> \n <img src=\"http:/static/userImages/2018/04/12/1cd27b28-a6cb-4200-a7c9-63b8949adc13.png\" width=\"55%\" alt=\"RC、KKT 和强对偶的关系\">\n <br> \n</div>\n<br> \n<center>\n RC、KKT 和强对偶的关系\n</center>\n<br>     对于强对偶 推出 KKT 可以参看\n<a href=\"http://blog.pluskid.org/?p=702\">这篇博客</a>。\n<p></p> \n<p>    这篇博文到这里就结束了，这些优化方法都是很经典的方法，在 SVM 的推导中也用到了。</p> \n<p>    <strong>对机器学习感兴趣的新手或者大牛，如果有觉得对别人有帮助的，高质量的网页，大家可以通过 chrome 插件分享给其他人。在<a href=\"http://xingkoong.com/collect/home.php/Home/download/download\">这里安装分享插件</a>。</strong></p> \n<p>参考链接：</p> \n<ol> \n <li><a href=\"https://www.cnblogs.com/zhangchaoyang/articles/2726873.html\">拉格朗日乘数法</a></li> \n <li><a href=\"https://en.wikipedia.org/wiki/Karush%E2%80%93Kuhn%E2%80%93Tucker_conditions\">Karush–Kuhn–Tucker conditions</a></li> \n <li><a href=\"http://blog.pluskid.org/?p=702\">支持向量机：Duality</a></li> \n</ol> \n<hr> \n<p>如需转载，请注明出处.<br> 出处：<a href=\"http://www.cnblogs.com/xinchen1111/p/8804858.html\" class=\"uri\">http://www.cnblogs.com/xinchen1111/p/8804858.html</a></p>', '14', null);
INSERT INTO `t_blog` VALUES ('162', 'Java中对List去重, Stream去重', 'Java中对List去重, Stream去重', '2018-04-12 11:19:05', '0', '0', '<p><img src=\"http:/static/userImages/2018/04/12/4422700d-78be-4710-8fa8-0a0f9dced8e8.png\"></p> \n<h2 id=\"问题\">问题</h2> \n<p>当下互联网技术成熟，越来越多的趋向去中心化、分布式、流计算，使得很多以前在数据库侧做的事情放到了Java端。今天有人问道，如果数据库字段没有索引，那么应该如何根据该字段去重？大家都一致认为用Java来做，但怎么做呢？</p> \n<h2 id=\"解答\">解答</h2> \n<p>忽然想起以前写过list去重的文章，找出来一看。做法就是将list中对象的hashcode和equals方法重写，然后丢到HashSet里，然后取出来。这是最初刚学Java的时候像被字典一样背写出来的答案。就比如面试，面过号称做了3年Java的人，问Set和HashMap的区别可以背出来，问如何实现就不知道了。也就是说，初学者只背特性。但真正在项目中使用的时候你需要确保一下是不是真的这样。因为背书没用，只能相信结果。你需要知道HashSet如何帮我做到去重了。换个思路，不用HashSet可以去重吗？最简单，最直接的办法不就是每次都拿着和历史数据比较，都不相同则插入队尾。而HashSet只是加速了这个过程而已。</p> \n<p>首先，给出我们要排序的对象User</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"fu\">@Data</span>\n<span class=\"fu\">@Builder</span>\n<span class=\"fu\">@AllArgsConstructor</span>\n<span class=\"kw\">public</span> <span class=\"kw\">class</span> User {\n\n  <span class=\"kw\">private</span> Integer id;\n  <span class=\"kw\">private</span> String name;\n}\n\n\nList&lt;User&gt; users = Lists.<span class=\"fu\">newArrayList</span>(\n        <span class=\"kw\">new</span> <span class=\"fu\">User</span>(<span class=\"dv\">1</span>, <span class=\"st\">\"a\"</span>),\n        <span class=\"kw\">new</span> <span class=\"fu\">User</span>(<span class=\"dv\">1</span>, <span class=\"st\">\"b\"</span>),\n        <span class=\"kw\">new</span> <span class=\"fu\">User</span>(<span class=\"dv\">2</span>, <span class=\"st\">\"b\"</span>),\n        <span class=\"kw\">new</span> <span class=\"fu\">User</span>(<span class=\"dv\">1</span>, <span class=\"st\">\"a\"</span>));</code></pre>\n</div> \n<p>目标是取出id不重复的user，为了防止扯皮，给个规则，只要任意取出id唯一的数据即可，不用拘泥id相同时算哪个。</p> \n<h2 id=\"用最直观的办法\">用最直观的办法</h2> \n<p>这个办法就是用一个空list存放遍历后的数据。</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"fu\">@Test</span>\n<span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">dis1</span>() {\n    List&lt;User&gt; result = <span class=\"kw\">new</span> LinkedList&lt;&gt;();\n    <span class=\"kw\">for</span> (User user : users) {\n      <span class=\"dt\">boolean</span> b = result.<span class=\"fu\">stream</span>().<span class=\"fu\">anyMatch</span>(u -&gt; u.<span class=\"fu\">getId</span>().<span class=\"fu\">equals</span>(user.<span class=\"fu\">getId</span>()));\n      <span class=\"kw\">if</span> (!b) {\n        result.<span class=\"fu\">add</span>(user);\n      }\n    }\n\n    System.<span class=\"fu\">out</span>.<span class=\"fu\">println</span>(result);\n}</code></pre>\n</div> \n<h2 id=\"用hashset\">用HashSet</h2> \n<p>背过特性的都知道HashSet可以去重，那么是如何去重的呢？ 再深入一点的背过根据hashcode和equals方法。那么如何根据这两个做到的呢？没有看过源码的人是无法继续的，面试也就到此结束了。</p> \n<p>事实上，HashSet是由HashMap来实现的(没有看过源码的时候曾经一直直观的以为HashMap的key是HashSet来实现的，恰恰相反)。这里不展开叙述，只要看HashSet的构造方法和add方法就能理解了。</p> \n<pre><code>public HashSet() {\n    map = new HashMap&lt;&gt;();\n}\n\n/**\n* 显然，存在则返回false，不存在的返回true\n*/\npublic boolean add(E e) {\n    return map.put(e, PRESENT)==null;\n}</code></pre> \n<p>那么，由此也可以看出HashSet的去重复就是根据HashMap实现的，而HashMap的实现又完全依赖于hashcode和equals方法。这下就彻底打通了，想用HashSet就必须看好自己的这两个方法。</p> \n<p>在本题目中，要根据id去重，那么，我们的比较依据就是id了。修改如下：</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"fu\">@Override</span>\n<span class=\"kw\">public</span> <span class=\"dt\">boolean</span> <span class=\"fu\">equals</span>(Object o) {\n    <span class=\"kw\">if</span> (<span class=\"kw\">this</span> == o) {\n      <span class=\"kw\">return</span> <span class=\"kw\">true</span>;\n    }\n    <span class=\"kw\">if</span> (o == <span class=\"kw\">null</span> || <span class=\"fu\">getClass</span>() != o.<span class=\"fu\">getClass</span>()) {\n      <span class=\"kw\">return</span> <span class=\"kw\">false</span>;\n    }\n    User user = (User) o;\n    <span class=\"kw\">return</span> Objects.<span class=\"fu\">equals</span>(id, user.<span class=\"fu\">id</span>);\n}\n\n<span class=\"fu\">@Override</span>\n<span class=\"kw\">public</span> <span class=\"dt\">int</span> <span class=\"fu\">hashCode</span>() {\n    <span class=\"kw\">return</span> Objects.<span class=\"fu\">hash</span>(id);\n}\n\n\n<span class=\"co\">//hashcode</span>\nresult = <span class=\"dv\">31</span> * result + (element == <span class=\"kw\">null</span> ? <span class=\"dv\">0</span> : element.<span class=\"fu\">hashCode</span>());</code></pre>\n</div> \n<p>其中， Objects调用Arrays的hashcode，内容如上述所示。乘以31等于x&lt;&lt;5-x。</p> \n<p>最终实现如下：</p> \n<pre><code>@Test\npublic void dis2() {\n    Set&lt;User&gt; result = new HashSet&lt;&gt;(users);\n    System.out.println(result);\n}</code></pre> \n<h2 id=\"使用java的stream去重\">使用Java的Stream去重</h2> \n<p>回到最初的问题，之所以提这个问题是因为想要将数据库侧去重拿到Java端，那么数据量可能比较大，比如10w条。对于大数据，采用Stream相关函数是最简单的了。正好Stream也提供了distinct函数。那么应该怎么用呢？</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\">users.<span class=\"fu\">parallelStream</span>().<span class=\"fu\">distinct</span>().<span class=\"fu\">forEach</span>(System.<span class=\"fu\">out</span>::println);</code></pre>\n</div> \n<p>没看到用lambda当作参数，也就是没有提供自定义条件。幸好Javadoc标注了去重标准：</p> \n<pre><code>Returns a stream consisting of the distinct elements\n(according to {@link Object#equals(Object)}) of this stream.</code></pre> \n<p>我们知道，也必须背过这样一个准则：<strong>equals返回true的时候，hashcode的返回值必须相同</strong>. 这个在背的时候略微有些逻辑混乱，但只要了解了HashMap的实现方式就不会觉得拗口了。HashMap先根据hashcode方法定位，再比较equals方法。</p> \n<p>所以，要使用distinct来实现去重，必须重写hashcode和equals方法，除非你使用默认的。</p> \n<p>那么，究竟为啥要这么做？点进去看一眼实现。</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\">\n&lt;P_IN&gt; Node&lt;T&gt; <span class=\"fu\">reduce</span>(PipelineHelper&lt;T&gt; helper, Spliterator&lt;P_IN&gt; spliterator) {\n    <span class=\"co\">// If the stream is SORTED then it should also be ORDERED so the following will also</span>\n    <span class=\"co\">// preserve the sort order</span>\n    TerminalOp&lt;T, LinkedHashSet&lt;T&gt;&gt; reduceOp\n            = ReduceOps.&lt;T, LinkedHashSet&lt;T&gt;&gt;<span class=\"fu\">makeRef</span>(LinkedHashSet::<span class=\"kw\">new</span>, LinkedHashSet::add,\n                                                     LinkedHashSet::addAll);\n    <span class=\"kw\">return</span> Nodes.<span class=\"fu\">node</span>(reduceOp.<span class=\"fu\">evaluateParallel</span>(helper, spliterator));\n}</code></pre>\n</div> \n<p>内部是用reduce实现的啊，想到reduce，瞬间想到一种自己实现distinctBykey的方法。我只要用reduce，计算部分就是把Stream的元素拿出来和我自己内置的一个HashMap比较，有则跳过，没有则放进去。其实，思路还是最开始的那个最直白的方法。</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\">\n<span class=\"fu\">@Test</span>\n<span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">dis3</span>() {\n    users.<span class=\"fu\">parallelStream</span>().<span class=\"fu\">filter</span>(<span class=\"fu\">distinctByKey</span>(User::getId))\n        .<span class=\"fu\">forEach</span>(System.<span class=\"fu\">out</span>::println);\n}\n\n\n<span class=\"kw\">public</span> <span class=\"dt\">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class=\"fu\">distinctByKey</span>(Function&lt;? <span class=\"kw\">super</span> T, ?&gt; keyExtractor) {\n    Set&lt;Object&gt; seen = ConcurrentHashMap.<span class=\"fu\">newKeySet</span>();\n    <span class=\"kw\">return</span> t -&gt; seen.<span class=\"fu\">add</span>(keyExtractor.<span class=\"fu\">apply</span>(t));\n}</code></pre>\n</div> \n<p>当然，如果是并行stream，则取出来的不一定是第一个，而是随机的。</p> \n<p>上述方法是至今发现最好的，无侵入性的。但如果非要用distinct。只能像HashSet那个方法一样重写hashcode和equals。</p> \n<h2 id=\"小结\">小结</h2> \n<p>会不会用这些东西，你只能去自己练习过，不然到了真正要用的时候很难一下子就拿出来，不然就冒险用。而若真的想大胆使用，了解规则和实现原理也是必须的。比如，LinkedHashSet和HashSet的实现有何不同。</p> \n<p>附上贼简单的LinkedHashSet源码：</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\">\n<span class=\"kw\">public</span> <span class=\"kw\">class</span> LinkedHashSet&lt;E&gt;\n    <span class=\"kw\">extends</span> HashSet&lt;E&gt;\n    <span class=\"kw\">implements</span> Set&lt;E&gt;, Cloneable, java.<span class=\"fu\">io</span>.<span class=\"fu\">Serializable</span> {\n\n    <span class=\"kw\">private</span> <span class=\"dt\">static</span> <span class=\"dt\">final</span> <span class=\"dt\">long</span> serialVersionUID = -2851667679971038690L;\n\n    <span class=\"kw\">public</span> LinkedHashSet(<span class=\"dt\">int</span> initialCapacity, <span class=\"dt\">float</span> loadFactor) {\n        <span class=\"kw\">super</span>(initialCapacity, loadFactor, <span class=\"kw\">true</span>);\n    }\n\n    <span class=\"kw\">public</span> LinkedHashSet(<span class=\"dt\">int</span> initialCapacity) {\n        <span class=\"kw\">super</span>(initialCapacity, .75f, <span class=\"kw\">true</span>);\n    }\n\n    <span class=\"kw\">public</span> LinkedHashSet() {\n        <span class=\"kw\">super</span>(<span class=\"dv\">16</span>, .75f, <span class=\"kw\">true</span>);\n    }\n\n    <span class=\"kw\">public</span> LinkedHashSet(Collection&lt;? <span class=\"kw\">extends</span> E&gt; c) {\n        <span class=\"kw\">super</span>(Math.<span class=\"fu\">max</span>(<span class=\"dv\">2</span>*c.<span class=\"fu\">size</span>(), <span class=\"dv\">11</span>), .75f, <span class=\"kw\">true</span>);\n        <span class=\"fu\">addAll</span>(c);\n    }\n\n    <span class=\"fu\">@Override</span>\n    <span class=\"kw\">public</span> Spliterator&lt;E&gt; <span class=\"fu\">spliterator</span>() {\n        <span class=\"kw\">return</span> Spliterators.<span class=\"fu\">spliterator</span>(<span class=\"kw\">this</span>, Spliterator.<span class=\"fu\">DISTINCT</span> | Spliterator.<span class=\"fu\">ORDERED</span>);\n    }\n}</code></pre>\n</div> \n<p><img src=\"http:/static/userImages/2018/04/12/6896f462-8f1c-463c-8b92-dd4bf6e1ef60.svg+xml\" alt=\"set的实现\"></p> \n<p><img src=\"http:/static/userImages/2018/04/12/a2b0f105-ea51-42e0-a088-29e59f780a35.svg+xml\" alt=\"collection and map\"></p>', '14', null);
INSERT INTO `t_blog` VALUES ('163', 'Extensions in UWP Community Toolkit - ViewExtensions', 'Extensions in UWP Community Toolkit - ViewExtensions', '2018-04-12 11:19:17', '0', '0', '<p><span style=\"font-size: 18pt\">概述</span></p> \n<p>UWP Community Toolkit Extensions 中有一个为 View 提供的扩展 - View Extensions，本篇我们结合代码详细讲解&nbsp;View Extensions&nbsp;的实现。</p> \n<p>View Extensions 包括了 ApplicationViewExtensions，StatusBarExtensions 和 TitleBarExtensions，让开发者可以方便的定制 AppView，StatusBar 和 TitleBar 的样式，接下来看看官方示例的截图：</p> \n<p><img src=\"http:/static/userImages/2018/04/12/65635c48-bde9-492e-b2c0-12099666bed0.jpeg\" alt=\"\"></p> \n<p>Source:&nbsp;<a href=\"https://github.com/Microsoft/UWPCommunityToolkit/blob/master/Microsoft.Toolkit.Uwp.UI/Extensions/ApplicationView\" target=\"_blank\">https://github.com/Microsoft/UWPCommunityToolkit/blob/master/Microsoft.Toolkit.Uwp.UI/Extensions/ApplicationView</a><a href=\"https://github.com/Microsoft/UWPCommunityToolkit/tree/master/Microsoft.Toolkit.Uwp.UI/Extensions/Mouse\" target=\"_blank\"><br></a></p> \n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://github.com/Microsoft/UWPCommunityToolkit/blob/master/Microsoft.Toolkit.Uwp.UI/Extensions/StatusBar\" target=\"_blank\">https://github.com/Microsoft/UWPCommunityToolkit/blob/master/Microsoft.Toolkit.Uwp.UI/Extensions/StatusBar</a></p> \n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://github.com/Microsoft/UWPCommunityToolkit/blob/master/Microsoft.Toolkit.Uwp.UI/Extensions/TitleBar\" target=\"_blank\">https://github.com/Microsoft/UWPCommunityToolkit/blob/master/Microsoft.Toolkit.Uwp.UI/Extensions/TitleBar</a></p> \n<p>Doc:&nbsp;<a href=\"https://docs.microsoft.com/zh-cn/windows/uwpcommunitytoolkit/extensions/viewextensions\" target=\"_blank\">https://docs.microsoft.com/zh-cn/windows/uwpcommunitytoolkit/extensions/viewextensions</a></p> \n<p>Namespace:&nbsp;<strong><em>Microsoft.Toolkit.Uwp.UI.Extensions;</em></strong>&nbsp;Nuget:&nbsp;<strong><em>Microsoft.Toolkit.Uwp.UI;</em></strong></p> \n<p>&nbsp;</p> \n<p><span style=\"font-size: 18pt\">开发过程</span></p> \n<p><span style=\"font-size: 18px\">代码分析</span></p> \n<p>由于 ViewExtensions 分为&nbsp;ApplicationViewExtensions，StatusBarExtensions 和 TitleBarExtensions 三个部分，我们分别来看一下：</p> \n<p>1.&nbsp;ApplicationViewExtensions</p> \n<p>先来看一下 ApplicationViewExtensions 的结构：</p> \n<p><img style=\"border: 1px solid black\" src=\"http:/static/userImages/2018/04/12/dad46e5e-5b7e-4efc-8b4e-ab0e72973f42.jpeg\" alt=\"\">&nbsp;</p> \n<p>虽然有两个类组成，但其实 ApplicationView.cs 类是 Obsolete 的，所以现在在使用的是 ApplicationViewExtensions.cs，我们主要看一下这个类，先看一下类结构：</p> \n<p><img src=\"http:/static/userImages/2018/04/12/0a61d9dd-3c56-46fe-b49f-40f293f99051.jpeg\" alt=\"\"></p> \n<p>类的功能比较简单，我们主要来看这几个针对 Page 的附加属性对应的 get 和 set 方法：</p> \n<ul> \n <li>Title 对应 GetTitle(page) 和&nbsp;SetTitle(page, value) - 获取和设置 App 标题，主要处理逻辑是通过&nbsp;GetApplicationView() 获取 applicationView，然后再获取或设置 Title 属性；</li> \n <li>ExtendViewIntoTitleBar 对应 GetExtendViewIntoTitleBar(page) 和&nbsp;SetExtendViewIntoTitleBar(page, value) - 获取和设置是否扩展视图到标题栏的布尔值，主要处理逻辑是通过&nbsp;GetCoreApplicationView() 获取 CoreApplicationView，然后再获取或设置这个属性，如果为 True，那么 App 的 UI 会占据 TitleBar 的位置；</li> \n <li>BackButtonVisibility 对应&nbsp;GetBackButtonVisibility(page) 和&nbsp;SetBackButtonVisibility(page, value) - 获取和设置后退按钮是否可用，主要处理逻辑是通过&nbsp;GetSystemNavigationManager() 来获取&nbsp;SystemNavigationManager，然后再设置或获取这个属性；</li> \n</ul> \n<p>2.&nbsp;StatusBarExtensions&nbsp;</p> \n<p>先来看一下 StatusBarExtensions&nbsp;的结构：</p> \n<p><img style=\"border: 1px solid black\" src=\"http:/static/userImages/2018/04/12/c344182d-ca40-4170-a506-395ef1458af2.jpeg\" alt=\"\"></p> \n<p>和 ApplicationViewExtensions 类似，StatusBar.cs 类是 Obsolete 的，所以现在在使用的是 StatusBarExtensions.cs，我们主要看一下这个类，先看一下类结构：</p> \n<p><img src=\"http:/static/userImages/2018/04/12/0ba2bbdf-7eb4-4223-8f37-12bb09364919.jpeg\" alt=\"\">&nbsp;</p> \n<p>类的功能比较简单，我们主要来看这几个针对 Page 的附加属性对应的 get 和 set 方法：</p> \n<ul> \n <li>BackgroundColor 对应 GetBackgroundColor(page) 和 SetBackgroundColor(page, color) - 获取和设置 StatusBar 的背景颜色，主要通过&nbsp;GetStatusBar() 获得 StatusBar 实例，然后获取或设置 BackgroundColor 属性；</li> \n <li>ForegroundColor 对应 GetForegroundColor(page) 和 SetForegroundColor(page, color) - 获取和设置 StatusBar 的前景颜色，主要通过&nbsp;GetStatusBar() 获得 StatusBar 实例，然后获取或设置 ForegroundColor 属性；</li> \n <li>BackgroundOpaticy 对应 GetBackgroundOpaticy(page) 和 SetBackgroundOpaticy(page, color) - 获取和设置 StatusBar 的背景透明度，主要通过 GetStatusBar() 获得 StatusBar 实例，然后获取或设置&nbsp;BackgroundOpaticy 属性；</li> \n <li>IsVisible 对应 GetIsVisible(page) 和 SetIsVisible(page, double) - 获取和设置 StatusBar 是否可见，获取方法通过获取&nbsp;OccludedRect Height 的高度来判断是否可见，因为 InputPane 的 VIsible 属性只在 XBox 有效；设置是通过 Page 的 IsVisibleProperty 属性来设置；IsVisibleProperty 是类中定义的依赖属性，改变时触发&nbsp;OnIsVisibleChanged 事件；</li> \n</ul> \n<p>来看一下&nbsp;OnIsVisibleChanged 事件的处理方法，通过调用 StatusBar 的 ShowAsync() 和 HideAsync() 方法来设置 StatusBar 的可见和不可见；</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">private</span> <span style=\"color: #0000ff\">static</span> <span style=\"color: #0000ff\">async</span> <span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> OnIsVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n{\n    </span><span style=\"color: #0000ff\">var</span> statusBar =<span style=\"color: #000000\"> GetStatusBar();\n\n    </span><span style=\"color: #0000ff\">if</span> (statusBar == <span style=\"color: #0000ff\">null</span><span style=\"color: #000000\">)\n    {\n        </span><span style=\"color: #0000ff\">return</span><span style=\"color: #000000\">;\n    }\n\n    </span><span style=\"color: #0000ff\">bool</span> isVisible = (<span style=\"color: #0000ff\">bool</span><span style=\"color: #000000\">)e.NewValue;\n\n    </span><span style=\"color: #0000ff\">if</span><span style=\"color: #000000\"> (isVisible)\n    {\n        </span><span style=\"color: #0000ff\">await</span><span style=\"color: #000000\"> statusBar.ShowAsync();\n    }\n    </span><span style=\"color: #0000ff\">else</span><span style=\"color: #000000\">\n    {\n        </span><span style=\"color: #0000ff\">await</span><span style=\"color: #000000\"> statusBar.HideAsync();\n    }\n}</span></pre> \n</div> \n<p>3.&nbsp;TitleBarExtensions&nbsp;</p> \n<p>先来看一下 TitleBarExtensions&nbsp;的结构：&nbsp;</p> \n<p><img style=\"border: 1px solid black\" src=\"http:/static/userImages/2018/04/12/0bd5b313-b8ad-4ada-b5b3-e22c3948e572.jpeg\" alt=\"\"></p> \n<p>和 ApplicationViewExtensions 类似，TitleBar.cs 类是 Obsolete 的，所以现在在使用的是 TitleBarExtensions.cs，我们主要看一下这个类，先看一下类结构：&nbsp;</p> \n<p><img src=\"http:/static/userImages/2018/04/12/d268f95f-255f-4a2b-b0f6-ded463a50ac5.jpeg\" alt=\"\"></p> \n<p>类的功能比较简单，我们主要来看这几个针对 Page 的附加属性对应的 get 和 set 方法：</p> \n<ul> \n <li>BackgroundColor 对应&nbsp;GetBackgroundColor(page) 和&nbsp;SetBackgroundColor(page, color)&nbsp; - 获取和设置 TitleBar 的背景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置&nbsp;BackgroundColor 属性；在显示上会覆盖 StatusBar 的对应属性；</li> \n <li>ButtonBackgroundColor 对应&nbsp;GetButtonBackgroundColor(page) 和&nbsp;SetButtonBackgroundColor(page, color) - 获取和设置 TitleBar 的右上角三个按钮的背景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置 ButtonBackgroundColor&nbsp;属性；</li> \n <li>ButtonForegroundColor 对应&nbsp;GetButtonForegroundColor(page) 和&nbsp;SetButtonForegroundColor(page, color) -&nbsp;获取和设置 TitleBar 的右上角三个按钮的前景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置&nbsp;ButtonForegroundColor&nbsp;属性；</li> \n <li>ButtonHoverBackgroundColor 对应&nbsp;GetButtonHoverBackgroundColor(page) 和&nbsp;SetButtonHoverBackgroundColor(page, color) -&nbsp;获取和设置 TitleBar 的右上角三个按钮的鼠标悬浮背景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置 ButtonHoverBackgroundColor&nbsp;属性；</li> \n <li>ButtonHoverForegroundColor 对应&nbsp;GetButtonHoverForegroundColor(page) 和&nbsp;SetButtonHoverForegroundColor(page, color) -&nbsp;获取和设置 TitleBar 的右上角三个按钮的鼠标悬浮前景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置&nbsp;ButtonHoverForegroundColor&nbsp;属性；</li> \n <li>ButtonInactiveBackgroundColor 对应 GetButtonInactiveBackgroundColor(page) 和 SetButtonInactiveBackgroundColor(page, color) -&nbsp;获取和设置 TitleBar 的右上角三个按钮在窗口非活动状态时的背景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置 ButtonInactiveBackgroundColor&nbsp;属性；</li> \n <li>ButtonInactiveForegroundColor&nbsp;对应&nbsp;GetButtonInactiveForegroundColor(page) 和&nbsp;SetButtonInactiveForegroundColor(page, color) -&nbsp;获取和设置 TitleBar 的右上角三个按钮在窗口非活动状态时的前景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置 ButtonInactiveForegroundColor&nbsp;属性；</li> \n <li>ButtonPressedBackgroundColor 对应&nbsp;GetButtonPressedBackgroundColor(page) 和&nbsp;SetButtonPressedBackgroundColor(page, color) -&nbsp;获取和设置 TitleBar 的右上角三个按钮点击时的背景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置 ButtonPressedBackgroundColor&nbsp;属性；</li> \n <li>ButtonPressedForegroundColor&nbsp;对应&nbsp;GetButtonPressedForegroundColor(page) 和&nbsp;SetButtonPressedForegroundColor(page, color) -&nbsp;获取和设置 TitleBar 的右上角三个按钮点击时的前景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置&nbsp;ButtonPressedForegroundColor&nbsp;属性；</li> \n <li>ForegroundColor 对应&nbsp;GetForegroundColor(page) 和&nbsp;SetForegroundColor(page, color)&nbsp; - 获取和设置 TitleBar 的前景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置 ForegroundColor 属性；在显示上会覆盖 StatusBar 的对应属性；</li> \n <li>InactiveBackgroundColor 对应&nbsp;GetInactiveBackgroundColor(page) 和&nbsp;SetInactiveBackgroundColor(page, color)&nbsp; - 获取和设置 TitleBar 在窗口非活动时的背景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置&nbsp;InactiveBackgroundColor 属性；在显示上会覆盖 StatusBar 的对应属性；</li> \n <li>InactiveForegroundColor 对应&nbsp;GetInactiveForegroundColor(page) 和&nbsp;SetInactiveForegroundColor(page, color)&nbsp; - 获取和设置 TitleBar 在窗口非活动时的前景色，主要通过&nbsp;GetTitleBar() 方法获得 TitleBar 实例，然后获取或设置 InactiveForegroundColor&nbsp;属性；在显示上会覆盖 StatusBar 的对应属性；</li> \n</ul> \n<p>&nbsp;</p> \n<p><span style=\"font-size: 18px\">调用示例</span></p> \n<p>我们定制了 AppView 的 Title，StatusBar 和 TitleBar 的样式，看到运行图和设置的一致；</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">&lt;</span><span style=\"color: #800000\">Page\n    </span><span style=\"color: #ff0000\">x:Class</span><span style=\"color: #0000ff\">=\"CommunityToolkitSample.MainPage\"</span><span style=\"color: #ff0000\">\n    xmlns</span><span style=\"color: #0000ff\">=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span><span style=\"color: #ff0000\">\n    xmlns:x</span><span style=\"color: #0000ff\">=\"http://schemas.microsoft.com/winfx/2006/xaml\"</span><span style=\"color: #ff0000\">\n    xmlns:d</span><span style=\"color: #0000ff\">=\"http://schemas.microsoft.com/expression/blend/2008\"</span><span style=\"color: #ff0000\">\n    xmlns:mc</span><span style=\"color: #0000ff\">=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"</span><span style=\"color: #ff0000\">\n    xmlns:extensions</span><span style=\"color: #0000ff\">=\"using:Microsoft.Toolkit.Uwp.UI.Extensions\"</span><span style=\"color: #ff0000\">\n    xmlns:controls</span><span style=\"color: #0000ff\">=\"using:Microsoft.Toolkit.Uwp.UI.Controls\"</span><span style=\"color: #ff0000\">\n    extensions:ApplicationViewExtensions.Title</span><span style=\"color: #0000ff\">=\"View Extensions\"</span><span style=\"color: #ff0000\">\n      extensions:TitleBarExtensions.BackgroundColor</span><span style=\"color: #0000ff\">=\"Red\"</span><span style=\"color: #ff0000\">\n      extensions:TitleBarExtensions.ForegroundColor</span><span style=\"color: #0000ff\">=\"Green\"</span><span style=\"color: #ff0000\">\n      extensions:TitleBarExtensions.ButtonBackgroundColor</span><span style=\"color: #0000ff\">=\"Gray\"</span><span style=\"color: #ff0000\">\n      extensions:TitleBarExtensions.ButtonForegroundColor</span><span style=\"color: #0000ff\">=\"White\"</span><span style=\"color: #ff0000\">\n      extensions:StatusBarExtensions.BackgroundColor</span><span style=\"color: #0000ff\">=\"CornflowerBlue\"</span><span style=\"color: #ff0000\">\n      extensions:StatusBarExtensions.BackgroundOpacity</span><span style=\"color: #0000ff\">=\"0.8\"</span><span style=\"color: #ff0000\">\n      extensions:StatusBarExtensions.ForegroundColor</span><span style=\"color: #0000ff\">=\"White\"</span><span style=\"color: #ff0000\">\n      extensions:StatusBarExtensions.IsVisible</span><span style=\"color: #0000ff\">=\"False\"</span><span style=\"color: #ff0000\">\n    mc:Ignorable</span><span style=\"color: #0000ff\">=\"d\"</span><span style=\"color: #0000ff\">&gt;</span></pre> \n</div> \n<p><img src=\"http:/static/userImages/2018/04/12/fd38b0dd-e780-46a4-a841-61cb83dbb203.jpeg\" alt=\"\"></p> \n<p>&nbsp;</p> \n<p><span style=\"font-size: 18pt\">总结</span></p> \n<p>到这里我们就把 UWP Community Toolkit Extensions 中的&nbsp;View Extensions&nbsp;的源代码实现过程和简单的调用示例讲解完成了，希望能对大家更好的理解和使用这个扩展有所帮助。欢迎大家多多交流，谢谢！</p> \n<p>最后，再跟大家安利一下 UWPCommunityToolkit 的官方微博：<em><strong><a href=\"https://weibo.com/u/6506046490\" target=\"_blank\">https://weibo.com/u/6506046490</a>,&nbsp;</strong></em>大家可以通过微博关注最新动态。</p> \n<p><strong>衷心感谢 UWPCommunityToolkit 的作者们杰出的工作，Thank you so much,&nbsp;UWPCommunityToolkit authors!!!</strong></p> \n<p>&nbsp;</p>', '14', null);
INSERT INTO `t_blog` VALUES ('164', '初学Java Web(4)——Servlet学习总结', '初学Java Web(4)——Servlet学习总结', '2018-04-12 11:19:29', '0', '0', '<p><img src=\"http:/static/userImages/2018/04/12/2922ae6b-dac4-47f6-b511-eda09cd4dfc5.png\"></p> \n<blockquote> \n <p>经过一段时间的学习，对于Servlet有了新的不一样的见解，在这里做一下总结，将近来学习到的知识总结一下。</p> \n</blockquote> \n<hr> \n<h3 id=\"servlet-的请求流程\">Servlet 的请求流程</h3> \n<ol> \n <li><p><strong>浏览器发出请求：</strong><a href=\"http://localhost:80/xxx1/xxx2\" class=\"uri\">http://localhost:80/xxx1/xxx2</a> （80端口可以默认不写，因为这是http协议默认的端口，平时我们访问https://www.baidu.com/ 时其实访问的是https://www.baidu.com:80/）</p></li> \n <li><strong>服务器解析请求信息：</strong> \n  <ul> \n   <li>**<a href=\"http:**协议名称\" class=\"uri\">http:**协议名称</a></li> \n   <li><strong>localhost:</strong>访问的是互联网中的<strong>哪一台计算机</strong></li> \n   <li><strong>80:</strong>从主机当中找到<strong>对应 80 端口的程序 </strong>（<strong>这里即为 Tomcat 服务器</strong>）</li> \n   <li><strong>/xxx1:</strong>当前项目的<strong>上下文路径</strong> （即在 server.xml 中配置主机时配置的 <strong>path属性</strong>）</li> \n   <li><strong>/xxx2:</strong>当前<strong>请求的资源名</strong></li> \n  </ul></li> \n <li><strong>解析</strong> Tomcat 服务器根目录下的 <strong>/config/server.xml</strong> 文件：<br> <code>&lt;Context docBase=\"D:\\javaPros\\test\\webapp\" path=\"xxx1\" /&gt;</code><br> 判断哪一个<code>&lt;Context /&gt;</code>元素的 <strong>path属性</strong> 属性为 <code>xxx1</code> \n  <ul> \n   <li>若找不到，则返回 <strong>404错误</strong></li> \n   <li>若找到了，则解析该<code>&lt;Context /&gt;</code>元素，得到<code>docBase</code>属性，获取当前访问 Web 项目的跟的绝对路径：<code>D:\\javaPros\\test\\webapp</code></li> \n  </ul></li> \n <li>从<code>D:\\javaPros\\test\\webapp</code>下的 <strong>WEB-INF</strong> 下找到 <strong>web.xml</strong> 文件<br> 判断 <strong>web.xml</strong> 文件中是否有 <code>&lt;url-pattern&gt;</code> 的文本内容为 <strong>/xxx2</strong> \n  <ul> \n   <li>若找不到，则返回 <strong>404错误</strong></li> \n   <li>若找到了，则继续<strong>获取该资源对应 Servlet 类的全限名称：</strong> xxx.xxx</li> \n  </ul></li> \n <li><p>判断 <strong>Servlet 实例缓存池</strong> 中是否有 xxx.xxx 的对象</p> \n  <div class=\"sourceCode\">\n   <pre class=\"sourceCode java\"><code class=\"sourceCode java\">Map&lt;String,Servlet&gt; cache = ......(Tomcat提供的);\nkey:存Servlet类的全限定名称\nvalue:该Servlet类的对象.\nServlet obj = cache.<span class=\"fu\">get</span>(<span class=\"st\">\"xxx.xxx\"</span>);\n<span class=\"kw\">if</span>(obj==<span class=\"kw\">null</span>){\n    <span class=\"co\">//Servlet实例缓存中没有该类的对象,第一次.</span>\n    GOTO <span class=\"dv\">6</span>:\n}<span class=\"kw\">else</span>{\n    <span class=\"co\">//有对象,非第一次.</span>\n    GOTO <span class=\"dv\">8</span>:\n}\n}</code></pre>\n  </div></li> \n <li><p><strong>使用反射</strong>调用构造器，<strong>创建对应的对象</strong><br> <code>obj = Class.forName(\"xxx.xxx\").newInstance();</code><br> 把当前创建的 <strong>Servlet 对象</strong>，存放在缓存之中，<strong>供给下一次的使用.</strong><br> <code>cache.put(\"xxx.xxx\",obj);</code></p></li> \n <li><p>创建 <strong>ServletConfig 对象</strong>，并调用 <strong>init()</strong> 方法<br> <code>obj.init(config);</code></p></li> \n <li><p>创建 <strong>ServletRequest 对象和 ServletResponse 对象</strong>，并调用 <strong>service()</strong>方法<br> <code>obj.service(req,resp);</code></p></li> \n <li><p>在 <strong>service()</strong> 方法中对浏览器作出响应操作。</p></li> \n</ol> \n<hr> \n<h3 id=\"servlet-生命周期\">Servlet 生命周期</h3> \n<p>在 Web 容器中，Servlet 主要经历 4 个阶段，如下图：<br> <img src=\"http:/static/userImages/2018/04/12/15957f7f-7db8-4949-9ebe-a7d5da9f376e.png\" alt=\"Servlet 生命周期\"></p> \n<ol> \n <li><strong>加载 Servlet：</strong>当 Tomcat <strong>第一次访问 Servlet</strong> 的时候，Tomcat 会负责<strong>创建 Servlet 的实例。</strong></li> \n <li><strong>初始化 Servlet：</strong>当 Servlet 被实例化之后，Tomcat 会调用 <strong>init()</strong> 方法来初始化这个对象。</li> \n <li><strong>处理服务：</strong>当浏览器<strong>访问 Servlet</strong> 的时候，Servlet 会调用 <strong>service()</strong> 方法处理请求。</li> \n <li><strong>销毁：</strong>当 <strong>Tomcat 关闭</strong>或者<strong>检测到 Servlet 要从 Tomcat 删除</strong>的时候，会自动调用 <strong>destroy()</strong> 方法，让该实例所占用的资源释放掉。一个 Servlet 如果长时间不被使用的话，也会被 Tomcat 自动销毁。</li> \n</ol> \n<ul> \n <li><strong>简单总结：</strong>只要访问 Servlet ，就会调用其对应的 <strong>service()</strong> 方法，<strong>init()</strong> 方法只会在第一次访问 Serlvet 的时候才会被调用。</li> \n</ul> \n<blockquote> \n <p>这一部分参考文章：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247483680&amp;idx=3&amp;sn=d5380ff58c5077271ac9c43d2d96f6c1&amp;chksm=ebd74021dca0c93733255324df8c1e522dbe36ccaf8c2c4bcca4765113a120eb9851ca0e2442#rd\">这里是链接</a></p> \n</blockquote> \n<hr> \n<h3 id=\"servlet-提供处理请求的方法\">Servlet 提供处理请求的方法</h3> \n<p><a href=\"https://www.jianshu.com/p/bbdc459b9187\">前面的文章</a>里面提到过，广义上，<strong>Servlet</strong> 即实现了 <strong>Servlet 接口</strong> 的类，当我们创建一个自定义类，实现 <strong>Servlet 接口</strong> 的时候，会发现有 5 个方法需要重写，有init【初始化】，destroy【销毁】,service【服务】,ServletConfig【Servlet配置】,getServletInfo【Serlvet信息】。</p> \n<p>这样做的话，我们每次都需要实现 5 个方法，太麻烦了！</p> \n<p>我们可以直接<strong>继承 HttpServlet</strong> 类，该类已经默认实现了 Servlet 接口中的所有方法，在编写 Servlet 的时候，你只需要<strong>重写你需要的方法</strong>就好了，并且该类还在原有 Servlet 接口上添加了一些与 HTTP 协议处理相关的方法，比 Servlet 接口的功能<strong>更强大。</strong></p> \n<ul> \n <li>Servlet 处理请求的方法一共有三种：<br> ① 实现 <strong>service()</strong> 方法。<br> ② 重写 <strong>doGet()</strong> 和 <strong>doPost()</strong> 方法，并在 <strong>doGet()</strong> 中添加一句<code>this.doPost(req, resp);</code>（因为无论是get或post请求提交的数据，处理方式都基本相同，下同）<br> ③ 重写 <strong>doGet()</strong> 和 <strong>doPost()</strong> 方法，并在 <strong>doPost()</strong> 中添加一句<code>this.doGet()(req, resp);</code></li> \n <li><strong>推荐方式①。</strong></li> \n</ul> \n<hr> \n<h3 id=\"servlet-是单例的\">Servlet 是单例的</h3> \n<h4 id=\"为什么servlet是单例的\">为什么Servlet是单例的</h4> \n<p><strong>浏览器多次对Servlet的请求，</strong>一般情况下，<strong>服务器只创建一个Servlet对象，</strong>也就是说，Servlet对象<strong>一旦创建了，</strong>就会<strong>驻留在内存中，为后续的请求做服务，直到服务器关闭。</strong></p> \n<h4 id=\"每次访问请求对象和响应对象都是新的\">每次访问请求对象和响应对象都是新的</h4> \n<p>对于<strong>每次访问请求，</strong>Servlet引擎都会<strong>创建一个新的HttpServletRequest请求对象和一个新的HttpServletResponse响应对象，</strong>然后将这<strong>两个对象作为参数传递给它调用的Servlet的service()方法，</strong>service方法再根据请求方式分别调用doXXX方法。</p> \n<h4 id=\"线程安全问题\">线程安全问题</h4> \n<p>当多个用户访问Servlet的时候，<strong>服务器会为每个用户创建一个线程。</strong>当多个用户并发访问Servlet共享资源的时候就会出现线程安全问题。</p> \n<p><strong>原则：</strong><br> 1. 如果一个变量<strong>需要多个用户共享</strong>，则应当在访问该变量的时候，<strong>加同步机制synchronized (对象){}</strong><br> 2. 如果一个变量<strong>不需要共享，</strong>则<strong>直接在 doGet() 或者 doPost()定义</strong>.这样不会存在线程安全问题</p> \n<h2 id=\"这一部分参考文章这里是链接\">&gt; 这一部分参考文章：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247483680&amp;idx=4&amp;sn=2fdf4d0075d093389c03697ebdb9f47d&amp;chksm=ebd74021dca0c937a240f47578b9c5f40093a307f6537d79d5a2fd12721c5311a9d89d5c5583#rd\">这里是链接</a></h2> \n<h3 id=\"httpservletrequest-和-httpservletresponse-对象\">HttpServletRequest 和 HttpServletResponse 对象</h3> \n<p>对于<strong>每次访问</strong>请求，<strong>Servlet引擎</strong>都会创建一个<strong>新的HttpServletRequest请求对象</strong>和一个<strong>新的HttpServletResponse响应对象</strong>，即 request 和 response 对象。</p> \n<p>既然 request 对象代表 http 请求，那么我们<strong>获取浏览器提交过来的数据，就找 request 对象</strong> 即可。response 对象代表 http 响应，那么我们<strong>向浏览器输出数据，找 response 对象</strong>即可。</p> \n<h3 id=\"httpservletrequest-常用方法\">HttpServletRequest 常用方法</h3> \n<ul> \n <li><strong>String getContextPath():</strong><br> 获取上下文路径,\n  <context path=\"上下文\" .. /></li> \n <li><strong>String getHeader(String headName):</strong><br> 根据指定的请求头获取对应的请求头的值.</li> \n <li><strong>String getRequestURI():</strong><br> 返回当期请求的资源名称. 上下文路径/资源名</li> \n <li><strong>StringBuffer getRequestURL():</strong><br> 返回浏览器地址栏的内容</li> \n <li><strong>String getRemoteAddr():</strong><br> 返回请求服务器的客户端的IP</li> \n</ul> \n<h4 id=\"获取请求参数的方法\">获取请求参数的方法：</h4> \n<ul> \n <li><strong>String getParameter(String name):</strong><br> 根据参数名称,获取对应参数的值.</li> \n <li><strong>String[] getParameterValues(String name):</strong><br> 根据参数名称,获取该参数的多个值.</li> \n <li><strong>Enumeration\n   <string>\n     getParameterNames():\n   </string></strong><br> 获取所有请求参数的名字</li> \n <li><strong>Map\n   <string,string[]>\n     getParameterMap():\n   </string,string[]></strong><br> 返回请求参数组成的Map集合.<br> <strong>key:</strong>参数名称<br> <strong>value:</strong>参数值,封装在String数组中.</li> \n</ul> \n<h3 id=\"httpservletresponse-常用方法\">HttpServletResponse 常用方法</h3> \n<ul> \n <li><strong>OutputStream getOutputStream():</strong><br> 获取字节输出流:<strong>文件下载</strong></li> \n <li><strong>Writer getWriter():</strong><br> 获取字符输出流:<strong>输出内容</strong><br> 设置文件输出的编码格式和内容类型：<code>resp.setContentType(\"text/html;charset=utf-8\");</code></li> \n</ul> \n<hr> \n<h3 id=\"get-和-post-的区别\">GET 和 POST 的区别</h3> \n<p>要知道，GET 和 POST 都是请求方式</p> \n<ul> \n <li><strong>GET：</strong><br> 浏览器器地址栏：<code>http://localhost/test.html</code><strong>?name=wmyskxz&amp;sex=male</strong><br> 这里提交了两个参数，一个是<code>name</code>属性值为<code>wmyskxz</code>，另一个是<code>sex</code>属性值为<code>male</code>，这是一种直接的请求方式，在请求资源后面跟上 <strong>?</strong> 符号与参数连接，其他的参数使用 <strong>&amp;</strong> 符号连接。</li> \n <li><p><strong>缺点：</strong><br> 1.暴露请求信息，<strong>不安全</strong><br> 2.请求信息不能超过<strong>1kb</strong>，可传输的信息有限，不能上传图片</p></li> \n <li><strong>POST：</strong><br> 浏览器地址栏：<code>http://localhost/test.html#</code></li> \n <li><p><strong>优点：</strong><br> 1.隐藏了请求信息，<strong>较安全</strong>（但仍可以通过相关工具访问到数据）<br> 2.POST 方式<strong>没有限制</strong>请求的数据大小，可以做图片的上传</p></li> \n</ul> \n<blockquote> \n <p>但并不是所有的数据都需要使用 POST 请求来完成，事实上，GET 请求方式会比 POST 请求更快，当数据小并且安全性要求不是那么高的时候，GET 仍然是很好的选择.(并且 GET 相较 POST 简单)</p> \n</blockquote> \n<hr> \n<h3 id=\"请求中文乱码的处理\">请求中文乱码的处理</h3> \n<p>在 <strong>Tomcat 服务器</strong>中，接受请求的时候，<strong>默认的编码方式为 ISO-8859-1</strong>，而该编码方式只占一个字节，不支持中文（两个字节），所以当我们做请求的时候，会出现乱码的问题</p> \n<ul> \n <li><strong>解决方案：</strong><br> 1.对乱码使用 <strong>ISO-8859-1</strong> 解码，转换成<strong>byte数组</strong>，恢复为二进制<br> <code>byte[] data = name.getBytes(\"ISO-8859-1\");</code><br> 2.对byte数组重新进行 UTF-8 编码：<br> <code>name = new String(data,\"UTF-8\");</code><br> 但是这样会出现一个问题，那就是当表单数据太多的时候，这样反复解码-编码，会很繁琐。</li> \n <li><strong>终极解决方案：</strong><br> <strong>1.对于 POST 请求：</strong><br> 设置请求的编码方式：<code>request.setCharacterEncoding(\"UTF-8\");</code><br> <strong>注意：</strong>必须在获取<strong>第一个参数之前设置</strong>，并且该方式<strong>只对 POST 方式有效。</strong><br> <strong>2.对于 GET 请求：</strong><br> 重新设置 Tomcat 的编码方式，修改 Tomcat 的配置文件:<br> <code>Tomcat根目录/conf/server.xml(修改端口的那一行)</code><br> <img src=\"http:/static/userImages/2018/04/12/4065f721-71ba-4181-aa59-5da490293f3d.png\"></li> \n</ul> \n<hr> \n<h3 id=\"servlet-细节\">Servlet 细节</h3> \n<ul> \n <li>1.一个 Servlet 可以有<strong>多个</strong> <code>&lt;url-pattern&gt;</code> ，可以使用多个资源名称找到当前的 Servlet</li> \n <li>2.配置 Servlet 可以使用<strong>通配符</strong>（*）<br> <code>*</code>表示任意字符<br> <code>/*</code>：可以使用<strong>任意的字符</strong>访问当前的 Servlet<br> <code>*.xxx</code>：如 wmyskxz.wudi</li> \n <li>3.<strong>自定义的 Servlet 的 <code>&lt;servlet-name&gt;</code> 不能够为 default ，</strong>使用它会造成项目下面的静态资源找不到，在 <code>Tomcat/conf/web.xml</code> 文件中配置一个名字为default的Servlet,该Servlet在负责访问项目下的静态资源<br> <img src=\"http:/static/userImages/2018/04/12/f9e79198-7c9a-4439-8e2c-c7153d643330.png\" alt=\"web.xml 中配置的默认项\"></li> \n <li>4.关于 <strong>Servlet 的初始化操作，</strong>如果初始化操作非常的耗时，那么第一个请求的用户的用户体验就非常差<br> <strong>解决思路：</strong>将初始化操作<strong>向前移,</strong>在服务器启动的时候执行 Servlet 的初始化<br> <img src=\"http:/static/userImages/2018/04/12/66780c95-dfa5-4217-965b-1dceee580b90.png\"><br> ---</li> \n</ul> \n<h3 id=\"通过注解配置-servlet\">通过注解配置 Servlet</h3> \n<p>这是 Servlet 3.0 提出的新特性，支持注解配置，这大大简化了我们的工作。</p> \n<p>在之前的开发工作中，我们总是去 <code>web.xml</code> 文件中进行配置，至少会出现8行：</p> \n<p><img src=\"http:/static/userImages/2018/04/12/9944586a-ebb1-4698-bcd7-bda9666def08.png\" alt=\"web.xml 中配置 Servlet\"></p> \n<p>而当一个项目中存在<strong>很多 Servlet </strong>，那么配置文件就会变得<strong>非常臃肿，不便于后期的维护，</strong>在 Servlet 3.0 推出之后，我们可以使用<strong>注解来配置 Servlet，</strong>上面 8 行的配置可以简化为下面的简单的注解：</p> \n<p><img src=\"http:/static/userImages/2018/04/12/ec1aeefc-bf79-4e39-a0d5-79a34f7c7843.png\"></p> \n<p>或者也可以使用属性 <code>value</code> 定义访问的 URL，<strong>只有 URL 这个属性是必要的，</strong><code>name</code> 是可以缺省的值，而默认的 <code>value</code> 也可以省略不写，所以可以简写成：</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"fu\">@WebServlet</span>(<span class=\"st\">\"/foreServlet\"</span>)</code></pre>\n</div> \n<hr> \n<h3 id=\"web-组件之间的跳转方式\">Web 组件之间的跳转方式</h3> \n<h4 id=\"请求转发forward\"><strong>1.请求转发（forward）</strong></h4> \n<p>又叫做<strong>直接转发方式，</strong>客户端和浏览器<strong>只发出一次请求，</strong>Servlet、HTML、JSP或其它信息资源，由<strong>第二个信息资源响应该请求，</strong>在请求对象request中，保存的对象对于<strong>每个信息资源是共享的。</strong></p> \n<p>比如：从 AServlet 请求转发到 BServlet</p> \n<p><img src=\"http:/static/userImages/2018/04/12/b62a0e1f-edab-4ac4-92f4-054e3af175f9.png\"></p> \n<ul> \n <li><p><strong>语法：</strong></p> \n  <div class=\"sourceCode\">\n   <pre class=\"sourceCode java\"><code class=\"sourceCode java\">request.<span class=\"fu\">getRequestDispatcher</span>(path).<span class=\"fu\">forward</span>(request, response);</code></pre>\n  </div> <em>参数：</em><code>path</code>，要跳转到的资源路径：<strong>上下文路径 / 资源路径</strong></li> \n <li><p><strong>特点：</strong><br> <strong>1.地址栏中的地址【不会】改变</strong><br> 通常看作是服务端的跳转<br> <strong>2.只有一个请求</strong><br> <strong>3.资源是共享的，</strong>也就是说在两个 Servlet 中可以共享请求的资源<br> 可以通过<code>request.setAttribute(String var1,Object var2)</code><strong>设置要共享的数据资源</strong>，并通过<code>request.getAttribute(String var1);</code>来<strong>获取传递的资源</strong><br> <strong>4.【可以】访问 WEB-INF 中的资源</strong><br> <strong>WEB-INF</strong> 文件夹是 Java Web 应用的<strong>默认安全目录，</strong>即客户端无法直接访问，只有服务端可以访问的目录。<br> 如果想在页面中<strong>直接访问</strong>其中的文件，<strong>必须通过web.xml文件</strong>对要访问的文件进行<strong>相应映射</strong>才能访问。<br> <strong>注意：</strong>在实际的开发中，可以把不希望用户直接访问到（通过浏览器输入地址栏）的网页放在文件夹中<strong>通过此方式访问。</strong><br> <strong>5.请求转发【不能】跨域访问</strong><br> 所谓的同域，是指<strong>域名，协议，端口均相同</strong></p></li> \n</ul> \n<h4 id=\"url-重定向redirect\">2.URl 重定向（redirect）</h4> \n<p>又叫做<strong>间接转发方式（Redirect）</strong>实际是<strong>两次HTTP请求，</strong>服务器端在响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。</p> \n<p>比如:从AServlet重定向到BServlet</p> \n<p><img src=\"http:/static/userImages/2018/04/12/83cf96f9-037d-473b-a9c5-fb7f6eb2134f.png\"></p> \n<ul> \n <li><p><strong>语法：</strong></p> \n  <div class=\"sourceCode\">\n   <pre class=\"sourceCode java\"><code class=\"sourceCode java\">response.<span class=\"fu\">sendRedirect</span>(String location);</code></pre>\n  </div> <em>参数：</em><code>location</code>，转发到的资源路径</li> \n <li><strong>特点：</strong><br> <strong>1.地址栏中的地址【会】发生改变</strong><br> 通常看作是客户端跳转<br> <strong>2.有两个请求</strong><br> <strong>3.在两个 Servlet 中不可以共享请求中的数据</strong><br> <strong>4.最终的响应由 BServlet 来决定，和 AServlet 没有关系</strong><br> <strong>5.【不可以】访问 WEB-INF 中的资源</strong><br> <strong>6.请求转发【能】跨域访问</strong><br> 就像是在网页中点开了新的链接一样</li> \n <li><p><strong>总结：</strong>URL 重定向相当于是将重定向的资源路径，重新复制到浏览器地址栏中按下回车一样，<strong>重新发送一次新的请求。</strong></p></li> \n</ul> \n<h4 id=\"请求包含include\">3.请求包含（include）</h4> \n<hr> \n<h3 id=\"mvc-模式\">MVC 模式</h3> \n<p>MVC 是一种分层的设计模式 。</p> \n<ul> \n <li><strong>M 代表 模型（Model）</strong><br> 模型是什么呢？ 模型就是<strong>数据，</strong>就是dao,bean</li> \n <li><strong>V 代表 视图（View）</strong><br> 视图是什么呢？ 就是网页, JSP，用来<strong>展示模型中的数据</strong></li> \n <li><strong>C 代表 控制器（controller)</strong><br> 控制器是什么？ <strong>控制器的作用就是把不同的数据(Model)，显示在不同的视图(View)上。</strong></li> \n</ul> \n<p>这部分可以参考一下<a href=\"http://how2j.cn/k/mvc/mvc-tutorials/561.html\">这里</a></p> \n<blockquote> \n <p>欢迎转载，转载请注明出处！<br> @我没有三颗心脏<br> CSDN博客：<a href=\"http://blog.csdn.net/qq939419061\" class=\"uri\">http://blog.csdn.net/qq939419061</a><br> 简书：<a href=\"http://www.jianshu.com/u/a40d61a49221\" class=\"uri\">http://www.jianshu.com/u/a40d61a49221</a></p> \n</blockquote>', '14', null);
INSERT INTO `t_blog` VALUES ('165', '谈程序员如何做好业务', '谈程序员如何做好业务', '2018-04-12 11:19:33', '1', '0', '<h2><span style=\"color: #800000\">前言</span></h2> \n<p>　　技术能做两种事情，通过技术实现业务和通过技术支持技术。我们大部分时候做的是前者，养活我们的大部分也是业务。&nbsp; 近两个月，作为项目负责人角色从0到1经历了新项目的几个版本迭代，跨入了部分新领域，也有一定收获，对如何做好业务也比以前有了更深的理解，所以作此博客记录项目中经历的事情，和自己对业务的认识。</p> \n<h2><span style=\"color: #800000\">背景</span></h2> \n<p>　　从原公司转到兄弟公司，负责一个要求快速产出的新项目，团队人员也是从其他项目组过来支援的。&nbsp; 临近年关，2月初开始开发，3月初上线，中间还有过年的时间。&nbsp; 公司很重视，不能延期。&nbsp; 事态紧迫，研发部门领导综合考虑，过年加班才能赶上进度，因此在一开始就找到愿意过年加班的同事，并且向公司上层申请了加班奖金。&nbsp; 技术方面，需要申请两个公众号，公众号申请需要时间；涉及和另一个系统打通，需要对方支持和开发对接模块，文章后面称之为B系统。</p> \n<h2><span style=\"color: #800000\">面临一些问题</span></h2> \n<ul> \n <li>我对B系统不熟悉</li> \n <li>对团队人员不熟悉</li> \n <li>对公司的框架不熟悉</li> \n</ul> \n<h2><span style=\"color: #800000\">反正就是干</span></h2> \n<p>　　不熟悉的都可以很快熟悉起来，同事也可以协助自己。这种境况下，是一种挑战，也是能逼迫自己去更快融入环境。不怂～</p> \n<p>　　<img src=\"http:/static/userImages/2018/04/12/3dcac896-58ed-4e5d-bd34-11346156404c.png\" alt=\"\"></p> \n<p>&nbsp;</p> \n<h2><span style=\"color: #800000\">砍需求</span></h2> \n<p>　　团队合计了一下，按照初版的需求，即便过年加班也做不完，不能保证3月初上线，于是我们还是和需求方讨论，把非核心的需求一个个砍了，砍到最后我们觉得还比较轻松了，但实际的工作量仍然很大。&nbsp; 我们往往在拿到一个需求的时候，第一反应都会低谷它带来的工作量。&nbsp; 因为细节还未完善，很多事情在开发过程中才会发现、沟通、解决。&nbsp; 当我们把零散的功能和页面做完，最后整合直到完全跑通整个流程，这期间也会花费很多时间。&nbsp; 无论如何，项目千万不能延期，要延期也不能是因为前期估算不准导致的，一旦估算时间定了，跪着也要如期上线。</p> \n<p>&nbsp;</p> \n<h2><span style=\"color: #800000\">思维转化</span></h2> \n<p>　　最开始，在某些方面，自己都有一点缺少主动性。&nbsp; 当时几个同事在旁边不远讨论B系统需求的时候没叫上我。&nbsp; 也是因为才来，其他同事对我不熟悉，我自己包括大家都没有意识到我是项目负责人，我对自己的边界也有点模糊，我认为主要还是技术负责人。&nbsp; 看到他们在讨论，自己觉得好像没叫我，应该没我什么事，领导看到了，说我是负责人，那么多人讨论我得去听。&nbsp; 到后来，我也就明白了，涉及到负责的项目不管是什么事情，我都得站出来，否则怎么能称之为负责人，同事也不会信服这样的负责人。</p> \n<p>　　当一个技术人员，开发了一个系统，并且更全面的了解需求的时候，那他对整个系统的理解应该是超越产品的，我认为。&nbsp; 在项目开发过程中，我和产品发生了小小的分歧，其实就是一个文案的问题，那个文案可能会造成混乱或者误解。&nbsp; 从产品的角度，是我们太程序员思维了，作为销售渠道是能理解的，从我的角度，虽然能理解，但是概念有重合，需要思维转化，不直观，容易造成系统使用错误。&nbsp; 不纠结这个细节，问题在于我的矛盾，因为我平时做事想的多，提的多，但也知道自己的想法不一定都是对的，又出现了双方都不能说服对方的情况。&nbsp; 我后来想了下，如果对方已经把理由说清楚了，自己觉得自己的方案还是更好，那自己又有拍板的权利，就拍板吧。&nbsp; 如果对方有那个权利，就让对方拍板吧，否则就太浪费时间和精力了。&nbsp; 拍板之前至少要思考对方的想法，不能完全自己专断，同时也要时刻对自己保持怀疑。&nbsp;</p> \n<p>&nbsp;</p> \n<h2><span style=\"color: #800000\">加班</span></h2> \n<p>　　也是为了保证进度，今年过年团队部分同事，我们只休息了3天，公司放假是9天。&nbsp; 牺牲了假期，但是在上线后，我们确实也得到了相应的奖金。&nbsp; 领导说到做到，公司也体恤员工，这样的加班至少对我来说也是值得的。&nbsp; 加班这个事情，对我们团队来说，是一直保持一种可持续化发展的态度。&nbsp; 996是底线，一般都没有打破过，大部分的时间不会达到996的水平，&nbsp; 通宵就更少了。&nbsp; 但是团队的战力并不差，我觉得这样的状态刚刚好。</p> \n<p>&nbsp;</p> \n<h2><span style=\"color: #800000\">市场部沟通</span></h2> \n<p>　　在项目第一版本上线以后，我们很快开始规划第二版，这次我和产品同事参加了和市场部门的需求讨论。&nbsp; 市场部门的需求一般要求快快快，他们面临业绩压力，自然这种压力也会倾斜到我们研发部门。&nbsp; 大家应该也知道一些段子：销售出去卖产品，给客户说一周之类就能搞定，然后签了合同，最后告诉研发部门，合同已经签了，预订金已收，时间就这个点，剩下一堆想离职的程序猿......&nbsp; 开个玩笑，当然我们没有出现这种事情~&nbsp; 总之我们需要和市场部门的对接人保持紧密沟通。 这次我们是和市场部门领导沟通的需求，连着几天拉着过需求，总体还算顺利，梳理的也还是很清楚。&nbsp; 其实和对方部门领导直接沟通，算成本比较低的。&nbsp; 如果说对方领导派一个中间人来对接的话，这对我们的工作量、时间安排、心理压力都会增加很多，毕竟他不能拍板，需求也不是直接来自于他。&nbsp;&nbsp;</p> \n<p>　　因为和B系统强相关的缘故，市场部门给B系统提需求的时候，不知道涉及到我们系统，在一次沟通中，发现了一个需要和B系统对接的新需求问题，庆幸的是当时B系统的新需求和我们的新需求都没上线，所以还没造成严重的生产事故，这次以后，B系统有新需求我都得了解了，要避免系统间的风险。</p> \n<p>　　</p> \n<h2><span style=\"color: #800000\">变化</span></h2> \n<p>　　迭代了几个小版本后，现在因为公司战略需要，团队被分散到其他项目做支持，项目迭代会暂停一段时间。&nbsp; 但是项目依旧要运营，B系统还会迭代，B系统的迭代需求可能和我们的系统冲突，或者造成bug。&nbsp; 所以B系统一旦有迭代，我都得了解他们的需求，评估对我们系统是否有影响。&nbsp;</p> \n<p>&nbsp;</p> \n<h2><span style=\"color: #800000\">结语</span></h2> \n<p>　　业务是饭碗，业务做不好，其他什么都别谈。&nbsp; 两年多以前有一个项目，因为自己的问题，导致了延期，对自己各方面的影响都非常不好，于是决心再也不能犯同样的错误了。&nbsp; 对于任何人而言，个人原因延期都是职场大忌，犯不得啊～&nbsp; 对于初中级前端要想有更大的提升，业务方面的能力要达到游刃有余才行，否则飞上去也会摔下来。&nbsp; 做好业务的标准是什么呢？我也不知道，列出一些我能很快想到的点吧：</p> \n<ul> \n <li>是否延期</li> \n <li>是否了解整个系统和细节</li> \n <li>是否在写代码以前就能预见到细节问题</li> \n <li>核心逻辑能否一次性思考完善，不出逻辑漏洞</li> \n <li>带动其他同事，推动整个业务前进，正能量</li> \n <li>同样的错误最多只犯一次</li> \n <li>产品思维，关注用户体验</li> \n <li>合理的时间，可持续性，工作量饱和</li> \n <li>及时汇报</li> \n</ul> \n<p>&nbsp;</p> \n<p>　　<span style=\"color: #808080\">都看到这里了，要不点个赞～</span>　　</p> \n<p>　　<img src=\"http:/static/userImages/2018/04/12/4fa865e5-7283-43de-b2fc-1edde90477aa.png\" alt=\"\" width=\"271\" height=\"219\"></p> \n<p>&nbsp;</p>', '14', null);
INSERT INTO `t_blog` VALUES ('166', '从抖音关闭评论，看服务治理的重要性', '从抖音关闭评论，看服务治理的重要性', '2018-04-12 11:19:33', '0', '0', '<p>4月10日，广电总局责令今日头条永久关停「内涵段子」等低俗视听产品。</p> \n<p>该消息传出后，大量内涵段子用户涌入抖音，以统一头像和内涵段子风格的评论迅速占领抖音热门视频评论区。</p> \n<p>而就在昨晚 23 点 40 左右，抖音关闭了评论的所有功能。虽然页面显示有几千条评论，但是当点开评论的时候却发现没有评论内容。</p> \n<p>之后抖音发布官方声明，表示服务器维护停止直播和评论功能，等待升级完成之后再重新开放。而在 4 月 11 日，今日头条官方公众号发表了一篇致歉信。今日头条创始人张一鸣表示，接受处罚，所有责任在自己。接下来，要将正确的价值观融入技术和产品，并要整改社区秩序，优化社区氛围。</p> \n<p>作为技术人员，我不禁在想：抖音的用户量如此之大，技术上如何能够如此快速地关闭所有评论功能？</p> \n<p>我们可以猜想，以抖音这种数量级的用户，抖音后台早已实现了各个功能模块的服务化拆分，并且进行了服务治理。而从今日头条对外的技术分享来看，今日头条确实是这么做的。</p> \n<blockquote> \n <p>我们使用 Go 语言研发了内部的微服务框架 kite，协议上完全兼容 Thrift。以五元组为基础单元，我们在 kite 框架上集成了服务注册和发现，分布式负载均衡，超时和熔断管理，服务降级，Method 级别的指标监控，分布式调用链追踪等功能。目前统一使用 kite 框架开发内部 Go 语言的服务，整体架构支持无限制水平扩展。</p> \n</blockquote> \n<p>从上面的技术分享片段，我们可以知道今日头条内部使用了 Go 语言开发的 Kite 微服务框架，并且实现了服务监控、服务熔断、服务降级、服务指标监控等功能。</p> \n<p>所以我们可以猜想：当 4 月 10 日，广电总局宣布勒令关闭内涵段子，大量段友涌入抖音评论区的时候，抖音评论接口调用数暴增，相应的服务监控报警，相关的技术人员收到信息进行紧急处理。此时技术人员便会排查评论接口调用暴增的原因，并且商量对应的对策。</p> \n<p>到了 4 月 10 日 23 点 40 分左右，或许因为担心事态进一步发酵，所以抖音选择将评论接口进行服务熔断。所有请求评论列表的请求，全部返回空的评论数据。</p> \n<p><strong>其实所谓的「服务熔断」指的就是当某个指标达到一定程度时，服务接口自动熔断，对所有请求该接口的消费者都返回一个默认值。</strong>例如抖音一定时间内评论接口调用数达到100万次，自动返回空的评论数据。当然了，服务熔断也可以手动触发。</p> \n<p>现在回头想一想，抖音之所以能快速地处理好这件事情，很大一部分是服务治理的功劳。试想一下，如果没有服务监控，那么技术人员就无法第一时间获取异常信息。那段友就会在抖音评论区一直刷屏，这时时态很可能得不到平息，反而会越演越烈，抖音很可能会成为下一个内涵段子，这对今日头条的打击将是巨大的。</p> \n<p>正是因为服务治理对于突发情况的处理效果出众，所以当一个公司产品达到一定数量级之后，服务治理一定是绕不过的一个话题。</p> \n<p>而服务治理不仅仅在处理突发事件效果出众，对于线上问题处理，服务监控也能发挥很大的作用。笔者之前的公司有一个完善的服务监控系统，它能统计各个接口的异常率，并且能针对每个异常请求显示出完整的分布式调用链，这对于开发人员排查线上问题非常有用。</p> \n<p>服务监控、服务熔断其实只是服务治理很小的一部分，本文也只是简略地提了一下。希望这篇文章，能让更多的技术人了解到热点背后的技术，提炼出对于技术更深刻的理解。</p> \n<h1 id=\"文章首发于微信公众号陈树义专注于-java-技术分享的社区点击链接扫描二维码与500位小伙伴一起共同进步微信公众号二维码-httpp3npq6ecr.bkt.clouddn.comblogchenshuyi_gongzhonghao_guide_full.jpg\">文章首发于微信公众号「陈树义」，专注于 Java 技术分享的社区。点击链接扫描二维码，与500位小伙伴一起共同进步。<a href=\"http://p3npq6ecr.bkt.clouddn.com/blog/chenshuyi_gongzhonghao_guide_full.jpg\">微信公众号二维码 http://p3npq6ecr.bkt.clouddn.com/blog/chenshuyi_gongzhonghao_guide_full.jpg</a></h1>', '14', null);
INSERT INTO `t_blog` VALUES ('167', 'ShellCode瘦身的艺术0_HASH', 'ShellCode瘦身的艺术0_HASH', '2018-04-12 11:19:37', '0', '0', '<p><strong>写在前面的话：</strong></p> \n<p>前面几篇文章，我们介绍了如何获取kernerl32.dll导出函数地址的方法；</p> \n<p>并在此基础上，编写了ShellCode，实现了动态加载DLL以及解析API地址；</p> \n<p>但是，似乎还称不上Perfect，我们能够获取到LoadLibrary和GetProcAddress，事情就结束了吗？</p> \n<p>我们仍然需要给他们push一些个参数，那些API的名字，占用了我们ShellCode的大部分空间；(如果API较多的话)</p> \n<p>这使得我们的ShellCode看上去不那么美妙，因此，对API做HASH势在必行；</p> \n<p>那也许有朋友会问：做了HASH，总有一处还原的地方吧，如果不还原，那程序里就一定有字符串存在；否则，GetProcAddress怎么玩呢？</p> \n<p>也因此，我们对Kernel32.dll导出表的解析，就需要一般化一下了；让它不止适应于kernel32.dll，而是windows下的任何32位的PE文件；</p> \n<p>(64位类似，解析PE，都一样，笔者就拿32位举例了，有兴趣的朋友也可以自行解析)</p> \n<p>如果能够做到，那我们的HASH才会有意义，因为，ENT里就有API名字了；</p> \n<p>因此，在开始HASH运算前，我们先来搞一下之前的那部分程序；</p> \n<p><strong>零：导出表一般化解析</strong></p> \n<p>0. 先来看下PE的DOS头结构</p> \n<div class=\"cnblogs_code\"> \n <pre>typedef <span style=\"color: #0000ff\">struct</span> _IMAGE_DOS_HEADER {      <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> DOS .EXE header</span>\n    WORD   e_magic;                     <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Magic number</span>\n    WORD   e_cblp;                      <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Bytes on last page of file</span>\n    WORD   e_cp;                        <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Pages in file</span>\n    WORD   e_crlc;                      <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Relocations</span>\n    WORD   e_cparhdr;                   <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Size of header in paragraphs</span>\n    WORD   e_minalloc;                  <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Minimum extra paragraphs needed</span>\n    WORD   e_maxalloc;                  <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Maximum extra paragraphs needed</span>\n    WORD   e_ss;                        <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Initial (relative) SS value</span>\n    WORD   e_sp;                        <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Initial SP value</span>\n    WORD   e_csum;                      <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Checksum</span>\n    WORD   e_ip;                        <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Initial IP value</span>\n    WORD   e_cs;                        <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Initial (relative) CS value</span>\n    WORD   e_lfarlc;                    <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> File address of relocation table</span>\n    WORD   e_ovno;                      <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Overlay number</span>\n    WORD   e_res[<span style=\"color: #800080\">4</span>];                    <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Reserved words</span>\n    WORD   e_oemid;                     <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> OEM identifier (for e_oeminfo)</span>\n    WORD   e_oeminfo;                   <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> OEM information; e_oemid specific</span>\n    WORD   e_res2[<span style=\"color: #800080\">10</span>];                  <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Reserved words</span>\n    LONG   e_lfanew;                    <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> File address of new exe header</span>\n  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</pre> \n</div> \n<p>我们需要关注的是最后一个字段，这个里的内容是NT头的偏移，首先，看下，这个字段在本结构体的偏移60(0x3C)</p> \n<p>也就是说，[BaseAddr+0x3C]就是e_lfanew的值，因此，NT头的首地址BaseAddr+e_lfanew;</p> \n<p>那再看下NT头的结构：</p> \n<div class=\"cnblogs_code\"> \n <pre>typedef <span style=\"color: #0000ff\">struct</span><span style=\"color: #000000\"> _IMAGE_NT_HEADERS {\n    DWORD Signature;\n    IMAGE_FILE_HEADER FileHeader;\n    IMAGE_OPTIONAL_HEADER32 OptionalHeader;\n} IMAGE_NT_HEADERS32, </span>*<span style=\"color: #000000\">PIMAGE_NT_HEADERS32;\n\n</span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> NT头中的文件头20Byte</span>\ntypedef <span style=\"color: #0000ff\">struct</span><span style=\"color: #000000\"> _IMAGE_FILE_HEADER {\n    WORD    Machine;\n    WORD    NumberOfSections;\n    DWORD   TimeDateStamp;\n    DWORD   PointerToSymbolTable;\n    DWORD   NumberOfSymbols;\n    WORD    SizeOfOptionalHeader;\n    WORD    Characteristics;\n} IMAGE_FILE_HEADER, </span>*<span style=\"color: #000000\">PIMAGE_FILE_HEADER;\n\n</span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> NT头中的扩展头</span>\ntypedef <span style=\"color: #0000ff\">struct</span><span style=\"color: #000000\"> _IMAGE_OPTIONAL_HEADER {\n    </span><span style=\"color: #008000\">//</span>\n    <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> Standard fields.\n    </span><span style=\"color: #008000\">//\n</span><span style=\"color: #000000\">\n    WORD    Magic;\n    BYTE    MajorLinkerVersion;\n    BYTE    MinorLinkerVersion;\n    DWORD   SizeOfCode;\n    DWORD   SizeOfInitializedData;\n    DWORD   SizeOfUninitializedData;\n    DWORD   AddressOfEntryPoint;\n    DWORD   BaseOfCode;\n    DWORD   BaseOfData;\n\n    </span><span style=\"color: #008000\">//</span>\n    <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> NT additional fields.\n    </span><span style=\"color: #008000\">//\n</span><span style=\"color: #000000\">\n    DWORD   ImageBase;\n    DWORD   SectionAlignment;\n    DWORD   FileAlignment;\n    WORD    MajorOperatingSystemVersion;\n    WORD    MinorOperatingSystemVersion;\n    WORD    MajorImageVersion;\n    WORD    MinorImageVersion;\n    WORD    MajorSubsystemVersion;\n    WORD    MinorSubsystemVersion;\n    DWORD   Win32VersionValue;\n    DWORD   SizeOfImage;\n    DWORD   SizeOfHeaders;\n    DWORD   CheckSum;\n    WORD    Subsystem;\n    WORD    DllCharacteristics;\n    DWORD   SizeOfStackReserve;\n    DWORD   SizeOfStackCommit;\n    DWORD   SizeOfHeapReserve;\n    DWORD   SizeOfHeapCommit;\n    DWORD   LoaderFlags;\n    DWORD   NumberOfRvaAndSizes;\n    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];\n} IMAGE_OPTIONAL_HEADER32, </span>*<span style=\"color: #000000\">PIMAGE_OPTIONAL_HEADER32;\n\n\ntypedef </span><span style=\"color: #0000ff\">struct</span><span style=\"color: #000000\"> _IMAGE_DATA_DIRECTORY {\n    DWORD   VirtualAddress;\n    DWORD   Size;\n} IMAGE_DATA_DIRECTORY, </span>*<span style=\"color: #000000\">PIMAGE_DATA_DIRECTORY;\n\n</span><span style=\"color: #0000ff\">#define</span> IMAGE_NUMBEROF_DIRECTORY_ENTRIES    16</pre> \n</div> \n<p>我们要找什么呢，导出表的RVA，导出表是扩展头里的第0号元素；因此，计算出的数据目录表[导出表]相对NT头的偏移，就是0x78;</p> \n<p>至此，我们通过分析DOS头和NT头结构，得到了下面的信息：</p> \n<p>0、e_lfanew =&nbsp;[BaseAddr+0x3C]</p> \n<p>1、NTStartVA：BaseAddr + e_lfnew</p> \n<p>2、ExportStartRVA：[NTStartVA + 0x78]</p> \n<p>3、ExportStartVA：BaseAddr + ExportStartRVA</p> \n<p>到这一步，接下来就需要看下导出表的结构了</p> \n<div class=\"cnblogs_code\"> \n <pre>typedef <span style=\"color: #0000ff\">struct</span><span style=\"color: #000000\"> _IMAGE_EXPORT_DIRECTORY {\n    DWORD   Characteristics;\n    DWORD   TimeDateStamp;\n    WORD    MajorVersion;\n    WORD    MinorVersion;\n    DWORD   Name;\n    DWORD   Base;\n    DWORD   NumberOfFunctions;\n    DWORD   NumberOfNames;\n    DWORD   AddressOfFunctions;     </span><span style=\"color: #008000\">//</span><span style=\"color: #008000\"> RVA from base of image</span>\n    DWORD   AddressOfNames;         <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> RVA from base of image</span>\n    DWORD   AddressOfNameOrdinals;  <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> RVA from base of image</span>\n} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</pre> \n</div> \n<p>需要的字段，EAT/ENT/EOT，我们在上边的分析中，其实已经得到了这个导出表结构体的首地址了，就是ExportStartVA，那就简单了</p> \n<p>4、EATRVA = [ExportStartVA + 0x1C]&nbsp; -&gt; EAT = BaseAddr + EATRVA</p> \n<p>5、ENTRVA = [ExportStartVA + 0x20]&nbsp; -&gt; ENT = BaseAddr + ENTRVA</p> \n<p>6、EOTRVA = [ExportStartVA + 0x24]&nbsp; -&gt; EOT = BaseAddr + EOTRVA</p> \n<p>至此，分析结束，开始编写代码；</p> \n<p><strong>一、代码(为了便于理解，咱们封装成一些裸函数)</strong></p> \n<p>0、获取基址</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">void</span><span style=\"color: #000000\"> __declspec(naked) GetKernelBase() {\n    _asm {\n        push ebp;\n        mov ebp, esp;\n        sub esp, </span><span style=\"color: #800080\">0x0C</span><span style=\"color: #000000\">;\n        mov eax, fs:[</span><span style=\"color: #800080\">0x30</span>]; <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> PEB</span>\n        mov eax, [eax + <span style=\"color: #800080\">0xC</span>]; <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> LDR</span>\n        mov eax, [eax + <span style=\"color: #800080\">0xC</span>]; <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> InLoadOrderModuleList, exe</span>\n        mov eax, [eax]; <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> nt.dll</span>\n        mov eax, [eax]; <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> kernel32.dll</span>\n        mov eax, dword ptr ds : [eax + <span style=\"color: #800080\">0x18</span>]; <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> BaseAddr;</span>\n<span style=\"color: #000000\">        mov esp, ebp;\n        pop ebp;\n        ret;\n    }\n}</span></pre> \n</div> \n<p>1、解析导出表，部分关键代码(全部代码，考虑下，还是在我们写完HASH算法后贴出来)</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #000000\">_asm{\n        </span><span style=\"color: #0000ff\">push</span> ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> ebp, esp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">sub</span> esp, 0x10<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">push</span> ebx<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">push</span> ecx<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">push</span> esi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">push</span> edi<span style=\"color: #008000\">;\n</span><span style=\"color: #000000\">        \n        ...\n    \n        </span><span style=\"color: #0000ff\">mov</span> [ebp - 0x4], eax<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // [ebp - 0x4] -&gt; BaseAddr</span>\n        <span style=\"color: #0000ff\">mov</span> eax, [eax + 0x3C]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // e_lfanew</span>\n        <span style=\"color: #0000ff\">add</span> eax, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // NTStartVA</span>\n        <span style=\"color: #0000ff\">mov</span> eax, [eax + 0x78]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ExportStartRVA</span>\n        <span style=\"color: #0000ff\">add</span> eax, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ExportStart_VA</span>\n        <span style=\"color: #0000ff\">mov</span> ebx, [eax + 0x1C]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EATRVA</span>\n        <span style=\"color: #0000ff\">add</span> ebx, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EAT</span>\n        <span style=\"color: #0000ff\">mov</span> [ebp - 0x8], ebx<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // [ebp - 0x8] -&gt; EAT</span>\n        <span style=\"color: #0000ff\">mov</span> ebx, [eax + 0x20]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ENTRVA</span>\n        <span style=\"color: #0000ff\">add</span> ebx, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ENT</span>\n        <span style=\"color: #0000ff\">mov</span> [ebp - 0xC], ebx<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // [ebp - 0xC] -&gt; ENT</span>\n        <span style=\"color: #0000ff\">mov</span> ebx, [eax + 0x24]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EOTRVA</span>\n        <span style=\"color: #0000ff\">add</span> ebx, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EOT</span>\n        <span style=\"color: #0000ff\">mov</span> [ebp - 0x10], ebx<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // [ebp - 0x10] -&gt; EOT</span>\n<span style=\"color: #000000\">        \n        ...\n\n        </span><span style=\"color: #0000ff\">pop</span> edi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">pop</span> esi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">pop</span> ecx<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">pop</span> ebx<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> esp, ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">pop</span> ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">ret</span><span style=\"color: #008000\">;\n</span>}</pre> \n</div> \n<p>2、接下来就要考虑如何实现HASH算法了</p> \n<p>要求：尽量简单，又不失功能；(不同的API的HASH碰撞几率越小越好，同时ShellCode里，要兼顾体积)</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #000000\">/*\n* @1 API\n* @2 Length\n*/\nvoid __declspec(naked) ApiHash() {\n    _asm {\n        </span><span style=\"color: #0000ff\">push</span> ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> ebp, esp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">sub</span> esp, 0x8<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> dword ptr[ebp - 0x4], 0x6B821B17<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // Init Hash Value</span>\n        <span style=\"color: #0000ff\">mov</span> dword ptr[ebp - 0x8], <span style=\"color: #800080\">0</span><span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // Init Local Var</span>\n        <span style=\"color: #0000ff\">jmp</span> short _begin<span style=\"color: #008000\">;\n</span>\n    <span style=\"color: #008080\">_loop:</span>\n        <span style=\"color: #0000ff\">mov</span> eax, [ebp + 0x8]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // eax = srcApi</span>\n        <span style=\"color: #0000ff\">add</span> eax, 0x1<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // eax = srcApi + 1</span>\n        <span style=\"color: #0000ff\">mov</span>[ebp + 0x8], eax<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // srcApi++</span>\n        <span style=\"color: #0000ff\">mov</span> ecx, [ebp - 0x8]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ecx = i</span>\n        <span style=\"color: #0000ff\">add</span> ecx, 0x1<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ecx += 1</span>\n        <span style=\"color: #0000ff\">mov</span>[ebp - 0x8], ecx<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // i++</span>\n\n    <span style=\"color: #008080\">_begin:</span>\n        <span style=\"color: #0000ff\">mov</span> edx, [ebp - 0x8]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // edx = i</span>\n        <span style=\"color: #0000ff\">cmp</span> edx, [ebp + 0xC]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // edx vs len</span>\n        <span style=\"color: #0000ff\">jnb</span> short _end<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // if (edx &gt;= len) exit;</span>\n        <span style=\"color: #0000ff\">mov</span> eax, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // eax = Hash</span>\n        <span style=\"color: #0000ff\">shl</span> eax, 0x5<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // eax = Hash &lt;&lt; 5</span>\n        <span style=\"color: #0000ff\">mov</span> ecx, [ebp + <span style=\"color: #800080\">8</span>]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ecx = srcApi</span>\n        <span style=\"color: #0000ff\">movsx</span> edx, byte ptr[ecx]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // edx = *srcApi</span>\n        <span style=\"color: #0000ff\">add</span> eax, edx<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // eax = Hash &lt;&lt; 5 + *srcApi</span>\n        <span style=\"color: #0000ff\">mov</span> ecx, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ecx = Hash</span>\n        <span style=\"color: #0000ff\">shr</span> ecx, 0x2<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ecx = Hash &gt;&gt; 2</span>\n        <span style=\"color: #0000ff\">add</span> eax, ecx<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // eax = Hash &lt;&lt; 5 + *srcApi + Hash &gt;&gt; 2</span>\n        <span style=\"color: #0000ff\">xor</span> eax, [ebp - 0x4]<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span>[ebp - 0x4], eax<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // Hash ^= (Hash &lt;&lt; 5 + *srcApi + Hash &gt;&gt; 2);</span>\n        <span style=\"color: #0000ff\">jmp</span> short _loop<span style=\"color: #008000\">;\n</span>\n    <span style=\"color: #008080\">_end:</span>\n        <span style=\"color: #0000ff\">mov</span> eax, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // eax = Hash</span>\n        <span style=\"color: #0000ff\">mov</span> esp, ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">pop</span> ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">ret</span> 0x8<span style=\"color: #008000\">;\n</span><span style=\"color: #000000\">    }\n}</span></pre> \n</div> \n<p>3、既然HASH算法也有了，在开始编写获取API的函数之前，先实现一个获取字符串长度的函数；</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #000000\">/*\n * @ String\n */\nvoid __declspec(naked) asmstrlen() {\n    _asm {\n        </span><span style=\"color: #0000ff\">push</span> ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> ebp, esp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">sub</span> esp, 0x4<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> dword ptr [ebp - 0x4], <span style=\"color: #800080\">0</span><span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">jmp</span> short _begin<span style=\"color: #008000\">;\n</span>\n    <span style=\"color: #008080\">_loop:</span>\n        <span style=\"color: #0000ff\">mov</span> eax, [ebp + 0x8]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // eax = String</span>\n        <span style=\"color: #0000ff\">add</span> eax, 0x1<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // eax = String + 1</span>\n        <span style=\"color: #0000ff\">mov</span> [ebp + 0x8], eax<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // String++</span>\n        <span style=\"color: #0000ff\">mov</span> ecx, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ecx = i</span>\n        <span style=\"color: #0000ff\">add</span> ecx, 0x1<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ecx += 1</span>\n        <span style=\"color: #0000ff\">mov</span> [ebp - 0x4], ecx<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // i++</span>\n\n    <span style=\"color: #008080\">_begin:</span>\n        <span style=\"color: #0000ff\">mov</span> ecx, [ebp + <span style=\"color: #800080\">8</span>]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ecx = String</span>\n        <span style=\"color: #0000ff\">movsx</span> edx, byte ptr [ecx]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // edx = *String</span>\n        <span style=\"color: #0000ff\">cmp</span> edx, <span style=\"color: #800080\">0</span><span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">je</span> _end<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">jmp</span> _loop<span style=\"color: #008000\">;\n</span>\n    <span style=\"color: #008080\">_end:</span>\n        <span style=\"color: #0000ff\">mov</span> eax, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // eax = len</span>\n        <span style=\"color: #0000ff\">mov</span> esp, ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">pop</span> ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">ret</span> 0x4<span style=\"color: #008000\">;\n</span><span style=\"color: #000000\">    }\n}</span></pre> \n</div> \n<p>4、接下来，就要编写通过HASH获取API地址的函数了</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #000000\">/* \n * @1 BaseAddr\n * @2 HASH\n */\nvoid __declspec(naked) GetHASHAPIAddr() {\n    _asm {\n        </span><span style=\"color: #0000ff\">push</span> ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> ebp, esp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">sub</span> esp, 0x14<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">push</span> esi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">push</span> edi<span style=\"color: #008000\">;\n</span>\n        <span style=\"color: #0000ff\">mov</span> eax, [ebp + <span style=\"color: #800080\">8</span>]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // BaseAddr</span>\n        <span style=\"color: #0000ff\">mov</span> [ebp - 0x4], eax<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> eax, [eax + 0x3C]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // e_lfanew</span>\n        <span style=\"color: #0000ff\">add</span> eax, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // NTStartVA</span>\n        <span style=\"color: #0000ff\">mov</span> eax, [eax + 0x78]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ExportStartRVA</span>\n        <span style=\"color: #0000ff\">add</span> eax, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ExportStart_VA</span>\n        <span style=\"color: #0000ff\">mov</span> ebx, [eax + 0x1C]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EATRVA</span>\n        <span style=\"color: #0000ff\">add</span> ebx, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EAT</span>\n        <span style=\"color: #0000ff\">mov</span> [ebp - 0x8], ebx<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // [ebp - 0x8] -&gt; EAT</span>\n        <span style=\"color: #0000ff\">mov</span> ebx, [eax + 0x20]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ENTRVA</span>\n        <span style=\"color: #0000ff\">add</span> ebx, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ENT</span>\n        <span style=\"color: #0000ff\">mov</span> [ebp - 0xC], ebx<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // [ebp - 0xC] -&gt; ENT</span>\n        <span style=\"color: #0000ff\">mov</span> ebx, [eax + 0x24]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EOTRVA</span>\n        <span style=\"color: #0000ff\">add</span> ebx, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EOT</span>\n        <span style=\"color: #0000ff\">mov</span> [ebp - 0x10], ebx<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // [ebp - 0x10] -&gt; EOT</span>\n\n        <span style=\"color: #0000ff\">xor</span> ebx, ebx<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> eax, [eax + 0x18]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // NumOfNames</span>\n        <span style=\"color: #0000ff\">mov</span> [ebp - 0x14], eax<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">cld</span><span style=\"color: #008000\">;\n</span>\n    <span style=\"color: #008080\">_ENT_FIND:</span>\n        <span style=\"color: #0000ff\">mov</span> esi, [ebp - 0xC]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ENTStartVA</span>\n        <span style=\"color: #0000ff\">mov</span> esi, [esi + <span style=\"color: #800080\">4</span> * ebx]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ENTContentRVA</span>\n        <span style=\"color: #0000ff\">add</span> esi, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // ENTContentVA</span>\n        <span style=\"color: #0000ff\">push</span> esi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">push</span> esi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">call</span> asmstrlen<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">pop</span> esi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">push</span> eax<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">push</span> esi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">call</span> ApiHash<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> edi, [ebp + 0xC]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // HASH</span>\n        <span style=\"color: #0000ff\">cmp</span> eax, edi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">je</span> _ENT_OK<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">inc</span> ebx<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> eax, [ebp - 0x14]<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">dec</span> eax<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> [ebp - 0x14], eax<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">cmp</span> eax, <span style=\"color: #800080\">0</span><span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">jg</span> _ENT_FIND<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">jmp</span> _ENT_END<span style=\"color: #008000\">;\n</span>\n    <span style=\"color: #008080\">_ENT_OK:</span>\n        <span style=\"color: #0000ff\">mov</span> ecx, [ebp - 0x10]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EOTStartVA</span>\n        <span style=\"color: #0000ff\">mov</span> ecx, [ecx + <span style=\"color: #800080\">2</span> * ebx]<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">and</span> ecx, 0xFFFF<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> esi, [ebp - 0x8]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EATStartVA</span>\n        <span style=\"color: #0000ff\">mov</span> eax, [esi + <span style=\"color: #800080\">4</span> * ecx]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EAT Address RVA</span>\n        <span style=\"color: #0000ff\">add</span> eax, [ebp - 0x4]<span style=\"color: #008000\">;</span><span style=\"color: #008000\"> // EAT Address VA</span>\n\n    <span style=\"color: #008080\">_ENT_END:</span>\n        <span style=\"color: #0000ff\">pop</span> edi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">pop</span> esi<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">mov</span> esp, ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">pop</span> ebp<span style=\"color: #008000\">;\n</span>        <span style=\"color: #0000ff\">ret</span> 0x8<span style=\"color: #008000\">;\n</span><span style=\"color: #000000\">    }\n}</span></pre> \n</div> \n<p>&nbsp;我们只需要事先准备好需要的API的HASH值，就可以了，下面让我们来测试下；</p> \n<p>5、测试</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">int</span> main(<span style=\"color: #0000ff\">int</span> argc, <span style=\"color: #0000ff\">char</span>**<span style=\"color: #000000\"> argv) {\n    DWORD LoadLibAddr </span>= <span style=\"color: #800080\">0</span><span style=\"color: #000000\">;\n    _asm {\n        call GetKernelBase;\n        push </span><span style=\"color: #800080\">0x28182EF6</span>; <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> LoadLibrayA HASH</span>\n<span style=\"color: #000000\">        push eax;\n        call GetHASHAPIAddr;\n        mov LoadLibAddr, eax;\n    }\n\n    printf(</span><span style=\"color: #800000\">\"</span><span style=\"color: #800000\">LoadLibrary[0x%X]\\n</span><span style=\"color: #800000\">\"</span><span style=\"color: #000000\">, LoadLibAddr);\n\n    getchar();\n\n    </span><span style=\"color: #0000ff\">return</span> <span style=\"color: #800080\">0</span><span style=\"color: #000000\">;\n}</span></pre> \n</div> \n<p><img src=\"http:/static/userImages/2018/04/12/9b36c3a8-d3d8-45c0-974a-4532a1adb9b7.png\" alt=\"\"></p> \n<p>我们在调试器中输入这个地址：</p> \n<p><img src=\"http:/static/userImages/2018/04/12/0cfab458-008e-4fdb-98d8-96e901f91a4a.png\" alt=\"\"></p> \n<p>可以看到，获取到了这个函数的地址；</p> \n<p>获取有同学会说，这个是在kernel32.dll里的，其他dll里的函数也可以吗；当然了，看我们的GetHashAPIAddr参数就知道了；</p> \n<p>来代码吧，搞一个MessageBox的函数，这个是在user32.dll里的，见代码，运行后会弹框，证明就成功了；</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">int</span> main(<span style=\"color: #0000ff\">int</span> argc, <span style=\"color: #0000ff\">char</span>**<span style=\"color: #000000\"> argv) {\n    </span><span style=\"color: #0000ff\">char</span> srcDll[] = <span style=\"color: #800000\">\"</span><span style=\"color: #800000\">user32.dll</span><span style=\"color: #800000\">\"</span><span style=\"color: #000000\">;\n    DWORD LoadLibAddr </span>= <span style=\"color: #800080\">0</span><span style=\"color: #000000\">;\n\n    _asm {\n        call GetKernelBase;\n        push </span><span style=\"color: #800080\">0x28182EF6</span>; <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> LoadLibrayA HASH</span>\n<span style=\"color: #000000\">        push eax;\n        call GetHASHAPIAddr;\n        mov LoadLibAddr, eax;\n\n        push esi;\n        mov esi, eax;\n        lea eax, srcDll;\n        push eax;\n        call esi;\n        push </span><span style=\"color: #800080\">0x564B6854</span>; <span style=\"color: #008000\">//</span><span style=\"color: #008000\"> MessageBoxA HASH</span>\n<span style=\"color: #000000\">        push eax;\n        call GetHASHAPIAddr;\n\n        push </span><span style=\"color: #800080\">0</span><span style=\"color: #000000\">;\n        push </span><span style=\"color: #800080\">0</span><span style=\"color: #000000\">;\n        push </span><span style=\"color: #800080\">0</span><span style=\"color: #000000\">;\n        push </span><span style=\"color: #800080\">0</span><span style=\"color: #000000\">;\n        call eax;\n    }\n\n    printf(</span><span style=\"color: #800000\">\"</span><span style=\"color: #800000\">LoadLibraryA[0x%X]\\n</span><span style=\"color: #800000\">\"</span><span style=\"color: #000000\">, LoadLibAddr);\n\n    getchar();\n\n    </span><span style=\"color: #0000ff\">return</span> <span style=\"color: #800080\">0</span><span style=\"color: #000000\">;\n}</span></pre> \n</div> \n<p><img src=\"http:/static/userImages/2018/04/12/c1f0af52-b9af-4530-80db-97b4d42e501e.png\" alt=\"\"></p> \n<p>至此，我们的API算是都准备好了，通过实现HASH算法，我们去掉了占用体积过大的API字符串，瘦身的目的达到了；</p> \n<p>在后续的文章中，笔者将带领大家一起分析ShellCode中的截断问题，敬请期待；</p>', '14', null);
INSERT INTO `t_blog` VALUES ('168', '推荐几个IDEA插件，Java开发者撸码利器。', '推荐几个IDEA插件，Java开发者撸码利器。', '2018-04-12 11:20:13', '1', '0', '<h2 id=\"2-JRebel-for-IntelliJ\">这里只是推荐一下好用的插件，具体的使用方法不一一详细介绍。&nbsp;</h2> \n<h2>JRebel for IntelliJ</h2> \n<p>一款热部署插件，只要不是修改了项目的配置文件，用它都可以实现热部署。收费的，破解比较麻烦。不过功能确实很强大。算是开发必备神器了。热部署快捷键是control+F9/command+F9。</p> \n<h2>.ignore</h2> \n<p>git提交时过滤掉不需要提交的文件，很方便，有些本地文件是不需要提交到Git上的。</p> \n<h2>CamelCase</h2> \n<p>将不是驼峰格式的名称，快速转成驼峰格式，安装好后，选中要修改的名称，按快捷键shift+alt+u。</p> \n<h2>Lombok plugin</h2> \n<p>开发神器，可以简化你的实体类，让你i不再写get/set方法，还能快速的实现builder模式，以及链式调用方法，总之就是为了简化实体类而生的插件。</p> \n<h2>Mybatis plugin</h2> \n<p>可以在mapper接口中和mapper的xml文件中来回跳转，就想接口跳到实现类那样简单。</p> \n<h2>codehelper.generator</h2> \n<p>可以让你在创建一个对象并赋值的时候，快速的生成代码，不需要一个一个属性的向里面set,根据new关键字，自动生成掉用set方法的代码，还可以一键填入默认值。</p> \n<div class=\"page__content\"> \n <div class=\"g-container\"> \n  <div class=\"g-row plugin-content\"> \n   <div class=\"g-col-8 _md-12\"> \n    <div class=\"plugin-content__description article-content\"> \n     <p>GenAllSetter 特性</p> \n     <ul> \n      <li>在Java方法中, 根据&nbsp;<code>new</code>&nbsp;关键词, 为Java Bean 生成所有Setter方法。</li> \n      <li>按GenAllSetter键两次, 会为Setter方法生成默认值。</li> \n      <li>可在<code>Intellij Idea</code>中为<code>GenAllSetter</code>设置快捷键。</li> \n      <li>如何使用: \n       <ul> \n        <li>将光标移动到&nbsp;<code>new</code>&nbsp;语句的下一行。</li> \n        <li>点击主菜单Tools-&gt; Codehelper-&gt; GenAllSetter, 或者按下<code>GenAllSetter</code>快捷键。</li> \n       </ul> <p>GenDaoCode 特性</p> \n       <ul> \n        <li> <p>根据Pojo 文件一键生成 Dao，Service，Xml，Sql文件。</p> </li> \n        <li> <p>Pojo文件更新后一键更新对应的Sql和mybatis xml文件。</p> </li> \n        <li> <p>提供insert，insertList，update，select，delete五种方法。</p> </li> \n        <li> <p>能够批量生成多个Pojo的对应的文件。</p> </li> \n        <li> <p>自动将pojo的注释添加到对应的Sql文件的注释中。 </p> </li> \n        <li> <p>丰富的配置，如果没有配置文件，则会使用默认配置。</p> </li> \n        <li> <p>可以在Intellij Idea中快捷键配置中配置快捷键。</p> </li> \n        <li> <p>目前支持MySQL + Java，后续会支持更多的DB。</p> </li> \n        <li> <p>如果喜欢我们的插件，非常感谢您的分享。</p> </li> \n       </ul> <p>GenDaoCode 使用方法</p> \n       <ul> \n        <li> <p>主菜单Tools-&gt; Codehelper-&gt; GenDaoCode 按键便可生成代码。</p> </li> \n        <li> <p>方法一：点击GenDaoCode，然后根据提示框输入Pojo名字，多个Pojo以 | 分隔。</p> </li> \n        <li> <p>Codehelper Generator会根据默认配置为您生成代码。</p> </li> \n        <li> <p>方法二：在工程目录下添加文件名为codehelper.properties的文件。</p> </li> \n        <li> <p>点击GenDaoCode，Codehelper Generator会根据您的配置文件为您生成代码</p> </li> \n       </ul> </li> \n     </ul> \n    </div> \n    <div class=\"margin-top-vertical-unit\"> \n     <div class=\"js-plugin-carousel plugin-carousel _initialized jb-carousel\"> \n      <div class=\"jb-carousel__list _draggable\"> \n       <div class=\"jb-carousel__track\"> \n        <div class=\"jb-carousel__slide _current _active\" data-slick-index=\"0\">\n         <a class=\"js-popup position-relative fs-lightbox-element\" href=\"http://plugins.jetbrains.com/files/8640/screenshot_16302.png\" data-lightbox-gallery=\"gallery\"><img src=\"http://plugins.jetbrains.com/files/8640/screenshot_16302.png\" alt=\"Screenshot #16302\"></a>\n        </div> \n        <div class=\"jb-carousel__slide\" data-slick-index=\"1\">\n         &nbsp;\n        </div> \n        <div class=\"jb-carousel__slide _cloned\" data-slick-index=\"2\">\n         <a class=\"js-popup position-relative fs-lightbox-element\" href=\"http://plugins.jetbrains.com/files/8640/screenshot_16302.png\" data-lightbox-gallery=\"gallery\"><img src=\"http://plugins.jetbrains.com/files/8640/screenshot_16302.png\" alt=\"Screenshot #16302\"></a>\n        </div> \n       </div> \n      </div> \n     </div> \n    </div> \n   </div> \n  </div> \n </div> \n</div> \n<h2>下面几个是装X神器了（让你的开发工具变得靓丽起来）</h2> \n<h2>Material Theme UI</h2> \n<p>这是一款主题插件，可以让你的ide的图标变漂亮，配色搭配的很到位，还可以切换不同的颜色，甚至可以自定义颜色。默认的配色就很漂亮了，如果需要修改配色，可以在工具栏中Tools-&gt;Material Theme然后修改配色等。</p> \n<h2>Background image Plus</h2> \n<p>这是一款可以设置idea背景图片的插件，不但可以设置固体的图片，还可以设置一段时间后随机变化背景图片，以及设置图片的透明度等等。</p> \n<h2>active-power-mode</h2> \n<p>这是一款让你在编码的时候，整个屏幕都为之颤抖的插件。</p> \n<p><img src=\"http:/static/userImages/2018/04/12/39158221-0a0e-4d36-873f-ca1598d5dbf7.gif\" alt=\"\"></p> \n<h2 id=\"TOP-3-Nyan-progress-bar\">Nyan progress bar</h2> \n<p>这是一个将你idea中的所有的进度条都变成萌新动画的小插件。</p> \n<p><img src=\"http:/static/userImages/2018/04/12/e08aab21-8a87-479f-9ace-2d670e2cfc9c.png\" alt=\"\"></p> \n<h2>总结</h2> \n<p>好的开发工具可以提高开发效率，所以的能让自己提高效率，把时间节省出来去学习，去提升自己。这些插件只是日常开发当中用到的一些，等到以后再发现了新的好玩的有意思，和提高工作效率的插件，继续分享出来。</p> \n<div class=\"page__content\">\n &nbsp;\n</div> \n<div class=\"footer _small\">\n &nbsp;\n</div>', '14', null);
INSERT INTO `t_blog` VALUES ('169', '从零开始：一个正式的vue+webpack项目的目录结构是怎么形成的', '从零开始：一个正式的vue+webpack项目的目录结构是怎么形成的', '2018-04-12 11:20:31', '0', '0', '<div> \n <p>如何从零开始一个vue+webpack前端工程工作流的搭建，首先我们先从项目的目录结构入手。一个持续可发展，不断加入新功能，方便后期维护的目录结构究竟是长什么样子的？接下来闰土大叔带你们一起手摸手学起来。</p> \n <h2 class=\"heading\" data-id=\"heading-0\">初级前端初始化目录篇</h2> \n <p>项目伊始，我们肯定是先在terminal终端命令行（以下简称terminal）cd进入&lt;project name&gt;根目录，然后输入 <code>npm init</code> 初始化一个npm项目，在项目根目录下面就会出现一个package.json文件。 然后就可以安装依赖了，直接在terminal里输入 <code>npm i webpack vue vue-loader -D</code>。当我们把这几个安装好以后，terminal这边会提示我们WARN（警告⚠️）：</p> \n <p>&nbsp;</p> \n <img src=\"http:/static/userImages/2018/04/12/90204984-9598-42e2-aa3c-eb9291dc505b.png\" alt=\"\">\n <br> \n <p>&nbsp;</p> \n <p>翻译过来大意是，vue-loader需要一个css-loader和vue-template-compiler作为它的第三方依赖,所以听它的话，我们去进行一下安装：</p> \n <p><code>npm i css-loader vue-template-compiler -D</code></p> \n <p>那下面的警告信息提示我们缺少一些信息，这个其实无关痛痒，所以不需要去关心它。</p> \n <p>通过以上简单几个步骤，我们的项目就初始化好了。然后在根目录下面创建一个src文件夹，这是我们源码放置的目录。然后我们在src目录下面新建一个app.vue文件，里面就可以写一些关于项目的业务代码：</p> \n <pre><code class=\"hljs bash\" lang=\"bash\">&lt;template&gt;\n    &lt;div id=<span class=\"hljs-string\">\"test\"&gt;{{text}}&lt;/div&gt; &lt;/template&gt; &lt;script&gt; <span class=\"hljs-built_in\">export default { <span class=\"hljs-function\"><span class=\"hljs-title\">data () { text: <span class=\"hljs-string\">\'闰土大叔\' } } &lt;/script&gt; &lt;style&gt; <span class=\"hljs-comment\">#test{ font-size:12px; color:green; } &lt;/style&gt; </span></span></span></span></span></span></code></pre> \n <p>当然这个后缀为.vue 文件是不可以在浏览器里直接运行的，我们需要想办法让它运行起来。</p> \n <p>现在我们要在项目根目录下新建一个webpack.config.js文件，webpack是帮我们前端来打包资源的，前端资源有很多不同的类型，比如说JavaScript，css，html，image，iconfont等这些资源都是需要通过http请求加载的东西。webpack是将一个js文件加载到浏览器端之后，然后去把所有的内容去渲染出来。所以，很多时候，我们可以把js文件作为项目的入口文件。</p> \n <p>这个时候，我们在src目录下新建一个index.js作为入口文件，顺便在里面写点东西：</p> \n <pre><code class=\"hljs bash\" lang=\"bash\">import Vue from <span class=\"hljs-string\">\'vue\' import App from <span class=\"hljs-string\">\'./app.vue\' const root = document.createElement(<span class=\"hljs-string\">\'div\') document.body.appendChild(root) new Vue({ render: (h) =&gt; h(App) }).<span class=\"hljs-variable\">$mount(root) </span></span></span></span></code></pre> \n <p>index.js准备完毕之后，那么在webpack.config.js里面就可以这样写：</p> \n <pre><code class=\"hljs bash\" lang=\"bash\">const path = require(<span class=\"hljs-string\">\'path\') module.exports = { entry: path.join(__dirname, <span class=\"hljs-string\">\'src/index.js\'), output: { filename: <span class=\"hljs-string\">\'bundle.js\', path: path.join(__dirname, <span class=\"hljs-string\">\'dist\') } } </span></span></span></span></code></pre> \n <p>在上面的代码中，__dirname就代表这个文件所在的目录地址，path.join()的意思就是和后面的字符串路径拼接起来，形成一个绝对的路径。</p> \n <p>然后通过webpack把所有的文件打包成一个bundle.js文件，并且是能在浏览器里面直接运行的代码。现在我们可以在package.json 文件里的scripts对象里面添加一个脚本：</p> \n <pre><code class=\"hljs bash\" lang=\"bash\"><span class=\"hljs-string\">\"scripts\": { <span class=\"hljs-string\">\"build\": <span class=\"hljs-string\">\"webpack --config webpack.config.js\" } </span></span></span></code></pre> \n <p>看到这儿，肯定有童鞋要问了，为什么要在这里面调用webpack而不是在terminal里面直接运行呢？</p> \n <p>因为只有在这里调用webpack，它才会优先调用我们项目里面安装的webpack版本，如果我们在命令行里面输入webpack，它会调动全局的webpack，这个时候全局的webpack可能会跟我们项目中的webpack版本不一致，所以我们还是采取这种方式比较稳妥。</p> \n <p>写完之后，我们就可以在terminal输入<code>npm run build</code>跑一下，会尴尬地发现报错了：</p> \n <p>&nbsp;</p> \n <img src=\"http:/static/userImages/2018/04/12/533dce57-0d99-4593-a571-44f854b230bc.png\" alt=\"\">\n <br> \n <p>&nbsp;</p> \n <p>这个错误告诉我们，需要为.vue文件去声明一个loader。因为webpack原生是只支持JS文件类型的，并且只支持ES5的语法，所以我们在使用超出它理解范围的语法的时候，我们要使用一些帮它去处理的工具。所以我们要在webpack.config.js文件里面继续写：</p> \n <pre><code class=\"hljs bash\" lang=\"bash\">module: {\n    rules: [\n        {\n            <span class=\"hljs-built_in\">test: /.vue$/, loader: <span class=\"hljs-string\">\'vue-loader\' } ] } </span></span></code></pre> \n <p>添加完这段之后，我们再去terminal执行下<code>npm run build</code>，你会发现项目根目录下多了一个dist文件夹，点开里面发现webpack为我们自动打包生成了一个bundle.js文件，感兴趣的童鞋可以点开这个js文件看看：</p> \n</div> \n<div>\n <img src=\"http:/static/userImages/2018/04/12/32c2578e-9d08-47e3-81e3-ecce6892b898.png\" alt=\"\">&nbsp;\n</div> \n<div>\n &nbsp;\n</div> \n<div>\n 它里面代码很多，上面是固有的webpack的代码，这些代码是处理项目中的模块依赖的，因为我们项目里有很多的js相互依赖。 \n <p>&nbsp;&nbsp;</p> \n <img src=\"http:/static/userImages/2018/04/12/43abda57-0d70-44ba-ae55-f69fdb6483c7.png\" alt=\"\">\n <br> \n <p>&nbsp;</p> \n <p>往下翻到100多行左右的时候，你会发现有很多的代码其实是vue源码。因为我们项目要依赖vue.js，所以webpack会把vue.js文件打包进来。</p> \n <p>&nbsp;</p> \n <img src=\"http:/static/userImages/2018/04/12/4f9af4e9-4a2c-4906-abdb-637da7ad037a.png\" alt=\"\">\n <br> \n <p>&nbsp;</p> \n <p>你可以通过快捷键 command (Ctrl) + F 查找关键词$mount看到，红线圈住的这段代码就是我们自己写的代码，其实webpack做的工作就是把这些不同的静态资源的类型打包成一个js，然后我们在html里面引用这个js，就可以正常运行。</p> \n <p>相信大家做前端都知道，在做一个项目开发的时候，我们希望把一些零碎的js文件打包到一起，这样可以减少http请求。同样的，我们希望使用模块依赖，因为项目中会做很多可复用的代码，把它写到一个模块里面去，这样的话当我们再去写一个新项目的时候，不用再把原来的代码重新写一遍，或者是拷贝一份。</p> \n <p>当然这里面我们暂时没有提到.babelrc、.eslintrc、editorconfig、postcss.config.js等，这些我们留到后面再讲。</p> \n <p>&nbsp;</p> \n <h2 class=\"heading\" data-id=\"heading-1\">中级前端合理细化目录篇</h2> \n <p>&nbsp;</p> \n <img src=\"http:/static/userImages/2018/04/12/02525626-7a98-4237-8733-359cf2a36d2e.png\" alt=\"\">\n <br> \n <p>&nbsp;</p> \n <p>初始化工作完成之后，接下来我们要细分目录了。首先我们需要在项目的根目录下新建一个文件夹叫build，把webpack的文件单独放到这个文件夹里面。因为我们项目中会用到很多不同的相关文件的配置，接下来先新建一个 webpack.config.base.js 文件，我们把webpack里面需要用到的共同的配置放到这个base的文件里面。比如开发环境和正式环境，以及后期我们要提到的服务端渲染的环境。我们都依赖于base这个配置。</p> \n <p>以下是webpack.config.base.js文件里的代码：</p> \n <pre><code class=\"hljs bash\" lang=\"bash\">const path = require(<span class=\"hljs-string\">\'path\') const createVueLoaderOptions = require(<span class=\"hljs-string\">\'./vue-loader.config\') const isDev = process.env.NODE_ENV === <span class=\"hljs-string\">\'development\' const config = { target: <span class=\"hljs-string\">\'web\', entry: path.join(__dirname, <span class=\"hljs-string\">\'../client/index.js\'), output: { filename: <span class=\"hljs-string\">\'bundle.[hash:8].js\', path: path.join(__dirname, <span class=\"hljs-string\">\'../dist\') }, module: { rules: [ { <span class=\"hljs-built_in\">test: /\\.(vue|js|jsx)$/, loader: <span class=\"hljs-string\">\'eslint-loader\', exclude: /node_modules/, enforce: <span class=\"hljs-string\">\'pre\' }, { <span class=\"hljs-built_in\">test: /\\.vue$/, loader: <span class=\"hljs-string\">\'vue-loader\', options: createVueLoaderOptions(isDev) }, { <span class=\"hljs-built_in\">test: /\\.jsx$/, loader: <span class=\"hljs-string\">\'babel-loader\' }, { <span class=\"hljs-built_in\">test: /\\.js$/, loader: <span class=\"hljs-string\">\'babel-loader\', exclude: /node_modules/ }, { <span class=\"hljs-built_in\">test: /\\.(gif|jpg|jpeg|png|svg)$/, use: [ { loader: <span class=\"hljs-string\">\'url-loader\', options: { <span class=\"hljs-built_in\">limit: 1024, name: <span class=\"hljs-string\">\'resources/[path][name].[hash:8].[ext]\' } } ] } ] } } module.exports = config </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> \n <p>然后我们再新建一个 webpack.config.client.js ，这个client文件依赖于base文件，在此基础上扩展一些其他配置。因此我们需要在webpack.config.client.js里面敲入一行代码引入base文件 ：</p> \n <p><code>const baseConfig = require(\'./webpack.config.base\')</code></p> \n <p>基础工作做完之后，我们该如何去扩展配置呢？首先在terminal终端命令行安装下 <code>npm i webpack-merge -D</code> 我们需要webpack-merge这个工具帮助去扩展、合并不同的webpack配置，然后根据声明好的isDev来判断应该怎么合并配置。</p> \n <p>以下是webpack.config.client.js文件里的代码：</p> \n <pre><code class=\"hljs bash\" lang=\"bash\">const path = require(<span class=\"hljs-string\">\'path\') const HTMLPlugin = require(<span class=\"hljs-string\">\'html-webpack-plugin\') const webpack = require(<span class=\"hljs-string\">\'webpack\') const merge = require(<span class=\"hljs-string\">\'webpack-merge\') const ExtractPlugin = require(<span class=\"hljs-string\">\'extract-text-webpack-plugin\') const baseConfig = require(<span class=\"hljs-string\">\'./webpack.config.base\') const isDev = process.env.NODE_ENV === <span class=\"hljs-string\">\'development\' const defaultPlugins = [ new webpack.DefinePlugin({ <span class=\"hljs-string\">\'process.env\': { NODE_ENV: isDev ? <span class=\"hljs-string\">\'\"development\"\' : <span class=\"hljs-string\">\'\"production\"\' } }), new HTMLPlugin() ] const devServer = { port: 8000, host: <span class=\"hljs-string\">\'0.0.0.0\', overlay: { errors: <span class=\"hljs-literal\">true }, hot: <span class=\"hljs-literal\">true } <span class=\"hljs-built_in\">let config <span class=\"hljs-keyword\">if (isDev) { // 开发环境的配置 config = merge(baseConfig, { devtool: <span class=\"hljs-string\">\'#cheap-module-eval-source-map\', module: { rules: [ { <span class=\"hljs-built_in\">test: /\\.styl/, use: [ <span class=\"hljs-string\">\'vue-style-loader\', <span class=\"hljs-string\">\'css-loader\', // { // loader: <span class=\"hljs-string\">\'css-loader\', // options: { // module: <span class=\"hljs-literal\">true, // <span class=\"hljs-built_in\">localIdentName: isDev ? <span class=\"hljs-string\">\'[path]-[name]-[hash:base64:5]\' : <span class=\"hljs-string\">\'[hash:base64:5]\' // } // }, { loader: <span class=\"hljs-string\">\'postcss-loader\', options: { <span class=\"hljs-built_in\">sourceMap: <span class=\"hljs-literal\">true } }, <span class=\"hljs-string\">\'stylus-loader\' ] } ] }, devServer, plugins: defaultPlugins.concat([ new webpack.HotModuleReplacementPlugin(), new webpack.NoEmitOnErrorsPlugin() ]) }) } <span class=\"hljs-keyword\">else { // 正式环境的配置 config = merge(baseConfig, { entry: { app: path.join(__dirname, <span class=\"hljs-string\">\'../client/index.js\'), vendor: [<span class=\"hljs-string\">\'vue\'] }, output: { filename: <span class=\"hljs-string\">\'[name].[chunkhash:8].js\' }, module: { rules: [ { <span class=\"hljs-built_in\">test: /\\.styl/, use: ExtractPlugin.extract({ fallback: <span class=\"hljs-string\">\'vue-style-loader\', use: [ <span class=\"hljs-string\">\'css-loader\', { loader: <span class=\"hljs-string\">\'postcss-loader\', options: { <span class=\"hljs-built_in\">sourceMap: <span class=\"hljs-literal\">true } }, <span class=\"hljs-string\">\'stylus-loader\' ] }) } ] }, plugins: defaultPlugins.concat([ new ExtractPlugin(<span class=\"hljs-string\">\'styles.[contentHash:8].css\'), new webpack.optimize.CommonsChunkPlugin({ name: <span class=\"hljs-string\">\'vendor\' }), new webpack.optimize.CommonsChunkPlugin({ name: <span class=\"hljs-string\">\'runtime\' }) ]) }) } module.exports = config </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre> \n <p>最后，这个src文件夹我们要重命名一下，叫client，因为我们后期还要写服务端的代码，对应的就命名成server，正好对应它的含义。这样看起来，名称就变得更加的合理。</p> \n <p>当我们万事大吉的时候，千万记得要把 webpack.config.base.js 和 webpack.config.client.js 里面的src路径改掉，换成client，否则就会报错。</p> \n <p>&nbsp;</p> \n <img src=\"http:/static/userImages/2018/04/12/bc4ea979-3cc5-423c-8d62-6da53bcf1a71.png\" alt=\"\">\n <br> \n <p>&nbsp;</p> \n <p>以上就是我们项目最终形成的目录结构，client目录下分别有assets、layout、views这三个文件夹，其中assets目录下放静态资源，例如images、styles等；layout目录下放通用布局的组件；views目录下放具体的业务代码的组件。</p> \n <p>当然，这个目录其实还可以随着项目的开发再细分下去，这里就不展开叙述了。</p> \n <h2 class=\"heading\" data-id=\"heading-2\">写在最后</h2> \n <p>大家一定要注意，在我们正式开发项目、创建一个项目工程的时候，一定要先把目录结构理顺，条理一定要清楚。每个目录结构里面放什么东西，心里一定要先有个概念。以后新建的文件不要乱放，因为项目一旦做大，维护时间比较久的时候，可能两三个月里面都有一个文件你不会去碰它。到时候如果要去找一个东西的时候，你会找不到它，这是非常令人难受的一件事情。</p> \n <p><strong>最重要的一点是，目录结构的混乱，会导致你后续开发项目的效率变得非常的低。</strong></p> \n <p>这次关于“一个正式项目的目录结构是怎么形成的”的话题就说到这里，我之后的文章会讲些什么呢？文章预告如下：</p> \n <ul> \n  <li>eslint的错误修复小技巧</li> \n  <li>vue-loader是如何配置的</li> \n  <li>如何回答“对vue生命周期的理解”才能让面试官满意？</li> \n  <li>浅谈css-module的配置</li> \n  <li>......</li> \n  <li>正式环境打包以及异步模块打包优化</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-3\">以上内容均会第一时间发布在我的公众号：闰土大叔 ，欢迎关注。</h3> \n <p>&nbsp;</p> \n <img src=\"http:/static/userImages/2018/04/12/7bcdb3bf-f1eb-4fe7-a5c0-bda4fa48d983.jpeg\" alt=\"\">\n</div>', '14', null);
INSERT INTO `t_blog` VALUES ('170', '用js来实现那些数据结构（数组篇03）', '用js来实现那些数据结构（数组篇03）', '2018-04-12 11:20:34', '2', '0', '<p>　　终于，这是有关于数组的最后一篇，下一篇会真真切切给大家带来数据结构在js中的实现方式。那么这篇文章还是得啰嗦一下数组的相关知识，因为数组真的太重要了！不要怀疑数组在JS中的重要性与实用性。这篇文章分为两部分，第一部分会给大家简单说一下数组原生的排序方法sort和reverse。第二部分会给大家简单说一下二维和三维数组。都不难，仔细看，很简单的。</p> \n<p>　　<strong>1、reverse()</strong></p> \n<p><strong>　　　　</strong>reverse比较容易理解，颠倒数组中元素的顺序，也就是第一个变成最后一个，最后一个呢变成第一个。</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">var</span> nums = [0,1,2,3,4,5,6,7<span style=\"color: #000000\">];\nnums.reverse();\nconsole.log(nums)</span><span style=\"color: #008000\">//</span><span style=\"color: #008000\">[7, 6, 5, 4, 3, 2, 1, 0]</span></pre> \n</div> \n<p>　　　　reverse方法只是无差别的对数组进行倒叙，可能很多时候并不适用于我们的应用场景，所以才出现了sort()方法。</p> \n<p>　　<strong>2、sort()</strong></p> \n<p>&nbsp;　　　　sort()方法可以说是js数组中不太容易记忆和使用的方法，但是sort()是十分重要的一个方法，那么下面我就详细的说明一下，sort()的应用场景和使用方法。</p> \n<p>&nbsp;　　sort()方法允许传入一个匿名函数作为排序的依据，也可以不传参数，但是我想大家都知道，在不传参数的情况下，很多时候的结果并不是我们想要的，比如：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">var</span> nums = [0,2,4,9,10,11,20,32,3,6,7,8,15,26<span style=\"color: #000000\">];\n</span><span style=\"color: #0000ff\">var</span> newNums =<span style=\"color: #000000\"> nums.sort();\nconsole.log(newNums)</span><span style=\"color: #008000\">//</span><span style=\"color: #008000\">[0, 10, 11, 15, 2, 20, 26, 3, 32, 4, 6, 7, 8, 9]</span>\nconsole.log(nums)<span style=\"color: #008000\">//</span><span style=\"color: #008000\">[0, 10, 11, 15, 2, 20, 26, 3, 32, 4, 6, 7, 8, 9]</span></pre> \n</div> \n<p>　　上面的代码说明，sort会改变原来的数组，而不是生成一个排序后的新数组，大家看到上面的排序并不是依据数字从大到小排序的。这是因为，sort在排序的时候会默认把数组中的各个元素转换成字符串，并且依据字符串对应的<a href=\"https://baike.baidu.com/item/ASCII/309296?fr=aladdin&amp;fromid=99077&amp;fromtitle=ascii%E7%A0%81\" target=\"_blank\">ASCII码值</a>来比较的，那<a href=\"https://baike.baidu.com/item/ASCII/309296?fr=aladdin&amp;fromid=99077&amp;fromtitle=ascii%E7%A0%81\" target=\"_blank\">ASCII</a>是什么？<a href=\"https://baike.baidu.com/item/ASCII/309296?fr=aladdin&amp;fromid=99077&amp;fromtitle=ascii%E7%A0%81\" target=\"_blank\">ASCII</a>是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。</p> \n<p>　　显然这不是我们想要的结果，所以就需要给sort传入一个函数（compareFunction）来使排序得到我们想要的结果或者自定义排序的方式。</p> \n<p>　　在大多数实际工作的排序中，我们都会依据id值得大小，或者一些依据数值大小来排序的场景。那么我们看看如何使用compareFunction来使sort排序可以得到正确的结果：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">var</span> nums = [0,2,4,9,10,11,20,32,3,6,7,8,15,26<span style=\"color: #000000\">];\nnums.sort(</span><span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> (a,b) {\n    </span><span style=\"color: #0000ff\">return</span> a -<span style=\"color: #000000\"> b;\n})\nconsole.log(nums)</span><span style=\"color: #008000\">//</span><span style=\"color: #008000\">&nbsp;[0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 15, 20, 26, 32]</span></pre> \n</div> \n<p>　　我在刚接触sort时候看到这样的写法，第一个反应就是a和b是什么？他所代表的参数是什么意义？为什么要用a和b?我用其他的参数可以么？</p> \n<p>　　首先，a和b在这里只是代表数组中任意两个元素的值，你可以使用任何两个参数来代表它。</p> \n<p>　　那么再给大家看一个：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">var</span> nums = [0,2,4,9,10,11,20,32,3,6,7,8,15,26<span style=\"color: #000000\">];\n</span><span style=\"color: #0000ff\">var</span> i = 0<span style=\"color: #000000\">;\nnums.sort(</span><span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> (m,n) {\n    console.log(m,n)\n    console.log(</span>++<span style=\"color: #000000\">i)\n    </span><span style=\"color: #0000ff\">return</span> m -<span style=\"color: #000000\"> n;\n})\nconsole.log(nums)</span><span style=\"color: #008000\">//</span><span style=\"color: #008000\">&nbsp;[0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 15, 20, 26, 32]</span></pre> \n</div> \n<p>　　上面的代码，给大家留下一个疑问自己去找答案。这里不会多说，看看再不同数组长度下sort会循环多少次？m，n每一次的值又是什么样的？其实一个sort方法就包含很多更深层次的问题。</p> \n<p>　　那么还有一种场景，比如说后端传给我一个包含对象元素的数组，我需要依照id的大小来给这个数组排序，要怎么做呢？</p> \n<div class=\"cnblogs_code\"> \n <pre>objArr.sort(<span style=\"color: #0000ff\">function</span><span style=\"color: #000000\">(a,b){\n    </span><span style=\"color: #0000ff\">var</span> m =<span style=\"color: #000000\"> a.id;\n    </span><span style=\"color: #0000ff\">var</span> n =<span style=\"color: #000000\"> b.id;\n    </span><span style=\"color: #0000ff\">return</span> m -<span style=\"color: #000000\"> n;\n})\nconsole.log(objArr)</span></pre> \n</div> \n<p>　　console出来的结果是这样的：</p> \n<p><img src=\"http:/static/userImages/2018/04/12/e66cf984-197a-4ea0-9358-066aa9c534fc.png\" alt=\"\"></p> \n<p>　　那么这样就实现了我们在工作场景中排序的大多数的情况。那么如果你想要倒叙排序怎么办呢？a-b变成b-a。其实a-b这样的方式是简写。</p> \n<div class=\"cnblogs_code\"> \n <pre>nums.sort(<span style=\"color: #0000ff\">function</span><span style=\"color: #000000\"> (a,b) {\n    </span><span style=\"color: #0000ff\">if</span>(a&lt;<span style=\"color: #000000\">b) {\n        </span><span style=\"color: #0000ff\">return</span> -1<span style=\"color: #000000\">\n    }\n    </span><span style=\"color: #0000ff\">if</span>(a&gt;<span style=\"color: #000000\">b) {\n        </span><span style=\"color: #0000ff\">return</span> 1<span style=\"color: #000000\">\n    }\n    </span><span style=\"color: #0000ff\">return</span> 0<span style=\"color: #000000\">\n})</span></pre> \n</div> \n<p>　　<strong>或许这样更清晰一点，判断a和b值得大小来决定是否要调换两个值得位置，如果a&lt;b那么a就放在b的后面，如果a&gt;b，那么久把a放在b的前面，如果a既不大于b，也不小于b，那么说明a=b，则不改变两个值得位置。</strong></p> \n<p><strong>　　</strong>这里有一篇文章，大家可以去看一下，<a href=\"https://segmentfault.com/a/1190000000410506\">JS基础篇--sort()方法的用法，参数以及排序原理</a>。</p> \n<p>　　<strong>3、多维数组的使用及场景</strong></p> \n<p><strong>　　　　</strong>其实多维数组在平时的工作中还是很常见的，最普通的要说是二维数组了，也可以叫做矩阵。但是其实js是不支持二维或者多维数组的，但是好在js够灵活，我没有的，都可以模拟出来。那么我们也可以通过数组嵌套数组的方式来模拟多维数组。</p> \n<p>　　我们先来看看二维数组：</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">var</span> matrix = [[\"a\",\"b\",\"c\",\"d\"],[\"A\",\"B\",\"C\",\"D\"],[1,2,3,4]];</pre> \n</div> \n<p>　　这就是一个简单的二维数组形式，我们通常需要遍历数组获取其中的每一个值，其实我们可以把二维数组视为行和列，第一层循环每一行，第二层循环每一行的每一列，这样就可以得到二维数组中的每一个元素。</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">var</span> matrix = [[\"a\",\"b\",\"c\",\"d\"],[\"A\",\"B\",\"C\",\"D\"],[1,2,3,4<span style=\"color: #000000\">]];\n</span><span style=\"color: #0000ff\">for</span> (<span style=\"color: #0000ff\">var</span> i = 0; i &lt; matrix.length; i++<span style=\"color: #000000\">) {\n    document.write(</span>\"&lt;/br&gt;\"<span style=\"color: #000000\">)\n    </span><span style=\"color: #0000ff\">for</span>(<span style=\"color: #0000ff\">var</span> j = 0; j &lt; matrix[i].length;j++<span style=\"color: #000000\">) {\n        document.write(matrix[i][j])\n    }    \n}</span></pre> \n</div> \n<p>　　这样我们就得到了一个二维数组内所有的元素。</p> \n<p>　　其实三维数组也是一样的，只是再多循环一层，我们来看一下。</p> \n<div class=\"cnblogs_code\"> \n <pre><span style=\"color: #0000ff\">var</span> matrix3 =<span style=\"color: #000000\"> [];\n</span><span style=\"color: #0000ff\">for</span> (<span style=\"color: #0000ff\">var</span> i = 0; i &lt; 3; i++<span style=\"color: #000000\">) {\n    matrix3[i] </span>=<span style=\"color: #000000\"> [];\n    </span><span style=\"color: #0000ff\">for</span> (<span style=\"color: #0000ff\">var</span> j = 0; j &lt; 3; j++<span style=\"color: #000000\">) {\n        matrix3[i][j] </span>=<span style=\"color: #000000\"> [];\n        </span><span style=\"color: #0000ff\">for</span> (<span style=\"color: #0000ff\">var</span> k = 0; k &lt; 3; k++<span style=\"color: #000000\">) {\n            matrix3[i][j][k] </span>= i + j +<span style=\"color: #000000\"> k;\n        }\n    }\n}\nconsole.log(matrix3)</span></pre> \n</div> \n<p><img src=\"http:/static/userImages/2018/04/12/1353c7fd-862d-48b9-a50d-8962e0beb1aa.png\" alt=\"\"></p> \n<p>　　数组的介绍到这里就基本结束了，下一篇文章会跟大家一起来看看如何用JS来实现栈这种数据结构。</p> \n<p>　　最后，<strong>由于本人水平有限，能力与大神仍相差甚远，若有错误或不明之处，还望大家不吝赐教指正。非常感谢！</strong></p>', '14', null);
INSERT INTO `t_blog` VALUES ('171', '【原创】自己动手实现RPC服务调用框架', '【原创】自己动手实现RPC服务调用框架', '2018-04-12 11:20:38', '5', '0', '<h1 id=\"自己动手实现rpc服务调用框架\">自己动手实现rpc服务调用框架</h1> \n<p>本文利用java自带的socket编程实现了一个简单的rpc调用框架，由两个工程组成分别名为battercake-provider（服务提供者）、battercake-consumer（服务调用者）。</p> \n<h2 id=\"服务提供者\">服务提供者</h2> \n<p>本部分的工程为battercake-provider，项目结构图如下图所示</p> \n<p><img src=\"http:/static/userImages/2018/04/12/148cb627-cb68-4de7-a172-7917fe180f36.png\" alt=\"image\"></p> \n<p>先上rpc框架调用部分的代码，RpcProvider，该部分代码可以总结为两步</p> \n<ol> \n <li>将需要发布的服务存储在一个内存变量serviceList中</li> \n <li>启动socket，server.accept()方法阻塞在那，监听输入</li> \n <li>针对每一个请求，单独启动一个线程处理</li> \n</ol> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">package com.rjzheng.rpc;</span>\n\n<span class=\"kw\">import java.net.ServerSocket;</span>\n<span class=\"kw\">import java.net.Socket;</span>\n<span class=\"kw\">import java.util.ArrayList;</span>\n<span class=\"kw\">import java.util.Arrays;</span>\n<span class=\"kw\">import java.util.List;</span>\n<span class=\"co\">/**</span>\n<span class=\"co\"> * RPC服务提供器</span>\n<span class=\"co\"> * </span><span class=\"kw\">@author </span><span class=\"co\">zhengrongjun</span>\n<span class=\"co\"> *</span>\n<span class=\"co\"> */</span>\n<span class=\"kw\">public</span> <span class=\"kw\">class</span> RpcProvider {\n    \n    <span class=\"co\">//存储注册的服务列表</span>\n    <span class=\"kw\">private</span> <span class=\"dt\">static</span> List&lt;Object&gt; serviceList;\n    \n    <span class=\"co\">/**</span>\n<span class=\"co\"> * 发布rpc服务</span>\n<span class=\"co\"> * </span><span class=\"kw\">@param object</span>\n<span class=\"co\"> * </span><span class=\"kw\">@param port</span>\n<span class=\"co\"> * </span><span class=\"kw\">@throws Exception</span>\n<span class=\"co\"> */</span>\n    <span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"dt\">void</span> <span class=\"fu\">export</span>(<span class=\"dt\">int</span> port,Object<span class=\"kw\">... </span>services) <span class=\"kw\">throws</span> Exception {\n        serviceList=Arrays.<span class=\"fu\">asList</span>(services);\n        ServerSocket server = <span class=\"kw\">new</span> ServerSocket(port);\n        Socket client = <span class=\"kw\">null</span>;\n        <span class=\"kw\">while</span> (<span class=\"kw\">true</span>) {\n            <span class=\"co\">//阻塞等待输入</span>\n            client = server.<span class=\"fu\">accept</span>();\n            <span class=\"co\">//每一个请求，启动一个线程处理</span>\n            <span class=\"kw\">new</span> Thread(<span class=\"kw\">new</span> <span class=\"fu\">ServerThread</span>(client,serviceList)).<span class=\"fu\">start</span>();\n        }\n    }\n}</code></pre>\n</div> \n<p>接下来ServerThread线程处理类的代码，ServerThread主要做以下几个步骤</p> \n<ol> \n <li>读取客户端发送的服务名</li> \n <li>判断服务是否发布</li> \n <li>如果发布，则走反射逻辑，动态调用，返回结果</li> \n <li>如果未发布，则返回提示通知</li> \n</ol> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">package com.rjzheng.rpc;</span>\n\n<span class=\"kw\">import java.io.IOException;</span>\n<span class=\"kw\">import java.io.ObjectInputStream;</span>\n<span class=\"kw\">import java.io.ObjectOutputStream;</span>\n<span class=\"kw\">import java.lang.reflect.Method;</span>\n<span class=\"kw\">import java.net.Socket;</span>\n<span class=\"kw\">import java.util.List;</span>\n\n<span class=\"kw\">public</span> <span class=\"kw\">class</span> ServerThread <span class=\"kw\">implements</span> Runnable {\n\n    <span class=\"kw\">private</span> Socket client = <span class=\"kw\">null</span>;\n\n    <span class=\"kw\">private</span> List&lt;Object&gt; serviceList = <span class=\"kw\">null</span>;\n\n    <span class=\"kw\">public</span> <span class=\"fu\">ServerThread</span>(Socket client, List&lt;Object&gt; service) {\n        <span class=\"kw\">this</span>.<span class=\"fu\">client</span> = client;\n        <span class=\"kw\">this</span>.<span class=\"fu\">serviceList</span> = service;\n    }\n\n    <span class=\"fu\">@Override</span>\n    <span class=\"kw\">public</span> <span class=\"dt\">void</span> <span class=\"fu\">run</span>() {\n        ObjectInputStream input = <span class=\"kw\">null</span>;\n        ObjectOutputStream output = <span class=\"kw\">null</span>;\n        <span class=\"kw\">try</span> {\n            input = <span class=\"kw\">new</span> ObjectInputStream(client.<span class=\"fu\">getInputStream</span>());\n            output = <span class=\"kw\">new</span> ObjectOutputStream(client.<span class=\"fu\">getOutputStream</span>());\n            <span class=\"co\">// 读取客户端要访问那个service</span>\n            Class serviceClass = (Class) input.<span class=\"fu\">readObject</span>();\n            <span class=\"co\">// 找到该服务类</span>\n            Object obj = <span class=\"fu\">findService</span>(serviceClass);\n            <span class=\"kw\">if</span> (obj == <span class=\"kw\">null</span>) {\n                output.<span class=\"fu\">writeObject</span>(serviceClass.<span class=\"fu\">getName</span>() + <span class=\"st\">\"服务未发现\"</span>);\n            } <span class=\"kw\">else</span> {\n                <span class=\"co\">//利用反射调用该方法，返回结果</span>\n                <span class=\"kw\">try</span> {\n                    String methodName = input.<span class=\"fu\">readUTF</span>();\n                    Class&lt;?&gt;[] parameterTypes = (Class&lt;?&gt;[]) input.<span class=\"fu\">readObject</span>();\n                    Object[] arguments = (Object[]) input.<span class=\"fu\">readObject</span>();\n                    Method method = obj.<span class=\"fu\">getClass</span>().<span class=\"fu\">getMethod</span>(methodName, parameterTypes);  \n                    Object result = method.<span class=\"fu\">invoke</span>(obj, arguments);  \n                    output.<span class=\"fu\">writeObject</span>(result); \n                } <span class=\"kw\">catch</span> (Throwable t) {\n                    output.<span class=\"fu\">writeObject</span>(t);\n                }\n            }\n        } <span class=\"kw\">catch</span> (Exception e) {\n            e.<span class=\"fu\">printStackTrace</span>();\n        } <span class=\"kw\">finally</span> {\n            <span class=\"kw\">try</span> {\n                client.<span class=\"fu\">close</span>();\n                input.<span class=\"fu\">close</span>();\n                output.<span class=\"fu\">close</span>();\n            } <span class=\"kw\">catch</span> (IOException e) {\n                <span class=\"co\">// TODO Auto-generated catch block</span>\n                e.<span class=\"fu\">printStackTrace</span>();\n            }\n        }\n\n    }\n\n    <span class=\"kw\">private</span> Object <span class=\"fu\">findService</span>(Class serviceClass) {\n        <span class=\"co\">// TODO Auto-generated method stub</span>\n        <span class=\"kw\">for</span> (Object obj : serviceList) {\n            <span class=\"dt\">boolean</span> isFather = serviceClass.<span class=\"fu\">isAssignableFrom</span>(obj.<span class=\"fu\">getClass</span>());\n            <span class=\"kw\">if</span> (isFather) {\n                <span class=\"kw\">return</span> obj;\n            }\n        }\n        <span class=\"kw\">return</span> <span class=\"kw\">null</span>;\n    }\n\n}</code></pre>\n</div> \n<p>接下来是使用的部分<br> 先创建一个微服务，接口如下</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">package com.rjzheng.service;</span>\n\n<span class=\"kw\">public</span> <span class=\"kw\">interface</span> BatterCakeService {\n    <span class=\"co\">/**</span>\n<span class=\"co\"> * 卖煎饼的服务</span>\n<span class=\"co\"> * </span><span class=\"kw\">@param name</span>\n<span class=\"co\"> * @return</span>\n<span class=\"co\"> */</span>\n    <span class=\"kw\">public</span> String <span class=\"fu\">sellBatterCake</span>(String name);\n}</code></pre>\n</div> \n<p>实现类如下</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">package com.rjzheng.service.impl;</span>\n\n<span class=\"kw\">import com.rjzheng.service.BatterCakeService;</span>\n\n<span class=\"kw\">public</span> <span class=\"kw\">class</span> BatterCakeServiceImpl <span class=\"kw\">implements</span> BatterCakeService {\n\n    <span class=\"fu\">@Override</span>\n    <span class=\"kw\">public</span> String <span class=\"fu\">sellBatterCake</span>(String name) {\n        <span class=\"co\">// TODO Auto-generated method stub</span>\n        <span class=\"kw\">return</span> name+<span class=\"st\">\"煎饼,卖的特别好\"</span>;\n    }\n\n}</code></pre>\n</div> \n<p>接下来就是发布服务</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">package com.rjzheng.start;</span>\n\n<span class=\"kw\">import com.rjzheng.rpc.RpcProvider;</span>\n<span class=\"kw\">import com.rjzheng.service.BatterCakeService;</span>\n<span class=\"kw\">import com.rjzheng.service.impl.BatterCakeServiceImpl;</span>\n\n<span class=\"kw\">public</span> <span class=\"kw\">class</span> RpcBootStrap {\n    <span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"dt\">void</span> <span class=\"fu\">main</span>(String[] args) <span class=\"kw\">throws</span> Exception {\n        BatterCakeService batterCakeService =<span class=\"kw\">new</span> <span class=\"fu\">BatterCakeServiceImpl</span>();\n        <span class=\"co\">//发布卖煎饼的服务，注册在20006端口</span>\n        RpcProvider.<span class=\"fu\">export</span>(<span class=\"dv\">20006</span>,batterCakeService);\n    }\n}</code></pre>\n</div> \n<h2 id=\"服务消费者\">服务消费者</h2> \n<p>本部分的工程为battercake-consumer，项目结构图如下图所示<br> <img src=\"http:/static/userImages/2018/04/12/2142fd0d-c347-4e68-8eb6-7660b98b4256.png\" alt=\"image\"></p> \n<p>先上rpc框架调用部分的代码RpcConsumer，步骤分两步</p> \n<ol> \n <li>封装一个代理类处理器</li> \n <li>返回service的代理类对象</li> \n</ol> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">package com.rjzheng.rpc;</span>\n\n<span class=\"kw\">import java.lang.reflect.Proxy;</span>\n\n<span class=\"kw\">public</span> <span class=\"kw\">class</span> RpcConsumer {\n    \n    <span class=\"kw\">public</span> <span class=\"dt\">static</span> &lt;T&gt; T <span class=\"fu\">getService</span>(Class&lt;T&gt; clazz,String ip,<span class=\"dt\">int</span> port) {\n        ProxyHandler proxyHandler =<span class=\"kw\">new</span> <span class=\"fu\">ProxyHandler</span>(ip,port);\n        <span class=\"kw\">return</span> (T)Proxy.<span class=\"fu\">newProxyInstance</span>(RpcConsumer.<span class=\"fu\">class</span>.<span class=\"fu\">getClassLoader</span>(), <span class=\"kw\">new</span> Class&lt;?&gt;[] {clazz}, proxyHandler);\n    }\n}</code></pre>\n</div> \n<p>接下来上代理类处理器的代码，代理类处理步骤分以下几步</p> \n<ol> \n <li>建立socket连接</li> \n <li>封装请求数据，发送给服务提供者</li> \n <li>返回结果</li> \n</ol> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">package com.rjzheng.rpc;</span>\n\n<span class=\"kw\">import java.io.ObjectInputStream;</span>\n<span class=\"kw\">import java.io.ObjectOutputStream;</span>\n<span class=\"kw\">import java.lang.reflect.InvocationHandler;</span>\n<span class=\"kw\">import java.lang.reflect.Method;</span>\n<span class=\"kw\">import java.net.Socket;</span>\n\n<span class=\"kw\">import com.rjzheng.service.BatterCakeService;</span>\n\n<span class=\"kw\">public</span> <span class=\"kw\">class</span> ProxyHandler <span class=\"kw\">implements</span> InvocationHandler {\n\n    <span class=\"kw\">private</span> String ip;\n    <span class=\"kw\">private</span> <span class=\"dt\">int</span> port;\n\n    <span class=\"kw\">public</span> <span class=\"fu\">ProxyHandler</span>(String ip, <span class=\"dt\">int</span> port) {\n        <span class=\"co\">// TODO Auto-generated constructor stub</span>\n        <span class=\"kw\">this</span>.<span class=\"fu\">ip</span> = ip;\n        <span class=\"kw\">this</span>.<span class=\"fu\">port</span> = port;\n    }\n\n    <span class=\"fu\">@Override</span>\n    <span class=\"kw\">public</span> Object <span class=\"fu\">invoke</span>(Object proxy, Method method, Object[] args) <span class=\"kw\">throws</span> Throwable {\n        <span class=\"co\">// TODO Auto-generated method stub</span>\n        Socket socket = <span class=\"kw\">new</span> Socket(<span class=\"kw\">this</span>.<span class=\"fu\">ip</span>, <span class=\"kw\">this</span>.<span class=\"fu\">port</span>);\n        ObjectOutputStream output = <span class=\"kw\">new</span> ObjectOutputStream(socket.<span class=\"fu\">getOutputStream</span>());\n        ObjectInputStream input = <span class=\"kw\">new</span> ObjectInputStream(socket.<span class=\"fu\">getInputStream</span>());\n        <span class=\"kw\">try</span> {\n            output.<span class=\"fu\">writeObject</span>(proxy.<span class=\"fu\">getClass</span>().<span class=\"fu\">getInterfaces</span>()[<span class=\"dv\">0</span>]);\n            output.<span class=\"fu\">writeUTF</span>(method.<span class=\"fu\">getName</span>());\n            output.<span class=\"fu\">writeObject</span>(method.<span class=\"fu\">getParameterTypes</span>());\n            output.<span class=\"fu\">writeObject</span>(args);\n            output.<span class=\"fu\">flush</span>();\n            Object result = input.<span class=\"fu\">readObject</span>();\n            <span class=\"kw\">if</span>(result <span class=\"kw\">instanceof</span> Throwable) {\n                <span class=\"kw\">throw</span> (Throwable) result;\n            }\n                <span class=\"kw\">return</span> result;\n        } <span class=\"kw\">finally</span> {\n            socket.<span class=\"fu\">shutdownOutput</span>();\n        }\n    }\n\n}</code></pre>\n</div> \n<p>接下来建立一个测试类RpcTest如下（跑该测试类前，记得运行在battercake-provider端的RpcBootstrap类发布BatterCakeService服务）</p> \n<div class=\"sourceCode\">\n <pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span class=\"kw\">package com.rjzheng.start;</span>\n\n<span class=\"kw\">import com.rjzheng.rpc.RpcConsumer;</span>\n<span class=\"kw\">import com.rjzheng.service.BatterCakeService;</span>\n<span class=\"kw\">public</span> <span class=\"kw\">class</span> RpcTest {\n\n    <span class=\"kw\">public</span> <span class=\"dt\">static</span> <span class=\"dt\">void</span> <span class=\"fu\">main</span>(String[] args) {\n        BatterCakeService batterCakeService=RpcConsumer.<span class=\"fu\">getService</span>(BatterCakeService.<span class=\"fu\">class</span>, <span class=\"st\">\"127.0.0.1\"</span>, <span class=\"dv\">20006</span>);\n        String result=batterCakeService.<span class=\"fu\">sellBatterCake</span>(<span class=\"st\">\"双蛋\"</span>);\n        System.<span class=\"fu\">out</span>.<span class=\"fu\">println</span>(result);\n    }\n}</code></pre>\n</div> \n<p>输出结果如下</p> \n<pre><code>双蛋煎饼,卖的特别好</code></pre> \n<p>至此，我们就实现了一个简易的rpc服务调用框架</p>', '14', null);

-- ----------------------------
-- Table structure for t_blogger
-- ----------------------------
DROP TABLE IF EXISTS `t_blogger`;
CREATE TABLE `t_blogger` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userName` varchar(50) DEFAULT NULL,
  `password` varchar(100) DEFAULT NULL,
  `profile` text,
  `nickName` varchar(50) DEFAULT NULL,
  `sign` varchar(100) DEFAULT NULL,
  `imageName` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_blogger
-- ----------------------------
INSERT INTO `t_blogger` VALUES ('1', 'ziji20', 'a521724ab6d812853dcd9ed5c4f2bcc0', '<p>紫极<br/></p><p><br/></p>', '紫极20', '知识改变命运，技术改变世界', '20180618090401.jpg');

-- ----------------------------
-- Table structure for t_blogtype
-- ----------------------------
DROP TABLE IF EXISTS `t_blogtype`;
CREATE TABLE `t_blogtype` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `typeName` varchar(30) DEFAULT NULL,
  `orderNo` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_blogtype
-- ----------------------------
INSERT INTO `t_blogtype` VALUES ('1', 'Java核心基础', '1');
INSERT INTO `t_blogtype` VALUES ('2', 'Mysql', '2');
INSERT INTO `t_blogtype` VALUES ('3', 'Tomcat', '3');
INSERT INTO `t_blogtype` VALUES ('4', 'IT之路', '6');
INSERT INTO `t_blogtype` VALUES ('7', 'shiro', '4');
INSERT INTO `t_blogtype` VALUES ('9', 'webservice', '5');
INSERT INTO `t_blogtype` VALUES ('11', 'hibernate', '5');
INSERT INTO `t_blogtype` VALUES ('12', 'maven', '5');
INSERT INTO `t_blogtype` VALUES ('14', '其它', '6');

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userIp` varchar(50) DEFAULT NULL,
  `blogId` int(11) DEFAULT NULL,
  `content` varchar(1000) DEFAULT NULL,
  `commentDate` datetime DEFAULT NULL,
  `state` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_comment
-- ----------------------------

-- ----------------------------
-- Table structure for t_link
-- ----------------------------
DROP TABLE IF EXISTS `t_link`;
CREATE TABLE `t_link` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `linkName` varchar(100) DEFAULT NULL,
  `linkUrl` varchar(200) DEFAULT NULL,
  `orderNo` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_link
-- ----------------------------
INSERT INTO `t_link` VALUES ('1', 'Java知识分享网', 'http://www.java1234.com/', '1');
INSERT INTO `t_link` VALUES ('2', '百度云搜索引擎', 'http://pan.java1234.com/', '2');
INSERT INTO `t_link` VALUES ('3', '小图标下载', 'http://www.easyicon.net/', '3');
INSERT INTO `t_link` VALUES ('4', 'Java贴吧', 'http://tieba.baidu.com/f?kw=java', '4');
INSERT INTO `t_link` VALUES ('5', '免费logo在线制作', 'http://www.uugai.com/', '5');
